// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TaxConfigEnergy struct {
	EndDate int64 `json:"EndDate"`

	StartDate int64 `json:"StartDate"`

	TaxType *UnionNullString `json:"TaxType"`

	TaxTypeDescription *UnionNullString `json:"TaxTypeDescription"`

	TaxUom *UnionNullString `json:"TaxUom"`

	TaxValue float64 `json:"TaxValue"`
}

const TaxConfigEnergyAvroCRC64Fingerprint = "\xc52%5?\x8f\x16\x88"

func NewTaxConfigEnergy() TaxConfigEnergy {
	r := TaxConfigEnergy{}
	r.TaxType = nil
	r.TaxTypeDescription = nil
	r.TaxUom = nil
	return r
}

func DeserializeTaxConfigEnergy(r io.Reader) (TaxConfigEnergy, error) {
	t := NewTaxConfigEnergy()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTaxConfigEnergyFromSchema(r io.Reader, schema string) (TaxConfigEnergy, error) {
	t := NewTaxConfigEnergy()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTaxConfigEnergy(r TaxConfigEnergy, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.EndDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.StartDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TaxType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TaxTypeDescription, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TaxUom, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.TaxValue, w)
	if err != nil {
		return err
	}
	return err
}

func (r TaxConfigEnergy) Serialize(w io.Writer) error {
	return writeTaxConfigEnergy(r, w)
}

func (r TaxConfigEnergy) Schema() string {
	return "{\"fields\":[{\"name\":\"EndDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"StartDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"TaxType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxTypeDescription\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxUom\",\"type\":[\"null\",\"string\"]},{\"name\":\"TaxValue\",\"type\":\"double\"}],\"name\":\"GridTariff.Events.V1.TaxConfigEnergy\",\"type\":\"record\"}"
}

func (r TaxConfigEnergy) SchemaName() string {
	return "GridTariff.Events.V1.TaxConfigEnergy"
}

func (_ TaxConfigEnergy) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TaxConfigEnergy) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TaxConfigEnergy) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TaxConfigEnergy) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TaxConfigEnergy) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TaxConfigEnergy) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TaxConfigEnergy) SetString(v string)   { panic("Unsupported operation") }
func (_ TaxConfigEnergy) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TaxConfigEnergy) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.EndDate}

		return w

	case 1:
		w := types.Long{Target: &r.StartDate}

		return w

	case 2:
		r.TaxType = NewUnionNullString()

		return r.TaxType
	case 3:
		r.TaxTypeDescription = NewUnionNullString()

		return r.TaxTypeDescription
	case 4:
		r.TaxUom = NewUnionNullString()

		return r.TaxUom
	case 5:
		w := types.Double{Target: &r.TaxValue}

		return w

	}
	panic("Unknown field index")
}

func (r *TaxConfigEnergy) SetDefault(i int) {
	switch i {
	case 2:
		r.TaxType = nil
		return
	case 3:
		r.TaxTypeDescription = nil
		return
	case 4:
		r.TaxUom = nil
		return
	}
	panic("Unknown field index")
}

func (r *TaxConfigEnergy) NullField(i int) {
	switch i {
	case 2:
		r.TaxType = nil
		return
	case 3:
		r.TaxTypeDescription = nil
		return
	case 4:
		r.TaxUom = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TaxConfigEnergy) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TaxConfigEnergy) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TaxConfigEnergy) HintSize(int)                     { panic("Unsupported operation") }
func (_ TaxConfigEnergy) Finalize()                        {}

func (_ TaxConfigEnergy) AvroCRC64Fingerprint() []byte {
	return []byte(TaxConfigEnergyAvroCRC64Fingerprint)
}

func (r TaxConfigEnergy) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EndDate"], err = json.Marshal(r.EndDate)
	if err != nil {
		return nil, err
	}
	output["StartDate"], err = json.Marshal(r.StartDate)
	if err != nil {
		return nil, err
	}
	output["TaxType"], err = json.Marshal(r.TaxType)
	if err != nil {
		return nil, err
	}
	output["TaxTypeDescription"], err = json.Marshal(r.TaxTypeDescription)
	if err != nil {
		return nil, err
	}
	output["TaxUom"], err = json.Marshal(r.TaxUom)
	if err != nil {
		return nil, err
	}
	output["TaxValue"], err = json.Marshal(r.TaxValue)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TaxConfigEnergy) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EndDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EndDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["StartDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for StartDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TaxType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TaxType); err != nil {
			return err
		}
	} else {
		r.TaxType = NewUnionNullString()

		r.TaxType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TaxTypeDescription"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TaxTypeDescription); err != nil {
			return err
		}
	} else {
		r.TaxTypeDescription = NewUnionNullString()

		r.TaxTypeDescription = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TaxUom"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TaxUom); err != nil {
			return err
		}
	} else {
		r.TaxUom = NewUnionNullString()

		r.TaxUom = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TaxValue"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TaxValue); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TaxValue")
	}
	return nil
}
