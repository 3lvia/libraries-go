// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PowerPrice2 struct {
	PowerPriceLevel *UnionNullArrayUnionNullPowerPrice `json:"PowerPriceLevel"`
}

const PowerPrice2AvroCRC64Fingerprint = "3|O#d\xfeW\xfd"

func NewPowerPrice2() PowerPrice2 {
	r := PowerPrice2{}
	r.PowerPriceLevel = nil
	return r
}

func DeserializePowerPrice2(r io.Reader) (PowerPrice2, error) {
	t := NewPowerPrice2()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePowerPrice2FromSchema(r io.Reader, schema string) (PowerPrice2, error) {
	t := NewPowerPrice2()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePowerPrice2(r PowerPrice2, w io.Writer) error {
	var err error
	err = writeUnionNullArrayUnionNullPowerPrice(r.PowerPriceLevel, w)
	if err != nil {
		return err
	}
	return err
}

func (r PowerPrice2) Serialize(w io.Writer) error {
	return writePowerPrice2(r, w)
}

func (r PowerPrice2) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"PowerPriceLevel\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Currency\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LevelInfo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MonetaryUnitOfMeasure\",\"type\":[\"null\",\"string\"]},{\"name\":\"MonthlyActivePowerExTaxes\",\"type\":\"double\"},{\"default\":null,\"name\":\"MonthlyReactivePowerExTaxes\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"MonthlyUnitOfMeasure\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NextIdDown\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NextIdUp\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValueMax\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ValueMin\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ValueUnitOfMeasure\",\"type\":[\"null\",\"string\"]}],\"name\":\"PowerPrice\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"GridTariff.Events.V1.PowerPrice2\",\"type\":\"record\"}"
}

func (r PowerPrice2) SchemaName() string {
	return "GridTariff.Events.V1.PowerPrice2"
}

func (_ PowerPrice2) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PowerPrice2) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PowerPrice2) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PowerPrice2) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PowerPrice2) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PowerPrice2) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PowerPrice2) SetString(v string)   { panic("Unsupported operation") }
func (_ PowerPrice2) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PowerPrice2) Get(i int) types.Field {
	switch i {
	case 0:
		r.PowerPriceLevel = NewUnionNullArrayUnionNullPowerPrice()

		return r.PowerPriceLevel
	}
	panic("Unknown field index")
}

func (r *PowerPrice2) SetDefault(i int) {
	switch i {
	case 0:
		r.PowerPriceLevel = nil
		return
	}
	panic("Unknown field index")
}

func (r *PowerPrice2) NullField(i int) {
	switch i {
	case 0:
		r.PowerPriceLevel = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ PowerPrice2) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PowerPrice2) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PowerPrice2) HintSize(int)                     { panic("Unsupported operation") }
func (_ PowerPrice2) Finalize()                        {}

func (_ PowerPrice2) AvroCRC64Fingerprint() []byte {
	return []byte(PowerPrice2AvroCRC64Fingerprint)
}

func (r PowerPrice2) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["PowerPriceLevel"], err = json.Marshal(r.PowerPriceLevel)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PowerPrice2) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["PowerPriceLevel"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PowerPriceLevel); err != nil {
			return err
		}
	} else {
		r.PowerPriceLevel = NewUnionNullArrayUnionNullPowerPrice()

		r.PowerPriceLevel = nil
	}
	return nil
}
