// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayUnionNullTaxConfigPowerTypeEnum int

const (
	UnionNullArrayUnionNullTaxConfigPowerTypeEnumArrayUnionNullTaxConfigPower UnionNullArrayUnionNullTaxConfigPowerTypeEnum = 1
)

type UnionNullArrayUnionNullTaxConfigPower struct {
	Null                         *types.NullVal
	ArrayUnionNullTaxConfigPower []*UnionNullTaxConfigPower
	UnionType                    UnionNullArrayUnionNullTaxConfigPowerTypeEnum
}

func writeUnionNullArrayUnionNullTaxConfigPower(r *UnionNullArrayUnionNullTaxConfigPower, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayUnionNullTaxConfigPowerTypeEnumArrayUnionNullTaxConfigPower:
		return writeArrayUnionNullTaxConfigPower(r.ArrayUnionNullTaxConfigPower, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullTaxConfigPower")
}

func NewUnionNullArrayUnionNullTaxConfigPower() *UnionNullArrayUnionNullTaxConfigPower {
	return &UnionNullArrayUnionNullTaxConfigPower{}
}

func (r *UnionNullArrayUnionNullTaxConfigPower) Serialize(w io.Writer) error {
	return writeUnionNullArrayUnionNullTaxConfigPower(r, w)
}

func DeserializeUnionNullArrayUnionNullTaxConfigPower(r io.Reader) (*UnionNullArrayUnionNullTaxConfigPower, error) {
	t := NewUnionNullArrayUnionNullTaxConfigPower()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayUnionNullTaxConfigPowerFromSchema(r io.Reader, schema string) (*UnionNullArrayUnionNullTaxConfigPower, error) {
	t := NewUnionNullArrayUnionNullTaxConfigPower()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayUnionNullTaxConfigPower) Schema() string {
	return "[\"null\",{\"items\":[\"null\",{\"fields\":[{\"name\":\"EndDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"StartDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"TaxType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxTypeDescription\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxUom\",\"type\":[\"null\",\"string\"]},{\"name\":\"TaxValue\",\"type\":\"double\"}],\"name\":\"TaxConfigPower\",\"type\":\"record\"}],\"type\":\"array\"}]"
}

func (_ *UnionNullArrayUnionNullTaxConfigPower) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigPower) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigPower) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigPower) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigPower) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigPower) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayUnionNullTaxConfigPower) SetLong(v int64) {

	r.UnionType = (UnionNullArrayUnionNullTaxConfigPowerTypeEnum)(v)
}

func (r *UnionNullArrayUnionNullTaxConfigPower) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayUnionNullTaxConfigPower = make([]*UnionNullTaxConfigPower, 0)
		return &ArrayUnionNullTaxConfigPowerWrapper{Target: (&r.ArrayUnionNullTaxConfigPower)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayUnionNullTaxConfigPower) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigPower) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigPower) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigPower) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullTaxConfigPower) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullTaxConfigPower) Finalize() {}

func (r *UnionNullArrayUnionNullTaxConfigPower) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayUnionNullTaxConfigPowerTypeEnumArrayUnionNullTaxConfigPower:
		return json.Marshal(map[string]interface{}{"array": r.ArrayUnionNullTaxConfigPower})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayUnionNullTaxConfigPower")
}

func (r *UnionNullArrayUnionNullTaxConfigPower) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayUnionNullTaxConfigPower)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullTaxConfigPower")
}
