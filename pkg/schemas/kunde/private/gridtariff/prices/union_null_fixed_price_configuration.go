// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullFixedPriceConfigurationTypeEnum int

const (
	UnionNullFixedPriceConfigurationTypeEnumFixedPriceConfiguration UnionNullFixedPriceConfigurationTypeEnum = 1
)

type UnionNullFixedPriceConfiguration struct {
	Null                    *types.NullVal
	FixedPriceConfiguration FixedPriceConfiguration
	UnionType               UnionNullFixedPriceConfigurationTypeEnum
}

func writeUnionNullFixedPriceConfiguration(r *UnionNullFixedPriceConfiguration, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullFixedPriceConfigurationTypeEnumFixedPriceConfiguration:
		return writeFixedPriceConfiguration(r.FixedPriceConfiguration, w)
	}
	return fmt.Errorf("invalid value for *UnionNullFixedPriceConfiguration")
}

func NewUnionNullFixedPriceConfiguration() *UnionNullFixedPriceConfiguration {
	return &UnionNullFixedPriceConfiguration{}
}

func (r *UnionNullFixedPriceConfiguration) Serialize(w io.Writer) error {
	return writeUnionNullFixedPriceConfiguration(r, w)
}

func DeserializeUnionNullFixedPriceConfiguration(r io.Reader) (*UnionNullFixedPriceConfiguration, error) {
	t := NewUnionNullFixedPriceConfiguration()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullFixedPriceConfigurationFromSchema(r io.Reader, schema string) (*UnionNullFixedPriceConfiguration, error) {
	t := NewUnionNullFixedPriceConfiguration()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullFixedPriceConfiguration) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"AdditionalProperties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",{\"fields\":[],\"name\":\"Object\",\"namespace\":\"System\",\"type\":\"record\"}]}]},{\"default\":null,\"name\":\"AllDaysPerMonth\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Basis\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DaysPerMonth\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"MaxhoursPerDay\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"MaxhoursPerMonth\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Months\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"MonthsOffset\",\"type\":[\"null\",\"int\"]}],\"name\":\"FixedPriceConfiguration\",\"type\":\"record\"}]"
}

func (_ *UnionNullFixedPriceConfiguration) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullFixedPriceConfiguration) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullFixedPriceConfiguration) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullFixedPriceConfiguration) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullFixedPriceConfiguration) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullFixedPriceConfiguration) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullFixedPriceConfiguration) SetLong(v int64) {

	r.UnionType = (UnionNullFixedPriceConfigurationTypeEnum)(v)
}

func (r *UnionNullFixedPriceConfiguration) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.FixedPriceConfiguration = NewFixedPriceConfiguration()
		return &types.Record{Target: (&r.FixedPriceConfiguration)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullFixedPriceConfiguration) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullFixedPriceConfiguration) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullFixedPriceConfiguration) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullFixedPriceConfiguration) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullFixedPriceConfiguration) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullFixedPriceConfiguration) Finalize()                {}

func (r *UnionNullFixedPriceConfiguration) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullFixedPriceConfigurationTypeEnumFixedPriceConfiguration:
		return json.Marshal(map[string]interface{}{"GridTariff.Events.V1.FixedPriceConfiguration": r.FixedPriceConfiguration})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullFixedPriceConfiguration")
}

func (r *UnionNullFixedPriceConfiguration) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["GridTariff.Events.V1.FixedPriceConfiguration"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.FixedPriceConfiguration)
	}
	return fmt.Errorf("invalid value for *UnionNullFixedPriceConfiguration")
}
