// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Season struct {
	EnergyPrice *UnionNullEnergyPrice2 `json:"EnergyPrice"`

	Months *UnionNullArrayInt `json:"Months"`

	Name *UnionNullString `json:"Name"`

	PowerPrices *UnionNullPowerPrice2 `json:"PowerPrices"`
}

const SeasonAvroCRC64Fingerprint = "&\x148\xb0XZd\xbf"

func NewSeason() Season {
	r := Season{}
	r.EnergyPrice = nil
	r.Months = nil
	r.Name = nil
	r.PowerPrices = nil
	return r
}

func DeserializeSeason(r io.Reader) (Season, error) {
	t := NewSeason()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSeasonFromSchema(r io.Reader, schema string) (Season, error) {
	t := NewSeason()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSeason(r Season, w io.Writer) error {
	var err error
	err = writeUnionNullEnergyPrice2(r.EnergyPrice, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayInt(r.Months, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullPowerPrice2(r.PowerPrices, w)
	if err != nil {
		return err
	}
	return err
}

func (r Season) Serialize(w io.Writer) error {
	return writeSeason(r, w)
}

func (r Season) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"EnergyPrice\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Currency\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EnergyPriceLevel\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"EnergyExTaxes\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Hours\",\"type\":[\"null\",{\"items\":\"int\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Level\",\"type\":[\"null\",\"string\"]}],\"name\":\"EnergyPrice\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"MonetaryUnitOfMeasure\",\"type\":[\"null\",\"string\"]}],\"name\":\"EnergyPrice2\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Months\",\"type\":[\"null\",{\"items\":\"int\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PowerPrices\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"PowerPriceLevel\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Currency\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LevelInfo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MonetaryUnitOfMeasure\",\"type\":[\"null\",\"string\"]},{\"name\":\"MonthlyActivePowerExTaxes\",\"type\":\"double\"},{\"default\":null,\"name\":\"MonthlyReactivePowerExTaxes\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"MonthlyUnitOfMeasure\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NextIdDown\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NextIdUp\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValueMax\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ValueMin\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ValueUnitOfMeasure\",\"type\":[\"null\",\"string\"]}],\"name\":\"PowerPrice\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"PowerPrice2\",\"type\":\"record\"}]}],\"name\":\"GridTariff.Events.V1.Season\",\"type\":\"record\"}"
}

func (r Season) SchemaName() string {
	return "GridTariff.Events.V1.Season"
}

func (_ Season) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Season) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Season) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Season) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Season) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Season) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Season) SetString(v string)   { panic("Unsupported operation") }
func (_ Season) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Season) Get(i int) types.Field {
	switch i {
	case 0:
		r.EnergyPrice = NewUnionNullEnergyPrice2()

		return r.EnergyPrice
	case 1:
		r.Months = NewUnionNullArrayInt()

		return r.Months
	case 2:
		r.Name = NewUnionNullString()

		return r.Name
	case 3:
		r.PowerPrices = NewUnionNullPowerPrice2()

		return r.PowerPrices
	}
	panic("Unknown field index")
}

func (r *Season) SetDefault(i int) {
	switch i {
	case 0:
		r.EnergyPrice = nil
		return
	case 1:
		r.Months = nil
		return
	case 2:
		r.Name = nil
		return
	case 3:
		r.PowerPrices = nil
		return
	}
	panic("Unknown field index")
}

func (r *Season) NullField(i int) {
	switch i {
	case 0:
		r.EnergyPrice = nil
		return
	case 1:
		r.Months = nil
		return
	case 2:
		r.Name = nil
		return
	case 3:
		r.PowerPrices = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Season) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Season) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Season) HintSize(int)                     { panic("Unsupported operation") }
func (_ Season) Finalize()                        {}

func (_ Season) AvroCRC64Fingerprint() []byte {
	return []byte(SeasonAvroCRC64Fingerprint)
}

func (r Season) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EnergyPrice"], err = json.Marshal(r.EnergyPrice)
	if err != nil {
		return nil, err
	}
	output["Months"], err = json.Marshal(r.Months)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["PowerPrices"], err = json.Marshal(r.PowerPrices)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Season) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EnergyPrice"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnergyPrice); err != nil {
			return err
		}
	} else {
		r.EnergyPrice = NewUnionNullEnergyPrice2()

		r.EnergyPrice = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Months"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Months); err != nil {
			return err
		}
	} else {
		r.Months = NewUnionNullArrayInt()

		r.Months = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PowerPrices"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PowerPrices); err != nil {
			return err
		}
	} else {
		r.PowerPrices = NewUnionNullPowerPrice2()

		r.PowerPrices = nil
	}
	return nil
}
