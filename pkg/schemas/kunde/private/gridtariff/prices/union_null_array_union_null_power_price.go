// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayUnionNullPowerPriceTypeEnum int

const (
	UnionNullArrayUnionNullPowerPriceTypeEnumArrayUnionNullPowerPrice UnionNullArrayUnionNullPowerPriceTypeEnum = 1
)

type UnionNullArrayUnionNullPowerPrice struct {
	Null                     *types.NullVal
	ArrayUnionNullPowerPrice []*UnionNullPowerPrice
	UnionType                UnionNullArrayUnionNullPowerPriceTypeEnum
}

func writeUnionNullArrayUnionNullPowerPrice(r *UnionNullArrayUnionNullPowerPrice, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayUnionNullPowerPriceTypeEnumArrayUnionNullPowerPrice:
		return writeArrayUnionNullPowerPrice(r.ArrayUnionNullPowerPrice, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullPowerPrice")
}

func NewUnionNullArrayUnionNullPowerPrice() *UnionNullArrayUnionNullPowerPrice {
	return &UnionNullArrayUnionNullPowerPrice{}
}

func (r *UnionNullArrayUnionNullPowerPrice) Serialize(w io.Writer) error {
	return writeUnionNullArrayUnionNullPowerPrice(r, w)
}

func DeserializeUnionNullArrayUnionNullPowerPrice(r io.Reader) (*UnionNullArrayUnionNullPowerPrice, error) {
	t := NewUnionNullArrayUnionNullPowerPrice()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayUnionNullPowerPriceFromSchema(r io.Reader, schema string) (*UnionNullArrayUnionNullPowerPrice, error) {
	t := NewUnionNullArrayUnionNullPowerPrice()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayUnionNullPowerPrice) Schema() string {
	return "[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Currency\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LevelInfo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MonetaryUnitOfMeasure\",\"type\":[\"null\",\"string\"]},{\"name\":\"MonthlyActivePowerExTaxes\",\"type\":\"double\"},{\"default\":null,\"name\":\"MonthlyReactivePowerExTaxes\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"MonthlyUnitOfMeasure\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NextIdDown\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NextIdUp\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValueMax\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ValueMin\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ValueUnitOfMeasure\",\"type\":[\"null\",\"string\"]}],\"name\":\"PowerPrice\",\"type\":\"record\"}],\"type\":\"array\"}]"
}

func (_ *UnionNullArrayUnionNullPowerPrice) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullPowerPrice) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullPowerPrice) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullPowerPrice) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullPowerPrice) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullPowerPrice) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayUnionNullPowerPrice) SetLong(v int64) {

	r.UnionType = (UnionNullArrayUnionNullPowerPriceTypeEnum)(v)
}

func (r *UnionNullArrayUnionNullPowerPrice) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayUnionNullPowerPrice = make([]*UnionNullPowerPrice, 0)
		return &ArrayUnionNullPowerPriceWrapper{Target: (&r.ArrayUnionNullPowerPrice)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayUnionNullPowerPrice) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullPowerPrice) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullPowerPrice) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullPowerPrice) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullPowerPrice) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullPowerPrice) Finalize()                {}

func (r *UnionNullArrayUnionNullPowerPrice) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayUnionNullPowerPriceTypeEnumArrayUnionNullPowerPrice:
		return json.Marshal(map[string]interface{}{"array": r.ArrayUnionNullPowerPrice})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayUnionNullPowerPrice")
}

func (r *UnionNullArrayUnionNullPowerPrice) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayUnionNullPowerPrice)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullPowerPrice")
}
