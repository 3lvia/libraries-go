// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EnergyPrice struct {
	EnergyExTaxes *UnionNullDouble `json:"EnergyExTaxes"`

	Hours *UnionNullArrayInt `json:"Hours"`

	Id *UnionNullString `json:"Id"`

	Level *UnionNullString `json:"Level"`
}

const EnergyPriceAvroCRC64Fingerprint = "\xc7k\xe14\xfd\xb3z\xb2"

func NewEnergyPrice() EnergyPrice {
	r := EnergyPrice{}
	r.EnergyExTaxes = nil
	r.Hours = nil
	r.Id = nil
	r.Level = nil
	return r
}

func DeserializeEnergyPrice(r io.Reader) (EnergyPrice, error) {
	t := NewEnergyPrice()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnergyPriceFromSchema(r io.Reader, schema string) (EnergyPrice, error) {
	t := NewEnergyPrice()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnergyPrice(r EnergyPrice, w io.Writer) error {
	var err error
	err = writeUnionNullDouble(r.EnergyExTaxes, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayInt(r.Hours, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Level, w)
	if err != nil {
		return err
	}
	return err
}

func (r EnergyPrice) Serialize(w io.Writer) error {
	return writeEnergyPrice(r, w)
}

func (r EnergyPrice) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"EnergyExTaxes\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Hours\",\"type\":[\"null\",{\"items\":\"int\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Level\",\"type\":[\"null\",\"string\"]}],\"name\":\"GridTariff.Events.V1.EnergyPrice\",\"type\":\"record\"}"
}

func (r EnergyPrice) SchemaName() string {
	return "GridTariff.Events.V1.EnergyPrice"
}

func (_ EnergyPrice) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EnergyPrice) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EnergyPrice) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EnergyPrice) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EnergyPrice) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EnergyPrice) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EnergyPrice) SetString(v string)   { panic("Unsupported operation") }
func (_ EnergyPrice) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EnergyPrice) Get(i int) types.Field {
	switch i {
	case 0:
		r.EnergyExTaxes = NewUnionNullDouble()

		return r.EnergyExTaxes
	case 1:
		r.Hours = NewUnionNullArrayInt()

		return r.Hours
	case 2:
		r.Id = NewUnionNullString()

		return r.Id
	case 3:
		r.Level = NewUnionNullString()

		return r.Level
	}
	panic("Unknown field index")
}

func (r *EnergyPrice) SetDefault(i int) {
	switch i {
	case 0:
		r.EnergyExTaxes = nil
		return
	case 1:
		r.Hours = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.Level = nil
		return
	}
	panic("Unknown field index")
}

func (r *EnergyPrice) NullField(i int) {
	switch i {
	case 0:
		r.EnergyExTaxes = nil
		return
	case 1:
		r.Hours = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.Level = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EnergyPrice) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EnergyPrice) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EnergyPrice) HintSize(int)                     { panic("Unsupported operation") }
func (_ EnergyPrice) Finalize()                        {}

func (_ EnergyPrice) AvroCRC64Fingerprint() []byte {
	return []byte(EnergyPriceAvroCRC64Fingerprint)
}

func (r EnergyPrice) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EnergyExTaxes"], err = json.Marshal(r.EnergyExTaxes)
	if err != nil {
		return nil, err
	}
	output["Hours"], err = json.Marshal(r.Hours)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Level"], err = json.Marshal(r.Level)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EnergyPrice) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EnergyExTaxes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnergyExTaxes); err != nil {
			return err
		}
	} else {
		r.EnergyExTaxes = NewUnionNullDouble()

		r.EnergyExTaxes = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Hours"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Hours); err != nil {
			return err
		}
	} else {
		r.Hours = NewUnionNullArrayInt()

		r.Hours = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Level"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Level); err != nil {
			return err
		}
	} else {
		r.Level = NewUnionNullString()

		r.Level = nil
	}
	return nil
}
