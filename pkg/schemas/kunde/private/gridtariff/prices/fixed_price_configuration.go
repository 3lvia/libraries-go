// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type FixedPriceConfiguration struct {
	AdditionalProperties *UnionNullMapUnionNullObject `json:"AdditionalProperties"`

	AllDaysPerMonth *UnionNullBool `json:"AllDaysPerMonth"`

	Basis *UnionNullString `json:"Basis"`

	DaysPerMonth *UnionNullInt `json:"DaysPerMonth"`

	MaxhoursPerDay *UnionNullInt `json:"MaxhoursPerDay"`

	MaxhoursPerMonth *UnionNullInt `json:"MaxhoursPerMonth"`

	Months *UnionNullInt `json:"Months"`

	MonthsOffset *UnionNullInt `json:"MonthsOffset"`
}

const FixedPriceConfigurationAvroCRC64Fingerprint = "w\x19 X\xbc\x1an\x90"

func NewFixedPriceConfiguration() FixedPriceConfiguration {
	r := FixedPriceConfiguration{}
	r.AdditionalProperties = nil
	r.AllDaysPerMonth = nil
	r.Basis = nil
	r.DaysPerMonth = nil
	r.MaxhoursPerDay = nil
	r.MaxhoursPerMonth = nil
	r.Months = nil
	r.MonthsOffset = nil
	return r
}

func DeserializeFixedPriceConfiguration(r io.Reader) (FixedPriceConfiguration, error) {
	t := NewFixedPriceConfiguration()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFixedPriceConfigurationFromSchema(r io.Reader, schema string) (FixedPriceConfiguration, error) {
	t := NewFixedPriceConfiguration()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFixedPriceConfiguration(r FixedPriceConfiguration, w io.Writer) error {
	var err error
	err = writeUnionNullMapUnionNullObject(r.AdditionalProperties, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.AllDaysPerMonth, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Basis, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.DaysPerMonth, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.MaxhoursPerDay, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.MaxhoursPerMonth, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Months, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.MonthsOffset, w)
	if err != nil {
		return err
	}
	return err
}

func (r FixedPriceConfiguration) Serialize(w io.Writer) error {
	return writeFixedPriceConfiguration(r, w)
}

func (r FixedPriceConfiguration) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"AdditionalProperties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",{\"fields\":[],\"name\":\"Object\",\"namespace\":\"System\",\"type\":\"record\"}]}]},{\"default\":null,\"name\":\"AllDaysPerMonth\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Basis\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DaysPerMonth\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"MaxhoursPerDay\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"MaxhoursPerMonth\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Months\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"MonthsOffset\",\"type\":[\"null\",\"int\"]}],\"name\":\"GridTariff.Events.V1.FixedPriceConfiguration\",\"type\":\"record\"}"
}

func (r FixedPriceConfiguration) SchemaName() string {
	return "GridTariff.Events.V1.FixedPriceConfiguration"
}

func (_ FixedPriceConfiguration) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ FixedPriceConfiguration) SetInt(v int32)       { panic("Unsupported operation") }
func (_ FixedPriceConfiguration) SetLong(v int64)      { panic("Unsupported operation") }
func (_ FixedPriceConfiguration) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ FixedPriceConfiguration) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ FixedPriceConfiguration) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ FixedPriceConfiguration) SetString(v string)   { panic("Unsupported operation") }
func (_ FixedPriceConfiguration) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FixedPriceConfiguration) Get(i int) types.Field {
	switch i {
	case 0:
		r.AdditionalProperties = NewUnionNullMapUnionNullObject()

		return r.AdditionalProperties
	case 1:
		r.AllDaysPerMonth = NewUnionNullBool()

		return r.AllDaysPerMonth
	case 2:
		r.Basis = NewUnionNullString()

		return r.Basis
	case 3:
		r.DaysPerMonth = NewUnionNullInt()

		return r.DaysPerMonth
	case 4:
		r.MaxhoursPerDay = NewUnionNullInt()

		return r.MaxhoursPerDay
	case 5:
		r.MaxhoursPerMonth = NewUnionNullInt()

		return r.MaxhoursPerMonth
	case 6:
		r.Months = NewUnionNullInt()

		return r.Months
	case 7:
		r.MonthsOffset = NewUnionNullInt()

		return r.MonthsOffset
	}
	panic("Unknown field index")
}

func (r *FixedPriceConfiguration) SetDefault(i int) {
	switch i {
	case 0:
		r.AdditionalProperties = nil
		return
	case 1:
		r.AllDaysPerMonth = nil
		return
	case 2:
		r.Basis = nil
		return
	case 3:
		r.DaysPerMonth = nil
		return
	case 4:
		r.MaxhoursPerDay = nil
		return
	case 5:
		r.MaxhoursPerMonth = nil
		return
	case 6:
		r.Months = nil
		return
	case 7:
		r.MonthsOffset = nil
		return
	}
	panic("Unknown field index")
}

func (r *FixedPriceConfiguration) NullField(i int) {
	switch i {
	case 0:
		r.AdditionalProperties = nil
		return
	case 1:
		r.AllDaysPerMonth = nil
		return
	case 2:
		r.Basis = nil
		return
	case 3:
		r.DaysPerMonth = nil
		return
	case 4:
		r.MaxhoursPerDay = nil
		return
	case 5:
		r.MaxhoursPerMonth = nil
		return
	case 6:
		r.Months = nil
		return
	case 7:
		r.MonthsOffset = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ FixedPriceConfiguration) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ FixedPriceConfiguration) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ FixedPriceConfiguration) HintSize(int)                     { panic("Unsupported operation") }
func (_ FixedPriceConfiguration) Finalize()                        {}

func (_ FixedPriceConfiguration) AvroCRC64Fingerprint() []byte {
	return []byte(FixedPriceConfigurationAvroCRC64Fingerprint)
}

func (r FixedPriceConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AdditionalProperties"], err = json.Marshal(r.AdditionalProperties)
	if err != nil {
		return nil, err
	}
	output["AllDaysPerMonth"], err = json.Marshal(r.AllDaysPerMonth)
	if err != nil {
		return nil, err
	}
	output["Basis"], err = json.Marshal(r.Basis)
	if err != nil {
		return nil, err
	}
	output["DaysPerMonth"], err = json.Marshal(r.DaysPerMonth)
	if err != nil {
		return nil, err
	}
	output["MaxhoursPerDay"], err = json.Marshal(r.MaxhoursPerDay)
	if err != nil {
		return nil, err
	}
	output["MaxhoursPerMonth"], err = json.Marshal(r.MaxhoursPerMonth)
	if err != nil {
		return nil, err
	}
	output["Months"], err = json.Marshal(r.Months)
	if err != nil {
		return nil, err
	}
	output["MonthsOffset"], err = json.Marshal(r.MonthsOffset)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *FixedPriceConfiguration) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AdditionalProperties"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AdditionalProperties); err != nil {
			return err
		}
	} else {
		r.AdditionalProperties = NewUnionNullMapUnionNullObject()

		r.AdditionalProperties = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AllDaysPerMonth"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AllDaysPerMonth); err != nil {
			return err
		}
	} else {
		r.AllDaysPerMonth = NewUnionNullBool()

		r.AllDaysPerMonth = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Basis"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Basis); err != nil {
			return err
		}
	} else {
		r.Basis = NewUnionNullString()

		r.Basis = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DaysPerMonth"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DaysPerMonth); err != nil {
			return err
		}
	} else {
		r.DaysPerMonth = NewUnionNullInt()

		r.DaysPerMonth = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaxhoursPerDay"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaxhoursPerDay); err != nil {
			return err
		}
	} else {
		r.MaxhoursPerDay = NewUnionNullInt()

		r.MaxhoursPerDay = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaxhoursPerMonth"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaxhoursPerMonth); err != nil {
			return err
		}
	} else {
		r.MaxhoursPerMonth = NewUnionNullInt()

		r.MaxhoursPerMonth = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Months"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Months); err != nil {
			return err
		}
	} else {
		r.Months = NewUnionNullInt()

		r.Months = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MonthsOffset"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MonthsOffset); err != nil {
			return err
		}
	} else {
		r.MonthsOffset = NewUnionNullInt()

		r.MonthsOffset = nil
	}
	return nil
}
