// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type FixedPriceLevel struct {
	Currency *UnionNullString `json:"Currency"`

	Id *UnionNullString `json:"Id"`

	LevelInfo *UnionNullString `json:"LevelInfo"`

	MonetaryUnitOfMeasure *UnionNullString `json:"MonetaryUnitOfMeasure"`

	MonthlyFixedExTaxes float64 `json:"MonthlyFixedExTaxes"`

	MonthlyUnitOfMeasure *UnionNullString `json:"MonthlyUnitOfMeasure"`

	NextIdDown *UnionNullString `json:"NextIdDown"`

	NextIdUp *UnionNullString `json:"NextIdUp"`

	ValueMax *UnionNullDouble `json:"ValueMax"`

	ValueMin *UnionNullDouble `json:"ValueMin"`

	ValueUnitOfMeasure *UnionNullString `json:"ValueUnitOfMeasure"`
}

const FixedPriceLevelAvroCRC64Fingerprint = "\xe4ÎŠI\x15\xa0\xef\xdd"

func NewFixedPriceLevel() FixedPriceLevel {
	r := FixedPriceLevel{}
	r.Currency = nil
	r.Id = nil
	r.LevelInfo = nil
	r.MonetaryUnitOfMeasure = nil
	r.MonthlyUnitOfMeasure = nil
	r.NextIdDown = nil
	r.NextIdUp = nil
	r.ValueMax = nil
	r.ValueMin = nil
	r.ValueUnitOfMeasure = nil
	return r
}

func DeserializeFixedPriceLevel(r io.Reader) (FixedPriceLevel, error) {
	t := NewFixedPriceLevel()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFixedPriceLevelFromSchema(r io.Reader, schema string) (FixedPriceLevel, error) {
	t := NewFixedPriceLevel()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFixedPriceLevel(r FixedPriceLevel, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Currency, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LevelInfo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MonetaryUnitOfMeasure, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.MonthlyFixedExTaxes, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MonthlyUnitOfMeasure, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NextIdDown, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NextIdUp, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.ValueMax, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.ValueMin, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ValueUnitOfMeasure, w)
	if err != nil {
		return err
	}
	return err
}

func (r FixedPriceLevel) Serialize(w io.Writer) error {
	return writeFixedPriceLevel(r, w)
}

func (r FixedPriceLevel) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Currency\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LevelInfo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MonetaryUnitOfMeasure\",\"type\":[\"null\",\"string\"]},{\"name\":\"MonthlyFixedExTaxes\",\"type\":\"double\"},{\"default\":null,\"name\":\"MonthlyUnitOfMeasure\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NextIdDown\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NextIdUp\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValueMax\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ValueMin\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ValueUnitOfMeasure\",\"type\":[\"null\",\"string\"]}],\"name\":\"GridTariff.Events.V1.FixedPriceLevel\",\"type\":\"record\"}"
}

func (r FixedPriceLevel) SchemaName() string {
	return "GridTariff.Events.V1.FixedPriceLevel"
}

func (_ FixedPriceLevel) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ FixedPriceLevel) SetInt(v int32)       { panic("Unsupported operation") }
func (_ FixedPriceLevel) SetLong(v int64)      { panic("Unsupported operation") }
func (_ FixedPriceLevel) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ FixedPriceLevel) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ FixedPriceLevel) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ FixedPriceLevel) SetString(v string)   { panic("Unsupported operation") }
func (_ FixedPriceLevel) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FixedPriceLevel) Get(i int) types.Field {
	switch i {
	case 0:
		r.Currency = NewUnionNullString()

		return r.Currency
	case 1:
		r.Id = NewUnionNullString()

		return r.Id
	case 2:
		r.LevelInfo = NewUnionNullString()

		return r.LevelInfo
	case 3:
		r.MonetaryUnitOfMeasure = NewUnionNullString()

		return r.MonetaryUnitOfMeasure
	case 4:
		w := types.Double{Target: &r.MonthlyFixedExTaxes}

		return w

	case 5:
		r.MonthlyUnitOfMeasure = NewUnionNullString()

		return r.MonthlyUnitOfMeasure
	case 6:
		r.NextIdDown = NewUnionNullString()

		return r.NextIdDown
	case 7:
		r.NextIdUp = NewUnionNullString()

		return r.NextIdUp
	case 8:
		r.ValueMax = NewUnionNullDouble()

		return r.ValueMax
	case 9:
		r.ValueMin = NewUnionNullDouble()

		return r.ValueMin
	case 10:
		r.ValueUnitOfMeasure = NewUnionNullString()

		return r.ValueUnitOfMeasure
	}
	panic("Unknown field index")
}

func (r *FixedPriceLevel) SetDefault(i int) {
	switch i {
	case 0:
		r.Currency = nil
		return
	case 1:
		r.Id = nil
		return
	case 2:
		r.LevelInfo = nil
		return
	case 3:
		r.MonetaryUnitOfMeasure = nil
		return
	case 5:
		r.MonthlyUnitOfMeasure = nil
		return
	case 6:
		r.NextIdDown = nil
		return
	case 7:
		r.NextIdUp = nil
		return
	case 8:
		r.ValueMax = nil
		return
	case 9:
		r.ValueMin = nil
		return
	case 10:
		r.ValueUnitOfMeasure = nil
		return
	}
	panic("Unknown field index")
}

func (r *FixedPriceLevel) NullField(i int) {
	switch i {
	case 0:
		r.Currency = nil
		return
	case 1:
		r.Id = nil
		return
	case 2:
		r.LevelInfo = nil
		return
	case 3:
		r.MonetaryUnitOfMeasure = nil
		return
	case 5:
		r.MonthlyUnitOfMeasure = nil
		return
	case 6:
		r.NextIdDown = nil
		return
	case 7:
		r.NextIdUp = nil
		return
	case 8:
		r.ValueMax = nil
		return
	case 9:
		r.ValueMin = nil
		return
	case 10:
		r.ValueUnitOfMeasure = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ FixedPriceLevel) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ FixedPriceLevel) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ FixedPriceLevel) HintSize(int)                     { panic("Unsupported operation") }
func (_ FixedPriceLevel) Finalize()                        {}

func (_ FixedPriceLevel) AvroCRC64Fingerprint() []byte {
	return []byte(FixedPriceLevelAvroCRC64Fingerprint)
}

func (r FixedPriceLevel) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Currency"], err = json.Marshal(r.Currency)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["LevelInfo"], err = json.Marshal(r.LevelInfo)
	if err != nil {
		return nil, err
	}
	output["MonetaryUnitOfMeasure"], err = json.Marshal(r.MonetaryUnitOfMeasure)
	if err != nil {
		return nil, err
	}
	output["MonthlyFixedExTaxes"], err = json.Marshal(r.MonthlyFixedExTaxes)
	if err != nil {
		return nil, err
	}
	output["MonthlyUnitOfMeasure"], err = json.Marshal(r.MonthlyUnitOfMeasure)
	if err != nil {
		return nil, err
	}
	output["NextIdDown"], err = json.Marshal(r.NextIdDown)
	if err != nil {
		return nil, err
	}
	output["NextIdUp"], err = json.Marshal(r.NextIdUp)
	if err != nil {
		return nil, err
	}
	output["ValueMax"], err = json.Marshal(r.ValueMax)
	if err != nil {
		return nil, err
	}
	output["ValueMin"], err = json.Marshal(r.ValueMin)
	if err != nil {
		return nil, err
	}
	output["ValueUnitOfMeasure"], err = json.Marshal(r.ValueUnitOfMeasure)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *FixedPriceLevel) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Currency"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Currency); err != nil {
			return err
		}
	} else {
		r.Currency = NewUnionNullString()

		r.Currency = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LevelInfo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LevelInfo); err != nil {
			return err
		}
	} else {
		r.LevelInfo = NewUnionNullString()

		r.LevelInfo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MonetaryUnitOfMeasure"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MonetaryUnitOfMeasure); err != nil {
			return err
		}
	} else {
		r.MonetaryUnitOfMeasure = NewUnionNullString()

		r.MonetaryUnitOfMeasure = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MonthlyFixedExTaxes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MonthlyFixedExTaxes); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MonthlyFixedExTaxes")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MonthlyUnitOfMeasure"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MonthlyUnitOfMeasure); err != nil {
			return err
		}
	} else {
		r.MonthlyUnitOfMeasure = NewUnionNullString()

		r.MonthlyUnitOfMeasure = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NextIdDown"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NextIdDown); err != nil {
			return err
		}
	} else {
		r.NextIdDown = NewUnionNullString()

		r.NextIdDown = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NextIdUp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NextIdUp); err != nil {
			return err
		}
	} else {
		r.NextIdUp = NewUnionNullString()

		r.NextIdUp = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValueMax"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValueMax); err != nil {
			return err
		}
	} else {
		r.ValueMax = NewUnionNullDouble()

		r.ValueMax = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValueMin"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValueMin); err != nil {
			return err
		}
	} else {
		r.ValueMin = NewUnionNullDouble()

		r.ValueMin = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValueUnitOfMeasure"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValueUnitOfMeasure); err != nil {
			return err
		}
	} else {
		r.ValueUnitOfMeasure = NewUnionNullString()

		r.ValueUnitOfMeasure = nil
	}
	return nil
}
