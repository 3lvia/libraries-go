// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PowerPriceConfiguration struct {
	AdditionalProperties *UnionNullMapUnionNullObject `json:"AdditionalProperties"`

	PowerFactorPercentage *UnionNullDouble `json:"PowerFactorPercentage"`

	ReactivePowerPricing *UnionNullBool `json:"ReactivePowerPricing"`
}

const PowerPriceConfigurationAvroCRC64Fingerprint = "\xd8iIS\x130sS"

func NewPowerPriceConfiguration() PowerPriceConfiguration {
	r := PowerPriceConfiguration{}
	r.AdditionalProperties = nil
	r.PowerFactorPercentage = nil
	r.ReactivePowerPricing = nil
	return r
}

func DeserializePowerPriceConfiguration(r io.Reader) (PowerPriceConfiguration, error) {
	t := NewPowerPriceConfiguration()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePowerPriceConfigurationFromSchema(r io.Reader, schema string) (PowerPriceConfiguration, error) {
	t := NewPowerPriceConfiguration()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePowerPriceConfiguration(r PowerPriceConfiguration, w io.Writer) error {
	var err error
	err = writeUnionNullMapUnionNullObject(r.AdditionalProperties, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.PowerFactorPercentage, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.ReactivePowerPricing, w)
	if err != nil {
		return err
	}
	return err
}

func (r PowerPriceConfiguration) Serialize(w io.Writer) error {
	return writePowerPriceConfiguration(r, w)
}

func (r PowerPriceConfiguration) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"AdditionalProperties\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",{\"fields\":[],\"name\":\"Object\",\"namespace\":\"System\",\"type\":\"record\"}]}]},{\"default\":null,\"name\":\"PowerFactorPercentage\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ReactivePowerPricing\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"GridTariff.Events.V1.PowerPriceConfiguration\",\"type\":\"record\"}"
}

func (r PowerPriceConfiguration) SchemaName() string {
	return "GridTariff.Events.V1.PowerPriceConfiguration"
}

func (_ PowerPriceConfiguration) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PowerPriceConfiguration) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PowerPriceConfiguration) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PowerPriceConfiguration) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PowerPriceConfiguration) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PowerPriceConfiguration) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PowerPriceConfiguration) SetString(v string)   { panic("Unsupported operation") }
func (_ PowerPriceConfiguration) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PowerPriceConfiguration) Get(i int) types.Field {
	switch i {
	case 0:
		r.AdditionalProperties = NewUnionNullMapUnionNullObject()

		return r.AdditionalProperties
	case 1:
		r.PowerFactorPercentage = NewUnionNullDouble()

		return r.PowerFactorPercentage
	case 2:
		r.ReactivePowerPricing = NewUnionNullBool()

		return r.ReactivePowerPricing
	}
	panic("Unknown field index")
}

func (r *PowerPriceConfiguration) SetDefault(i int) {
	switch i {
	case 0:
		r.AdditionalProperties = nil
		return
	case 1:
		r.PowerFactorPercentage = nil
		return
	case 2:
		r.ReactivePowerPricing = nil
		return
	}
	panic("Unknown field index")
}

func (r *PowerPriceConfiguration) NullField(i int) {
	switch i {
	case 0:
		r.AdditionalProperties = nil
		return
	case 1:
		r.PowerFactorPercentage = nil
		return
	case 2:
		r.ReactivePowerPricing = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ PowerPriceConfiguration) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PowerPriceConfiguration) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PowerPriceConfiguration) HintSize(int)                     { panic("Unsupported operation") }
func (_ PowerPriceConfiguration) Finalize()                        {}

func (_ PowerPriceConfiguration) AvroCRC64Fingerprint() []byte {
	return []byte(PowerPriceConfigurationAvroCRC64Fingerprint)
}

func (r PowerPriceConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AdditionalProperties"], err = json.Marshal(r.AdditionalProperties)
	if err != nil {
		return nil, err
	}
	output["PowerFactorPercentage"], err = json.Marshal(r.PowerFactorPercentage)
	if err != nil {
		return nil, err
	}
	output["ReactivePowerPricing"], err = json.Marshal(r.ReactivePowerPricing)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PowerPriceConfiguration) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AdditionalProperties"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AdditionalProperties); err != nil {
			return err
		}
	} else {
		r.AdditionalProperties = NewUnionNullMapUnionNullObject()

		r.AdditionalProperties = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PowerFactorPercentage"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PowerFactorPercentage); err != nil {
			return err
		}
	} else {
		r.PowerFactorPercentage = NewUnionNullDouble()

		r.PowerFactorPercentage = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReactivePowerPricing"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReactivePowerPricing); err != nil {
			return err
		}
	} else {
		r.ReactivePowerPricing = NewUnionNullBool()

		r.ReactivePowerPricing = nil
	}
	return nil
}
