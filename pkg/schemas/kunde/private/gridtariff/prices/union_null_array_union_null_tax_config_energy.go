// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayUnionNullTaxConfigEnergyTypeEnum int

const (
	UnionNullArrayUnionNullTaxConfigEnergyTypeEnumArrayUnionNullTaxConfigEnergy UnionNullArrayUnionNullTaxConfigEnergyTypeEnum = 1
)

type UnionNullArrayUnionNullTaxConfigEnergy struct {
	Null                          *types.NullVal
	ArrayUnionNullTaxConfigEnergy []*UnionNullTaxConfigEnergy
	UnionType                     UnionNullArrayUnionNullTaxConfigEnergyTypeEnum
}

func writeUnionNullArrayUnionNullTaxConfigEnergy(r *UnionNullArrayUnionNullTaxConfigEnergy, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayUnionNullTaxConfigEnergyTypeEnumArrayUnionNullTaxConfigEnergy:
		return writeArrayUnionNullTaxConfigEnergy(r.ArrayUnionNullTaxConfigEnergy, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullTaxConfigEnergy")
}

func NewUnionNullArrayUnionNullTaxConfigEnergy() *UnionNullArrayUnionNullTaxConfigEnergy {
	return &UnionNullArrayUnionNullTaxConfigEnergy{}
}

func (r *UnionNullArrayUnionNullTaxConfigEnergy) Serialize(w io.Writer) error {
	return writeUnionNullArrayUnionNullTaxConfigEnergy(r, w)
}

func DeserializeUnionNullArrayUnionNullTaxConfigEnergy(r io.Reader) (*UnionNullArrayUnionNullTaxConfigEnergy, error) {
	t := NewUnionNullArrayUnionNullTaxConfigEnergy()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayUnionNullTaxConfigEnergyFromSchema(r io.Reader, schema string) (*UnionNullArrayUnionNullTaxConfigEnergy, error) {
	t := NewUnionNullArrayUnionNullTaxConfigEnergy()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayUnionNullTaxConfigEnergy) Schema() string {
	return "[\"null\",{\"items\":[\"null\",{\"fields\":[{\"name\":\"EndDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"StartDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"TaxType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxTypeDescription\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxUom\",\"type\":[\"null\",\"string\"]},{\"name\":\"TaxValue\",\"type\":\"double\"}],\"name\":\"TaxConfigEnergy\",\"type\":\"record\"}],\"type\":\"array\"}]"
}

func (_ *UnionNullArrayUnionNullTaxConfigEnergy) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayUnionNullTaxConfigEnergy) SetLong(v int64) {

	r.UnionType = (UnionNullArrayUnionNullTaxConfigEnergyTypeEnum)(v)
}

func (r *UnionNullArrayUnionNullTaxConfigEnergy) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayUnionNullTaxConfigEnergy = make([]*UnionNullTaxConfigEnergy, 0)
		return &ArrayUnionNullTaxConfigEnergyWrapper{Target: (&r.ArrayUnionNullTaxConfigEnergy)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullTaxConfigEnergy) Finalize() {}

func (r *UnionNullArrayUnionNullTaxConfigEnergy) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayUnionNullTaxConfigEnergyTypeEnumArrayUnionNullTaxConfigEnergy:
		return json.Marshal(map[string]interface{}{"array": r.ArrayUnionNullTaxConfigEnergy})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayUnionNullTaxConfigEnergy")
}

func (r *UnionNullArrayUnionNullTaxConfigEnergy) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayUnionNullTaxConfigEnergy)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullTaxConfigEnergy")
}
