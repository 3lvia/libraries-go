// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Taxes struct {
	EnergyPriceTaxes *UnionNullArrayUnionNullTaxConfigEnergy `json:"EnergyPriceTaxes"`

	FixedPriceTaxes *UnionNullArrayUnionNullTaxConfigFixed `json:"FixedPriceTaxes"`

	PowerPriceTaxes *UnionNullArrayUnionNullTaxConfigPower `json:"PowerPriceTaxes"`
}

const TaxesAvroCRC64Fingerprint = "\xd5\xe4V\x92\xce\xf1\x12\xf8"

func NewTaxes() Taxes {
	r := Taxes{}
	r.EnergyPriceTaxes = nil
	r.FixedPriceTaxes = nil
	r.PowerPriceTaxes = nil
	return r
}

func DeserializeTaxes(r io.Reader) (Taxes, error) {
	t := NewTaxes()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTaxesFromSchema(r io.Reader, schema string) (Taxes, error) {
	t := NewTaxes()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTaxes(r Taxes, w io.Writer) error {
	var err error
	err = writeUnionNullArrayUnionNullTaxConfigEnergy(r.EnergyPriceTaxes, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullTaxConfigFixed(r.FixedPriceTaxes, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullTaxConfigPower(r.PowerPriceTaxes, w)
	if err != nil {
		return err
	}
	return err
}

func (r Taxes) Serialize(w io.Writer) error {
	return writeTaxes(r, w)
}

func (r Taxes) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"EnergyPriceTaxes\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"name\":\"EndDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"StartDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"TaxType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxTypeDescription\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxUom\",\"type\":[\"null\",\"string\"]},{\"name\":\"TaxValue\",\"type\":\"double\"}],\"name\":\"TaxConfigEnergy\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"FixedPriceTaxes\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"name\":\"EndDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"StartDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"TaxType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxTypeDescription\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxUom\",\"type\":[\"null\",\"string\"]},{\"name\":\"TaxValue\",\"type\":\"double\"}],\"name\":\"TaxConfigFixed\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"PowerPriceTaxes\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"name\":\"EndDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"StartDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"TaxType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxTypeDescription\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxUom\",\"type\":[\"null\",\"string\"]},{\"name\":\"TaxValue\",\"type\":\"double\"}],\"name\":\"TaxConfigPower\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"GridTariff.Events.V1.Taxes\",\"type\":\"record\"}"
}

func (r Taxes) SchemaName() string {
	return "GridTariff.Events.V1.Taxes"
}

func (_ Taxes) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Taxes) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Taxes) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Taxes) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Taxes) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Taxes) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Taxes) SetString(v string)   { panic("Unsupported operation") }
func (_ Taxes) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Taxes) Get(i int) types.Field {
	switch i {
	case 0:
		r.EnergyPriceTaxes = NewUnionNullArrayUnionNullTaxConfigEnergy()

		return r.EnergyPriceTaxes
	case 1:
		r.FixedPriceTaxes = NewUnionNullArrayUnionNullTaxConfigFixed()

		return r.FixedPriceTaxes
	case 2:
		r.PowerPriceTaxes = NewUnionNullArrayUnionNullTaxConfigPower()

		return r.PowerPriceTaxes
	}
	panic("Unknown field index")
}

func (r *Taxes) SetDefault(i int) {
	switch i {
	case 0:
		r.EnergyPriceTaxes = nil
		return
	case 1:
		r.FixedPriceTaxes = nil
		return
	case 2:
		r.PowerPriceTaxes = nil
		return
	}
	panic("Unknown field index")
}

func (r *Taxes) NullField(i int) {
	switch i {
	case 0:
		r.EnergyPriceTaxes = nil
		return
	case 1:
		r.FixedPriceTaxes = nil
		return
	case 2:
		r.PowerPriceTaxes = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Taxes) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Taxes) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Taxes) HintSize(int)                     { panic("Unsupported operation") }
func (_ Taxes) Finalize()                        {}

func (_ Taxes) AvroCRC64Fingerprint() []byte {
	return []byte(TaxesAvroCRC64Fingerprint)
}

func (r Taxes) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EnergyPriceTaxes"], err = json.Marshal(r.EnergyPriceTaxes)
	if err != nil {
		return nil, err
	}
	output["FixedPriceTaxes"], err = json.Marshal(r.FixedPriceTaxes)
	if err != nil {
		return nil, err
	}
	output["PowerPriceTaxes"], err = json.Marshal(r.PowerPriceTaxes)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Taxes) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EnergyPriceTaxes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnergyPriceTaxes); err != nil {
			return err
		}
	} else {
		r.EnergyPriceTaxes = NewUnionNullArrayUnionNullTaxConfigEnergy()

		r.EnergyPriceTaxes = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FixedPriceTaxes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FixedPriceTaxes); err != nil {
			return err
		}
	} else {
		r.FixedPriceTaxes = NewUnionNullArrayUnionNullTaxConfigFixed()

		r.FixedPriceTaxes = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PowerPriceTaxes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PowerPriceTaxes); err != nil {
			return err
		}
	} else {
		r.PowerPriceTaxes = NewUnionNullArrayUnionNullTaxConfigPower()

		r.PowerPriceTaxes = nil
	}
	return nil
}
