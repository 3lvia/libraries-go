// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100242_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Company struct {
	CompanyName *UnionNullString `json:"CompanyName"`

	CompanyOrgNo *UnionNullString `json:"CompanyOrgNo"`
}

const CompanyAvroCRC64Fingerprint = "83\x9f√â\xa7\x9e\x89"

func NewCompany() Company {
	r := Company{}
	r.CompanyName = nil
	r.CompanyOrgNo = nil
	return r
}

func DeserializeCompany(r io.Reader) (Company, error) {
	t := NewCompany()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCompanyFromSchema(r io.Reader, schema string) (Company, error) {
	t := NewCompany()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCompany(r Company, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CompanyName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CompanyOrgNo, w)
	if err != nil {
		return err
	}
	return err
}

func (r Company) Serialize(w io.Writer) error {
	return writeCompany(r, w)
}

func (r Company) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CompanyName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CompanyOrgNo\",\"type\":[\"null\",\"string\"]}],\"name\":\"GridTariff.Events.V1.Company\",\"type\":\"record\"}"
}

func (r Company) SchemaName() string {
	return "GridTariff.Events.V1.Company"
}

func (_ Company) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Company) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Company) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Company) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Company) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Company) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Company) SetString(v string)   { panic("Unsupported operation") }
func (_ Company) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Company) Get(i int) types.Field {
	switch i {
	case 0:
		r.CompanyName = NewUnionNullString()

		return r.CompanyName
	case 1:
		r.CompanyOrgNo = NewUnionNullString()

		return r.CompanyOrgNo
	}
	panic("Unknown field index")
}

func (r *Company) SetDefault(i int) {
	switch i {
	case 0:
		r.CompanyName = nil
		return
	case 1:
		r.CompanyOrgNo = nil
		return
	}
	panic("Unknown field index")
}

func (r *Company) NullField(i int) {
	switch i {
	case 0:
		r.CompanyName = nil
		return
	case 1:
		r.CompanyOrgNo = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Company) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Company) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Company) HintSize(int)                     { panic("Unsupported operation") }
func (_ Company) Finalize()                        {}

func (_ Company) AvroCRC64Fingerprint() []byte {
	return []byte(CompanyAvroCRC64Fingerprint)
}

func (r Company) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CompanyName"], err = json.Marshal(r.CompanyName)
	if err != nil {
		return nil, err
	}
	output["CompanyOrgNo"], err = json.Marshal(r.CompanyOrgNo)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Company) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CompanyName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CompanyName); err != nil {
			return err
		}
	} else {
		r.CompanyName = NewUnionNullString()

		r.CompanyName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CompanyOrgNo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CompanyOrgNo); err != nil {
			return err
		}
	} else {
		r.CompanyOrgNo = NewUnionNullString()

		r.CompanyOrgNo = nil
	}
	return nil
}
