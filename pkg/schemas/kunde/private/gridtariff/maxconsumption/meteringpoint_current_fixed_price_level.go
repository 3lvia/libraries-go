// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100244_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MeteringpointCurrentFixedPriceLevel struct {
	CompanyOrgNo *UnionNullString `json:"CompanyOrgNo"`

	ExpiredAtDate int64 `json:"ExpiredAtDate"`

	LastUpdated int64 `json:"LastUpdated"`

	LevelRoundedValue *UnionNullDouble `json:"LevelRoundedValue"`

	MeteringPointId *UnionNullString `json:"MeteringPointId"`
}

const MeteringpointCurrentFixedPriceLevelAvroCRC64Fingerprint = "c\x18\xb6\x1b\xa7Si\x82"

func NewMeteringpointCurrentFixedPriceLevel() MeteringpointCurrentFixedPriceLevel {
	r := MeteringpointCurrentFixedPriceLevel{}
	r.CompanyOrgNo = nil
	r.LevelRoundedValue = nil
	r.MeteringPointId = nil
	return r
}

func DeserializeMeteringpointCurrentFixedPriceLevel(r io.Reader) (MeteringpointCurrentFixedPriceLevel, error) {
	t := NewMeteringpointCurrentFixedPriceLevel()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMeteringpointCurrentFixedPriceLevelFromSchema(r io.Reader, schema string) (MeteringpointCurrentFixedPriceLevel, error) {
	t := NewMeteringpointCurrentFixedPriceLevel()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMeteringpointCurrentFixedPriceLevel(r MeteringpointCurrentFixedPriceLevel, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CompanyOrgNo, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.ExpiredAtDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.LastUpdated, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.LevelRoundedValue, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MeteringPointId, w)
	if err != nil {
		return err
	}
	return err
}

func (r MeteringpointCurrentFixedPriceLevel) Serialize(w io.Writer) error {
	return writeMeteringpointCurrentFixedPriceLevel(r, w)
}

func (r MeteringpointCurrentFixedPriceLevel) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CompanyOrgNo\",\"type\":[\"null\",\"string\"]},{\"name\":\"ExpiredAtDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"LastUpdated\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"LevelRoundedValue\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"MeteringPointId\",\"type\":[\"null\",\"string\"]}],\"name\":\"GridTariff.Events.V1.MeteringpointCurrentFixedPriceLevel\",\"type\":\"record\"}"
}

func (r MeteringpointCurrentFixedPriceLevel) SchemaName() string {
	return "GridTariff.Events.V1.MeteringpointCurrentFixedPriceLevel"
}

func (_ MeteringpointCurrentFixedPriceLevel) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MeteringpointCurrentFixedPriceLevel) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MeteringpointCurrentFixedPriceLevel) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MeteringpointCurrentFixedPriceLevel) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MeteringpointCurrentFixedPriceLevel) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MeteringpointCurrentFixedPriceLevel) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MeteringpointCurrentFixedPriceLevel) SetString(v string)   { panic("Unsupported operation") }
func (_ MeteringpointCurrentFixedPriceLevel) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MeteringpointCurrentFixedPriceLevel) Get(i int) types.Field {
	switch i {
	case 0:
		r.CompanyOrgNo = NewUnionNullString()

		return r.CompanyOrgNo
	case 1:
		w := types.Long{Target: &r.ExpiredAtDate}

		return w

	case 2:
		w := types.Long{Target: &r.LastUpdated}

		return w

	case 3:
		r.LevelRoundedValue = NewUnionNullDouble()

		return r.LevelRoundedValue
	case 4:
		r.MeteringPointId = NewUnionNullString()

		return r.MeteringPointId
	}
	panic("Unknown field index")
}

func (r *MeteringpointCurrentFixedPriceLevel) SetDefault(i int) {
	switch i {
	case 0:
		r.CompanyOrgNo = nil
		return
	case 3:
		r.LevelRoundedValue = nil
		return
	case 4:
		r.MeteringPointId = nil
		return
	}
	panic("Unknown field index")
}

func (r *MeteringpointCurrentFixedPriceLevel) NullField(i int) {
	switch i {
	case 0:
		r.CompanyOrgNo = nil
		return
	case 3:
		r.LevelRoundedValue = nil
		return
	case 4:
		r.MeteringPointId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ MeteringpointCurrentFixedPriceLevel) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ MeteringpointCurrentFixedPriceLevel) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ MeteringpointCurrentFixedPriceLevel) HintSize(int) { panic("Unsupported operation") }
func (_ MeteringpointCurrentFixedPriceLevel) Finalize()    {}

func (_ MeteringpointCurrentFixedPriceLevel) AvroCRC64Fingerprint() []byte {
	return []byte(MeteringpointCurrentFixedPriceLevelAvroCRC64Fingerprint)
}

func (r MeteringpointCurrentFixedPriceLevel) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CompanyOrgNo"], err = json.Marshal(r.CompanyOrgNo)
	if err != nil {
		return nil, err
	}
	output["ExpiredAtDate"], err = json.Marshal(r.ExpiredAtDate)
	if err != nil {
		return nil, err
	}
	output["LastUpdated"], err = json.Marshal(r.LastUpdated)
	if err != nil {
		return nil, err
	}
	output["LevelRoundedValue"], err = json.Marshal(r.LevelRoundedValue)
	if err != nil {
		return nil, err
	}
	output["MeteringPointId"], err = json.Marshal(r.MeteringPointId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MeteringpointCurrentFixedPriceLevel) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CompanyOrgNo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CompanyOrgNo); err != nil {
			return err
		}
	} else {
		r.CompanyOrgNo = NewUnionNullString()

		r.CompanyOrgNo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ExpiredAtDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExpiredAtDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ExpiredAtDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastUpdated"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastUpdated); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for LastUpdated")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LevelRoundedValue"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LevelRoundedValue); err != nil {
			return err
		}
	} else {
		r.LevelRoundedValue = NewUnionNullDouble()

		r.LevelRoundedValue = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeteringPointId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeteringPointId); err != nil {
			return err
		}
	} else {
		r.MeteringPointId = NewUnionNullString()

		r.MeteringPointId = nil
	}
	return nil
}
