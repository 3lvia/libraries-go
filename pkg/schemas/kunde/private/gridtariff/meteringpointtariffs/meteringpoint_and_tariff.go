// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100285_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MeteringpointAndTariff struct {
	CompanyOrgNo *UnionNullString `json:"CompanyOrgNo"`

	ConnectionDate int64 `json:"ConnectionDate"`

	MeteringPointId *UnionNullString `json:"MeteringPointId"`

	Product *UnionNullString `json:"Product"`

	TariffKey *UnionNullString `json:"TariffKey"`
}

const MeteringpointAndTariffAvroCRC64Fingerprint = "ﬁù\xefl'\xca\xf2n"

func NewMeteringpointAndTariff() MeteringpointAndTariff {
	r := MeteringpointAndTariff{}
	r.CompanyOrgNo = nil
	r.MeteringPointId = nil
	r.Product = nil
	r.TariffKey = nil
	return r
}

func DeserializeMeteringpointAndTariff(r io.Reader) (MeteringpointAndTariff, error) {
	t := NewMeteringpointAndTariff()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMeteringpointAndTariffFromSchema(r io.Reader, schema string) (MeteringpointAndTariff, error) {
	t := NewMeteringpointAndTariff()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMeteringpointAndTariff(r MeteringpointAndTariff, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CompanyOrgNo, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.ConnectionDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MeteringPointId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Product, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TariffKey, w)
	if err != nil {
		return err
	}
	return err
}

func (r MeteringpointAndTariff) Serialize(w io.Writer) error {
	return writeMeteringpointAndTariff(r, w)
}

func (r MeteringpointAndTariff) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CompanyOrgNo\",\"type\":[\"null\",\"string\"]},{\"name\":\"ConnectionDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"MeteringPointId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Product\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TariffKey\",\"type\":[\"null\",\"string\"]}],\"name\":\"GridTariff.Events.V1.MeteringpointAndTariff\",\"type\":\"record\"}"
}

func (r MeteringpointAndTariff) SchemaName() string {
	return "GridTariff.Events.V1.MeteringpointAndTariff"
}

func (_ MeteringpointAndTariff) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MeteringpointAndTariff) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MeteringpointAndTariff) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MeteringpointAndTariff) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MeteringpointAndTariff) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MeteringpointAndTariff) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MeteringpointAndTariff) SetString(v string)   { panic("Unsupported operation") }
func (_ MeteringpointAndTariff) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MeteringpointAndTariff) Get(i int) types.Field {
	switch i {
	case 0:
		r.CompanyOrgNo = NewUnionNullString()

		return r.CompanyOrgNo
	case 1:
		w := types.Long{Target: &r.ConnectionDate}

		return w

	case 2:
		r.MeteringPointId = NewUnionNullString()

		return r.MeteringPointId
	case 3:
		r.Product = NewUnionNullString()

		return r.Product
	case 4:
		r.TariffKey = NewUnionNullString()

		return r.TariffKey
	}
	panic("Unknown field index")
}

func (r *MeteringpointAndTariff) SetDefault(i int) {
	switch i {
	case 0:
		r.CompanyOrgNo = nil
		return
	case 2:
		r.MeteringPointId = nil
		return
	case 3:
		r.Product = nil
		return
	case 4:
		r.TariffKey = nil
		return
	}
	panic("Unknown field index")
}

func (r *MeteringpointAndTariff) NullField(i int) {
	switch i {
	case 0:
		r.CompanyOrgNo = nil
		return
	case 2:
		r.MeteringPointId = nil
		return
	case 3:
		r.Product = nil
		return
	case 4:
		r.TariffKey = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ MeteringpointAndTariff) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MeteringpointAndTariff) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MeteringpointAndTariff) HintSize(int)                     { panic("Unsupported operation") }
func (_ MeteringpointAndTariff) Finalize()                        {}

func (_ MeteringpointAndTariff) AvroCRC64Fingerprint() []byte {
	return []byte(MeteringpointAndTariffAvroCRC64Fingerprint)
}

func (r MeteringpointAndTariff) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CompanyOrgNo"], err = json.Marshal(r.CompanyOrgNo)
	if err != nil {
		return nil, err
	}
	output["ConnectionDate"], err = json.Marshal(r.ConnectionDate)
	if err != nil {
		return nil, err
	}
	output["MeteringPointId"], err = json.Marshal(r.MeteringPointId)
	if err != nil {
		return nil, err
	}
	output["Product"], err = json.Marshal(r.Product)
	if err != nil {
		return nil, err
	}
	output["TariffKey"], err = json.Marshal(r.TariffKey)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MeteringpointAndTariff) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CompanyOrgNo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CompanyOrgNo); err != nil {
			return err
		}
	} else {
		r.CompanyOrgNo = NewUnionNullString()

		r.CompanyOrgNo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ConnectionDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConnectionDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ConnectionDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeteringPointId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeteringPointId); err != nil {
			return err
		}
	} else {
		r.MeteringPointId = NewUnionNullString()

		r.MeteringPointId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Product"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Product); err != nil {
			return err
		}
	} else {
		r.Product = NewUnionNullString()

		r.Product = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TariffKey"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TariffKey); err != nil {
			return err
		}
	} else {
		r.TariffKey = NewUnionNullString()

		r.TariffKey = nil
	}
	return nil
}
