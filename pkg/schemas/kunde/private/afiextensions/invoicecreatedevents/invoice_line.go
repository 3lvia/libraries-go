// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100396_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type InvoiceLine struct {
	Amount *UnionNullMoney `json:"Amount"`

	Consumption *UnionNullDouble `json:"Consumption"`

	Description *UnionNullString `json:"Description"`

	FromDate *UnionNullString `json:"FromDate"`

	GroupingAddress *UnionNullString `json:"GroupingAddress"`

	LineNo *UnionNullInt `json:"LineNo"`

	NetAmount *UnionNullMoney `json:"NetAmount"`

	OperatingUnitId *UnionNullString `json:"OperatingUnitId"`

	PriceCode *UnionNullString `json:"PriceCode"`

	PricePerUnit *UnionNullMoney `json:"PricePerUnit"`

	ProductId *UnionNullString `json:"ProductId"`

	ProductType *UnionNullString `json:"ProductType"`

	SalesOrderSerialNo *UnionNullInt `json:"SalesOrderSerialNo"`

	SystemStatisticalCode *UnionNullString `json:"SystemStatisticalCode"`

	ToDate *UnionNullString `json:"ToDate"`

	Type *UnionNullString `json:"Type"`

	Units *UnionNullString `json:"Units"`

	VatAmount *UnionNullMoney `json:"VatAmount"`

	VatRate *UnionNullBytes `json:"VatRate"`
}

const InvoiceLineAvroCRC64Fingerprint = "M+\xdcg\x83X\xfb\xc7"

func NewInvoiceLine() InvoiceLine {
	r := InvoiceLine{}
	r.Amount = nil
	r.Consumption = nil
	r.Description = nil
	r.FromDate = nil
	r.GroupingAddress = nil
	r.LineNo = nil
	r.NetAmount = nil
	r.OperatingUnitId = nil
	r.PriceCode = nil
	r.PricePerUnit = nil
	r.ProductId = nil
	r.ProductType = nil
	r.SalesOrderSerialNo = nil
	r.SystemStatisticalCode = nil
	r.ToDate = nil
	r.Type = nil
	r.Units = nil
	r.VatAmount = nil
	r.VatRate = nil
	return r
}

func DeserializeInvoiceLine(r io.Reader) (InvoiceLine, error) {
	t := NewInvoiceLine()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInvoiceLineFromSchema(r io.Reader, schema string) (InvoiceLine, error) {
	t := NewInvoiceLine()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInvoiceLine(r InvoiceLine, w io.Writer) error {
	var err error
	err = writeUnionNullMoney(r.Amount, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Consumption, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FromDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GroupingAddress, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.LineNo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMoney(r.NetAmount, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OperatingUnitId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PriceCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMoney(r.PricePerUnit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ProductId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ProductType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.SalesOrderSerialNo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SystemStatisticalCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ToDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Type, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Units, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMoney(r.VatAmount, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBytes(r.VatRate, w)
	if err != nil {
		return err
	}
	return err
}

func (r InvoiceLine) Serialize(w io.Writer) error {
	return writeInvoiceLine(r, w)
}

func (r InvoiceLine) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Amount\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Amount\",\"type\":{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}},{\"default\":null,\"name\":\"CurrencyCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"Money\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Consumption\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FromDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GroupingAddress\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LineNo\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"NetAmount\",\"type\":[\"null\",\"Afiextensions.Schemas.InvoiceCreatedEvents.V1.Money\"]},{\"default\":null,\"name\":\"OperatingUnitId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PriceCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PricePerUnit\",\"type\":[\"null\",\"Afiextensions.Schemas.InvoiceCreatedEvents.V1.Money\"]},{\"default\":null,\"name\":\"ProductId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ProductType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SalesOrderSerialNo\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"SystemStatisticalCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ToDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Type\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Units\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VatAmount\",\"type\":[\"null\",\"Afiextensions.Schemas.InvoiceCreatedEvents.V1.Money\"]},{\"default\":null,\"name\":\"VatRate\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]}],\"name\":\"Afiextensions.Schemas.InvoiceCreatedEvents.V1.InvoiceLine\",\"type\":\"record\"}"
}

func (r InvoiceLine) SchemaName() string {
	return "Afiextensions.Schemas.InvoiceCreatedEvents.V1.InvoiceLine"
}

func (_ InvoiceLine) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ InvoiceLine) SetInt(v int32)       { panic("Unsupported operation") }
func (_ InvoiceLine) SetLong(v int64)      { panic("Unsupported operation") }
func (_ InvoiceLine) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ InvoiceLine) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ InvoiceLine) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ InvoiceLine) SetString(v string)   { panic("Unsupported operation") }
func (_ InvoiceLine) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *InvoiceLine) Get(i int) types.Field {
	switch i {
	case 0:
		r.Amount = NewUnionNullMoney()

		return r.Amount
	case 1:
		r.Consumption = NewUnionNullDouble()

		return r.Consumption
	case 2:
		r.Description = NewUnionNullString()

		return r.Description
	case 3:
		r.FromDate = NewUnionNullString()

		return r.FromDate
	case 4:
		r.GroupingAddress = NewUnionNullString()

		return r.GroupingAddress
	case 5:
		r.LineNo = NewUnionNullInt()

		return r.LineNo
	case 6:
		r.NetAmount = NewUnionNullMoney()

		return r.NetAmount
	case 7:
		r.OperatingUnitId = NewUnionNullString()

		return r.OperatingUnitId
	case 8:
		r.PriceCode = NewUnionNullString()

		return r.PriceCode
	case 9:
		r.PricePerUnit = NewUnionNullMoney()

		return r.PricePerUnit
	case 10:
		r.ProductId = NewUnionNullString()

		return r.ProductId
	case 11:
		r.ProductType = NewUnionNullString()

		return r.ProductType
	case 12:
		r.SalesOrderSerialNo = NewUnionNullInt()

		return r.SalesOrderSerialNo
	case 13:
		r.SystemStatisticalCode = NewUnionNullString()

		return r.SystemStatisticalCode
	case 14:
		r.ToDate = NewUnionNullString()

		return r.ToDate
	case 15:
		r.Type = NewUnionNullString()

		return r.Type
	case 16:
		r.Units = NewUnionNullString()

		return r.Units
	case 17:
		r.VatAmount = NewUnionNullMoney()

		return r.VatAmount
	case 18:
		r.VatRate = NewUnionNullBytes()

		return r.VatRate
	}
	panic("Unknown field index")
}

func (r *InvoiceLine) SetDefault(i int) {
	switch i {
	case 0:
		r.Amount = nil
		return
	case 1:
		r.Consumption = nil
		return
	case 2:
		r.Description = nil
		return
	case 3:
		r.FromDate = nil
		return
	case 4:
		r.GroupingAddress = nil
		return
	case 5:
		r.LineNo = nil
		return
	case 6:
		r.NetAmount = nil
		return
	case 7:
		r.OperatingUnitId = nil
		return
	case 8:
		r.PriceCode = nil
		return
	case 9:
		r.PricePerUnit = nil
		return
	case 10:
		r.ProductId = nil
		return
	case 11:
		r.ProductType = nil
		return
	case 12:
		r.SalesOrderSerialNo = nil
		return
	case 13:
		r.SystemStatisticalCode = nil
		return
	case 14:
		r.ToDate = nil
		return
	case 15:
		r.Type = nil
		return
	case 16:
		r.Units = nil
		return
	case 17:
		r.VatAmount = nil
		return
	case 18:
		r.VatRate = nil
		return
	}
	panic("Unknown field index")
}

func (r *InvoiceLine) NullField(i int) {
	switch i {
	case 0:
		r.Amount = nil
		return
	case 1:
		r.Consumption = nil
		return
	case 2:
		r.Description = nil
		return
	case 3:
		r.FromDate = nil
		return
	case 4:
		r.GroupingAddress = nil
		return
	case 5:
		r.LineNo = nil
		return
	case 6:
		r.NetAmount = nil
		return
	case 7:
		r.OperatingUnitId = nil
		return
	case 8:
		r.PriceCode = nil
		return
	case 9:
		r.PricePerUnit = nil
		return
	case 10:
		r.ProductId = nil
		return
	case 11:
		r.ProductType = nil
		return
	case 12:
		r.SalesOrderSerialNo = nil
		return
	case 13:
		r.SystemStatisticalCode = nil
		return
	case 14:
		r.ToDate = nil
		return
	case 15:
		r.Type = nil
		return
	case 16:
		r.Units = nil
		return
	case 17:
		r.VatAmount = nil
		return
	case 18:
		r.VatRate = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ InvoiceLine) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ InvoiceLine) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ InvoiceLine) HintSize(int)                     { panic("Unsupported operation") }
func (_ InvoiceLine) Finalize()                        {}

func (_ InvoiceLine) AvroCRC64Fingerprint() []byte {
	return []byte(InvoiceLineAvroCRC64Fingerprint)
}

func (r InvoiceLine) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Amount"], err = json.Marshal(r.Amount)
	if err != nil {
		return nil, err
	}
	output["Consumption"], err = json.Marshal(r.Consumption)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["FromDate"], err = json.Marshal(r.FromDate)
	if err != nil {
		return nil, err
	}
	output["GroupingAddress"], err = json.Marshal(r.GroupingAddress)
	if err != nil {
		return nil, err
	}
	output["LineNo"], err = json.Marshal(r.LineNo)
	if err != nil {
		return nil, err
	}
	output["NetAmount"], err = json.Marshal(r.NetAmount)
	if err != nil {
		return nil, err
	}
	output["OperatingUnitId"], err = json.Marshal(r.OperatingUnitId)
	if err != nil {
		return nil, err
	}
	output["PriceCode"], err = json.Marshal(r.PriceCode)
	if err != nil {
		return nil, err
	}
	output["PricePerUnit"], err = json.Marshal(r.PricePerUnit)
	if err != nil {
		return nil, err
	}
	output["ProductId"], err = json.Marshal(r.ProductId)
	if err != nil {
		return nil, err
	}
	output["ProductType"], err = json.Marshal(r.ProductType)
	if err != nil {
		return nil, err
	}
	output["SalesOrderSerialNo"], err = json.Marshal(r.SalesOrderSerialNo)
	if err != nil {
		return nil, err
	}
	output["SystemStatisticalCode"], err = json.Marshal(r.SystemStatisticalCode)
	if err != nil {
		return nil, err
	}
	output["ToDate"], err = json.Marshal(r.ToDate)
	if err != nil {
		return nil, err
	}
	output["Type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	output["Units"], err = json.Marshal(r.Units)
	if err != nil {
		return nil, err
	}
	output["VatAmount"], err = json.Marshal(r.VatAmount)
	if err != nil {
		return nil, err
	}
	output["VatRate"], err = json.Marshal(r.VatRate)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *InvoiceLine) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Amount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Amount); err != nil {
			return err
		}
	} else {
		r.Amount = NewUnionNullMoney()

		r.Amount = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Consumption"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Consumption); err != nil {
			return err
		}
	} else {
		r.Consumption = NewUnionNullDouble()

		r.Consumption = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FromDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FromDate); err != nil {
			return err
		}
	} else {
		r.FromDate = NewUnionNullString()

		r.FromDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GroupingAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GroupingAddress); err != nil {
			return err
		}
	} else {
		r.GroupingAddress = NewUnionNullString()

		r.GroupingAddress = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LineNo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LineNo); err != nil {
			return err
		}
	} else {
		r.LineNo = NewUnionNullInt()

		r.LineNo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NetAmount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NetAmount); err != nil {
			return err
		}
	} else {
		r.NetAmount = NewUnionNullMoney()

		r.NetAmount = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OperatingUnitId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OperatingUnitId); err != nil {
			return err
		}
	} else {
		r.OperatingUnitId = NewUnionNullString()

		r.OperatingUnitId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PriceCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PriceCode); err != nil {
			return err
		}
	} else {
		r.PriceCode = NewUnionNullString()

		r.PriceCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PricePerUnit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PricePerUnit); err != nil {
			return err
		}
	} else {
		r.PricePerUnit = NewUnionNullMoney()

		r.PricePerUnit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ProductId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProductId); err != nil {
			return err
		}
	} else {
		r.ProductId = NewUnionNullString()

		r.ProductId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ProductType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProductType); err != nil {
			return err
		}
	} else {
		r.ProductType = NewUnionNullString()

		r.ProductType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SalesOrderSerialNo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SalesOrderSerialNo); err != nil {
			return err
		}
	} else {
		r.SalesOrderSerialNo = NewUnionNullInt()

		r.SalesOrderSerialNo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SystemStatisticalCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SystemStatisticalCode); err != nil {
			return err
		}
	} else {
		r.SystemStatisticalCode = NewUnionNullString()

		r.SystemStatisticalCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ToDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ToDate); err != nil {
			return err
		}
	} else {
		r.ToDate = NewUnionNullString()

		r.ToDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		r.Type = NewUnionNullString()

		r.Type = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Units"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Units); err != nil {
			return err
		}
	} else {
		r.Units = NewUnionNullString()

		r.Units = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["VatAmount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VatAmount); err != nil {
			return err
		}
	} else {
		r.VatAmount = NewUnionNullMoney()

		r.VatAmount = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["VatRate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VatRate); err != nil {
			return err
		}
	} else {
		r.VatRate = NewUnionNullBytes()

		r.VatRate = nil
	}
	return nil
}
