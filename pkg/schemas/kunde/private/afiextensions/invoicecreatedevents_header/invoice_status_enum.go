// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100397_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type InvoiceStatusEnum int32

const (
	InvoiceStatusEnumFinished      InvoiceStatusEnum = 0
	InvoiceStatusEnumUnfinished    InvoiceStatusEnum = 1
	InvoiceStatusEnumWrittenOff    InvoiceStatusEnum = 2
	InvoiceStatusEnumNotApplicable InvoiceStatusEnum = 3
)

func (e InvoiceStatusEnum) String() string {
	switch e {
	case InvoiceStatusEnumFinished:
		return "Finished"
	case InvoiceStatusEnumUnfinished:
		return "Unfinished"
	case InvoiceStatusEnumWrittenOff:
		return "WrittenOff"
	case InvoiceStatusEnumNotApplicable:
		return "NotApplicable"
	}
	return "unknown"
}

func writeInvoiceStatusEnum(r InvoiceStatusEnum, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewInvoiceStatusEnumValue(raw string) (r InvoiceStatusEnum, err error) {
	switch raw {
	case "Finished":
		return InvoiceStatusEnumFinished, nil
	case "Unfinished":
		return InvoiceStatusEnumUnfinished, nil
	case "WrittenOff":
		return InvoiceStatusEnumWrittenOff, nil
	case "NotApplicable":
		return InvoiceStatusEnumNotApplicable, nil
	}

	return -1, fmt.Errorf("invalid value for InvoiceStatusEnum: '%s'", raw)

}

func (b InvoiceStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *InvoiceStatusEnum) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewInvoiceStatusEnumValue(stringVal)
	*b = val
	return err
}

type InvoiceStatusEnumWrapper struct {
	Target *InvoiceStatusEnum
}

func (b InvoiceStatusEnumWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b InvoiceStatusEnumWrapper) SetInt(v int32) {
	*(b.Target) = InvoiceStatusEnum(v)
}

func (b InvoiceStatusEnumWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b InvoiceStatusEnumWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b InvoiceStatusEnumWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b InvoiceStatusEnumWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b InvoiceStatusEnumWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b InvoiceStatusEnumWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b InvoiceStatusEnumWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b InvoiceStatusEnumWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b InvoiceStatusEnumWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b InvoiceStatusEnumWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b InvoiceStatusEnumWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b InvoiceStatusEnumWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b InvoiceStatusEnumWrapper) Finalize() {}
