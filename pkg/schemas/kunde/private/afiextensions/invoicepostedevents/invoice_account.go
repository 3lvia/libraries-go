// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100443_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type InvoiceAccount struct {
	Account *UnionNullString `json:"Account"`

	Amount *UnionNullMoney `json:"Amount"`

	Municipality *UnionNullString `json:"Municipality"`

	OperatingUnit *UnionNullString `json:"OperatingUnit"`

	PostingCode *UnionNullInt `json:"PostingCode"`

	PriceCode *UnionNullString `json:"PriceCode"`

	ProjectNumber *UnionNullString `json:"ProjectNumber"`

	Responsibility *UnionNullString `json:"Responsibility"`

	VatCode *UnionNullString `json:"VatCode"`

	VatRate *UnionNullDouble `json:"VatRate"`
}

const InvoiceAccountAvroCRC64Fingerprint = "&4V'\x8f|\x1e\x06"

func NewInvoiceAccount() InvoiceAccount {
	r := InvoiceAccount{}
	r.Account = nil
	r.Amount = nil
	r.Municipality = nil
	r.OperatingUnit = nil
	r.PostingCode = nil
	r.PriceCode = nil
	r.ProjectNumber = nil
	r.Responsibility = nil
	r.VatCode = nil
	r.VatRate = nil
	return r
}

func DeserializeInvoiceAccount(r io.Reader) (InvoiceAccount, error) {
	t := NewInvoiceAccount()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInvoiceAccountFromSchema(r io.Reader, schema string) (InvoiceAccount, error) {
	t := NewInvoiceAccount()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInvoiceAccount(r InvoiceAccount, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Account, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMoney(r.Amount, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Municipality, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OperatingUnit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.PostingCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PriceCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ProjectNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Responsibility, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.VatCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.VatRate, w)
	if err != nil {
		return err
	}
	return err
}

func (r InvoiceAccount) Serialize(w io.Writer) error {
	return writeInvoiceAccount(r, w)
}

func (r InvoiceAccount) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Account\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Amount\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Amount\",\"type\":{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}},{\"default\":null,\"name\":\"CurrencyCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"Money\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OperatingUnit\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostingCode\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PriceCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ProjectNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Responsibility\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VatCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VatRate\",\"type\":[\"null\",\"double\"]}],\"name\":\"Afiextensions.Schemas.InvoicePostedEvents.V1.InvoiceAccount\",\"type\":\"record\"}"
}

func (r InvoiceAccount) SchemaName() string {
	return "Afiextensions.Schemas.InvoicePostedEvents.V1.InvoiceAccount"
}

func (_ InvoiceAccount) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ InvoiceAccount) SetInt(v int32)       { panic("Unsupported operation") }
func (_ InvoiceAccount) SetLong(v int64)      { panic("Unsupported operation") }
func (_ InvoiceAccount) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ InvoiceAccount) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ InvoiceAccount) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ InvoiceAccount) SetString(v string)   { panic("Unsupported operation") }
func (_ InvoiceAccount) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *InvoiceAccount) Get(i int) types.Field {
	switch i {
	case 0:
		r.Account = NewUnionNullString()

		return r.Account
	case 1:
		r.Amount = NewUnionNullMoney()

		return r.Amount
	case 2:
		r.Municipality = NewUnionNullString()

		return r.Municipality
	case 3:
		r.OperatingUnit = NewUnionNullString()

		return r.OperatingUnit
	case 4:
		r.PostingCode = NewUnionNullInt()

		return r.PostingCode
	case 5:
		r.PriceCode = NewUnionNullString()

		return r.PriceCode
	case 6:
		r.ProjectNumber = NewUnionNullString()

		return r.ProjectNumber
	case 7:
		r.Responsibility = NewUnionNullString()

		return r.Responsibility
	case 8:
		r.VatCode = NewUnionNullString()

		return r.VatCode
	case 9:
		r.VatRate = NewUnionNullDouble()

		return r.VatRate
	}
	panic("Unknown field index")
}

func (r *InvoiceAccount) SetDefault(i int) {
	switch i {
	case 0:
		r.Account = nil
		return
	case 1:
		r.Amount = nil
		return
	case 2:
		r.Municipality = nil
		return
	case 3:
		r.OperatingUnit = nil
		return
	case 4:
		r.PostingCode = nil
		return
	case 5:
		r.PriceCode = nil
		return
	case 6:
		r.ProjectNumber = nil
		return
	case 7:
		r.Responsibility = nil
		return
	case 8:
		r.VatCode = nil
		return
	case 9:
		r.VatRate = nil
		return
	}
	panic("Unknown field index")
}

func (r *InvoiceAccount) NullField(i int) {
	switch i {
	case 0:
		r.Account = nil
		return
	case 1:
		r.Amount = nil
		return
	case 2:
		r.Municipality = nil
		return
	case 3:
		r.OperatingUnit = nil
		return
	case 4:
		r.PostingCode = nil
		return
	case 5:
		r.PriceCode = nil
		return
	case 6:
		r.ProjectNumber = nil
		return
	case 7:
		r.Responsibility = nil
		return
	case 8:
		r.VatCode = nil
		return
	case 9:
		r.VatRate = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ InvoiceAccount) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ InvoiceAccount) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ InvoiceAccount) HintSize(int)                     { panic("Unsupported operation") }
func (_ InvoiceAccount) Finalize()                        {}

func (_ InvoiceAccount) AvroCRC64Fingerprint() []byte {
	return []byte(InvoiceAccountAvroCRC64Fingerprint)
}

func (r InvoiceAccount) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Account"], err = json.Marshal(r.Account)
	if err != nil {
		return nil, err
	}
	output["Amount"], err = json.Marshal(r.Amount)
	if err != nil {
		return nil, err
	}
	output["Municipality"], err = json.Marshal(r.Municipality)
	if err != nil {
		return nil, err
	}
	output["OperatingUnit"], err = json.Marshal(r.OperatingUnit)
	if err != nil {
		return nil, err
	}
	output["PostingCode"], err = json.Marshal(r.PostingCode)
	if err != nil {
		return nil, err
	}
	output["PriceCode"], err = json.Marshal(r.PriceCode)
	if err != nil {
		return nil, err
	}
	output["ProjectNumber"], err = json.Marshal(r.ProjectNumber)
	if err != nil {
		return nil, err
	}
	output["Responsibility"], err = json.Marshal(r.Responsibility)
	if err != nil {
		return nil, err
	}
	output["VatCode"], err = json.Marshal(r.VatCode)
	if err != nil {
		return nil, err
	}
	output["VatRate"], err = json.Marshal(r.VatRate)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *InvoiceAccount) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Account"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Account); err != nil {
			return err
		}
	} else {
		r.Account = NewUnionNullString()

		r.Account = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Amount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Amount); err != nil {
			return err
		}
	} else {
		r.Amount = NewUnionNullMoney()

		r.Amount = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Municipality"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Municipality); err != nil {
			return err
		}
	} else {
		r.Municipality = NewUnionNullString()

		r.Municipality = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OperatingUnit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OperatingUnit); err != nil {
			return err
		}
	} else {
		r.OperatingUnit = NewUnionNullString()

		r.OperatingUnit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PostingCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostingCode); err != nil {
			return err
		}
	} else {
		r.PostingCode = NewUnionNullInt()

		r.PostingCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PriceCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PriceCode); err != nil {
			return err
		}
	} else {
		r.PriceCode = NewUnionNullString()

		r.PriceCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ProjectNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProjectNumber); err != nil {
			return err
		}
	} else {
		r.ProjectNumber = NewUnionNullString()

		r.ProjectNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Responsibility"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Responsibility); err != nil {
			return err
		}
	} else {
		r.Responsibility = NewUnionNullString()

		r.Responsibility = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["VatCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VatCode); err != nil {
			return err
		}
	} else {
		r.VatCode = NewUnionNullString()

		r.VatCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["VatRate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VatRate); err != nil {
			return err
		}
	} else {
		r.VatRate = NewUnionNullDouble()

		r.VatRate = nil
	}
	return nil
}
