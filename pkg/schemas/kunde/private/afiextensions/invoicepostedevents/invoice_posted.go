// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100443_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type InvoicePosted struct {
	InternalPeriod *UnionNullInt `json:"InternalPeriod"`

	InvoiceAccounts *UnionNullArrayUnionNullInvoiceAccount `json:"InvoiceAccounts"`

	InvoiceNumber *UnionNullInt `json:"InvoiceNumber"`

	OrderNumber *UnionNullInt `json:"OrderNumber"`

	PostingDate *UnionNullString `json:"PostingDate"`
}

const InvoicePostedAvroCRC64Fingerprint = "\x9f\xec@\xf2n\x9b\x8eT"

func NewInvoicePosted() InvoicePosted {
	r := InvoicePosted{}
	r.InternalPeriod = nil
	r.InvoiceAccounts = nil
	r.InvoiceNumber = nil
	r.OrderNumber = nil
	r.PostingDate = nil
	return r
}

func DeserializeInvoicePosted(r io.Reader) (InvoicePosted, error) {
	t := NewInvoicePosted()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInvoicePostedFromSchema(r io.Reader, schema string) (InvoicePosted, error) {
	t := NewInvoicePosted()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInvoicePosted(r InvoicePosted, w io.Writer) error {
	var err error
	err = writeUnionNullInt(r.InternalPeriod, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullInvoiceAccount(r.InvoiceAccounts, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.InvoiceNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.OrderNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PostingDate, w)
	if err != nil {
		return err
	}
	return err
}

func (r InvoicePosted) Serialize(w io.Writer) error {
	return writeInvoicePosted(r, w)
}

func (r InvoicePosted) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"InternalPeriod\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"InvoiceAccounts\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Account\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Amount\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Amount\",\"type\":{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}},{\"default\":null,\"name\":\"CurrencyCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"Money\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OperatingUnit\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostingCode\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PriceCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ProjectNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Responsibility\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VatCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VatRate\",\"type\":[\"null\",\"double\"]}],\"name\":\"InvoiceAccount\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"InvoiceNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"OrderNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PostingDate\",\"type\":[\"null\",\"string\"]}],\"name\":\"Afiextensions.Schemas.InvoicePostedEvents.V1.InvoicePosted\",\"type\":\"record\"}"
}

func (r InvoicePosted) SchemaName() string {
	return "Afiextensions.Schemas.InvoicePostedEvents.V1.InvoicePosted"
}

func (_ InvoicePosted) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ InvoicePosted) SetInt(v int32)       { panic("Unsupported operation") }
func (_ InvoicePosted) SetLong(v int64)      { panic("Unsupported operation") }
func (_ InvoicePosted) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ InvoicePosted) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ InvoicePosted) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ InvoicePosted) SetString(v string)   { panic("Unsupported operation") }
func (_ InvoicePosted) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *InvoicePosted) Get(i int) types.Field {
	switch i {
	case 0:
		r.InternalPeriod = NewUnionNullInt()

		return r.InternalPeriod
	case 1:
		r.InvoiceAccounts = NewUnionNullArrayUnionNullInvoiceAccount()

		return r.InvoiceAccounts
	case 2:
		r.InvoiceNumber = NewUnionNullInt()

		return r.InvoiceNumber
	case 3:
		r.OrderNumber = NewUnionNullInt()

		return r.OrderNumber
	case 4:
		r.PostingDate = NewUnionNullString()

		return r.PostingDate
	}
	panic("Unknown field index")
}

func (r *InvoicePosted) SetDefault(i int) {
	switch i {
	case 0:
		r.InternalPeriod = nil
		return
	case 1:
		r.InvoiceAccounts = nil
		return
	case 2:
		r.InvoiceNumber = nil
		return
	case 3:
		r.OrderNumber = nil
		return
	case 4:
		r.PostingDate = nil
		return
	}
	panic("Unknown field index")
}

func (r *InvoicePosted) NullField(i int) {
	switch i {
	case 0:
		r.InternalPeriod = nil
		return
	case 1:
		r.InvoiceAccounts = nil
		return
	case 2:
		r.InvoiceNumber = nil
		return
	case 3:
		r.OrderNumber = nil
		return
	case 4:
		r.PostingDate = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ InvoicePosted) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ InvoicePosted) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ InvoicePosted) HintSize(int)                     { panic("Unsupported operation") }
func (_ InvoicePosted) Finalize()                        {}

func (_ InvoicePosted) AvroCRC64Fingerprint() []byte {
	return []byte(InvoicePostedAvroCRC64Fingerprint)
}

func (r InvoicePosted) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["InternalPeriod"], err = json.Marshal(r.InternalPeriod)
	if err != nil {
		return nil, err
	}
	output["InvoiceAccounts"], err = json.Marshal(r.InvoiceAccounts)
	if err != nil {
		return nil, err
	}
	output["InvoiceNumber"], err = json.Marshal(r.InvoiceNumber)
	if err != nil {
		return nil, err
	}
	output["OrderNumber"], err = json.Marshal(r.OrderNumber)
	if err != nil {
		return nil, err
	}
	output["PostingDate"], err = json.Marshal(r.PostingDate)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *InvoicePosted) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["InternalPeriod"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InternalPeriod); err != nil {
			return err
		}
	} else {
		r.InternalPeriod = NewUnionNullInt()

		r.InternalPeriod = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceAccounts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceAccounts); err != nil {
			return err
		}
	} else {
		r.InvoiceAccounts = NewUnionNullArrayUnionNullInvoiceAccount()

		r.InvoiceAccounts = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceNumber); err != nil {
			return err
		}
	} else {
		r.InvoiceNumber = NewUnionNullInt()

		r.InvoiceNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrderNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrderNumber); err != nil {
			return err
		}
	} else {
		r.OrderNumber = NewUnionNullInt()

		r.OrderNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PostingDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostingDate); err != nil {
			return err
		}
	} else {
		r.PostingDate = NewUnionNullString()

		r.PostingDate = nil
	}
	return nil
}
