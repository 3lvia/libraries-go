// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100443_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type InvoicePostedEvent struct {
	CreatedTime *UnionNullLong `json:"CreatedTime"`

	EventType *UnionNullString `json:"EventType"`

	Id *UnionNullString `json:"Id"`

	InvoicePosted *UnionNullInvoicePosted `json:"InvoicePosted"`
}

const InvoicePostedEventAvroCRC64Fingerprint = "\xe1&\xefc\xbd\xd6r\x0e"

func NewInvoicePostedEvent() InvoicePostedEvent {
	r := InvoicePostedEvent{}
	r.CreatedTime = nil
	r.EventType = nil
	r.Id = nil
	r.InvoicePosted = nil
	return r
}

func DeserializeInvoicePostedEvent(r io.Reader) (InvoicePostedEvent, error) {
	t := NewInvoicePostedEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInvoicePostedEventFromSchema(r io.Reader, schema string) (InvoicePostedEvent, error) {
	t := NewInvoicePostedEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInvoicePostedEvent(r InvoicePostedEvent, w io.Writer) error {
	var err error
	err = writeUnionNullLong(r.CreatedTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EventType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInvoicePosted(r.InvoicePosted, w)
	if err != nil {
		return err
	}
	return err
}

func (r InvoicePostedEvent) Serialize(w io.Writer) error {
	return writeInvoicePostedEvent(r, w)
}

func (r InvoicePostedEvent) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CreatedTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"EventType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"InvoicePosted\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"InternalPeriod\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"InvoiceAccounts\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Account\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Amount\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Amount\",\"type\":{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}},{\"default\":null,\"name\":\"CurrencyCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"Money\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OperatingUnit\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostingCode\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PriceCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ProjectNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Responsibility\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VatCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VatRate\",\"type\":[\"null\",\"double\"]}],\"name\":\"InvoiceAccount\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"InvoiceNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"OrderNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PostingDate\",\"type\":[\"null\",\"string\"]}],\"name\":\"InvoicePosted\",\"type\":\"record\"}]}],\"name\":\"Afiextensions.Schemas.InvoicePostedEvents.V1.InvoicePostedEvent\",\"type\":\"record\"}"
}

func (r InvoicePostedEvent) SchemaName() string {
	return "Afiextensions.Schemas.InvoicePostedEvents.V1.InvoicePostedEvent"
}

func (_ InvoicePostedEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ InvoicePostedEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ InvoicePostedEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ InvoicePostedEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ InvoicePostedEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ InvoicePostedEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ InvoicePostedEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ InvoicePostedEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *InvoicePostedEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.CreatedTime = NewUnionNullLong()

		return r.CreatedTime
	case 1:
		r.EventType = NewUnionNullString()

		return r.EventType
	case 2:
		r.Id = NewUnionNullString()

		return r.Id
	case 3:
		r.InvoicePosted = NewUnionNullInvoicePosted()

		return r.InvoicePosted
	}
	panic("Unknown field index")
}

func (r *InvoicePostedEvent) SetDefault(i int) {
	switch i {
	case 0:
		r.CreatedTime = nil
		return
	case 1:
		r.EventType = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.InvoicePosted = nil
		return
	}
	panic("Unknown field index")
}

func (r *InvoicePostedEvent) NullField(i int) {
	switch i {
	case 0:
		r.CreatedTime = nil
		return
	case 1:
		r.EventType = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.InvoicePosted = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ InvoicePostedEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ InvoicePostedEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ InvoicePostedEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ InvoicePostedEvent) Finalize()                        {}

func (_ InvoicePostedEvent) AvroCRC64Fingerprint() []byte {
	return []byte(InvoicePostedEventAvroCRC64Fingerprint)
}

func (r InvoicePostedEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CreatedTime"], err = json.Marshal(r.CreatedTime)
	if err != nil {
		return nil, err
	}
	output["EventType"], err = json.Marshal(r.EventType)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["InvoicePosted"], err = json.Marshal(r.InvoicePosted)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *InvoicePostedEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CreatedTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedTime); err != nil {
			return err
		}
	} else {
		r.CreatedTime = NewUnionNullLong()

		r.CreatedTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventType); err != nil {
			return err
		}
	} else {
		r.EventType = NewUnionNullString()

		r.EventType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoicePosted"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoicePosted); err != nil {
			return err
		}
	} else {
		r.InvoicePosted = NewUnionNullInvoicePosted()

		r.InvoicePosted = nil
	}
	return nil
}
