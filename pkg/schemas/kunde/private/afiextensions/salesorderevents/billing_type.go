// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100366_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type BillingType int32

const (
	BillingTypeSettlementOrOnAccount                 BillingType = 0
	BillingTypeSettlement                            BillingType = 1
	BillingTypeEnergySettlement                      BillingType = 2
	BillingTypeOnAccountInvoicing                    BillingType = 3
	BillingTypeAnnualSettlementAfterEnergySettlement BillingType = 4
	BillingTypeSettlementOfAdditionalOrders          BillingType = 5
)

func (e BillingType) String() string {
	switch e {
	case BillingTypeSettlementOrOnAccount:
		return "SettlementOrOnAccount"
	case BillingTypeSettlement:
		return "Settlement"
	case BillingTypeEnergySettlement:
		return "EnergySettlement"
	case BillingTypeOnAccountInvoicing:
		return "OnAccountInvoicing"
	case BillingTypeAnnualSettlementAfterEnergySettlement:
		return "AnnualSettlementAfterEnergySettlement"
	case BillingTypeSettlementOfAdditionalOrders:
		return "SettlementOfAdditionalOrders"
	}
	return "unknown"
}

func writeBillingType(r BillingType, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewBillingTypeValue(raw string) (r BillingType, err error) {
	switch raw {
	case "SettlementOrOnAccount":
		return BillingTypeSettlementOrOnAccount, nil
	case "Settlement":
		return BillingTypeSettlement, nil
	case "EnergySettlement":
		return BillingTypeEnergySettlement, nil
	case "OnAccountInvoicing":
		return BillingTypeOnAccountInvoicing, nil
	case "AnnualSettlementAfterEnergySettlement":
		return BillingTypeAnnualSettlementAfterEnergySettlement, nil
	case "SettlementOfAdditionalOrders":
		return BillingTypeSettlementOfAdditionalOrders, nil
	}

	return -1, fmt.Errorf("invalid value for BillingType: '%s'", raw)

}

func (b BillingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *BillingType) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewBillingTypeValue(stringVal)
	*b = val
	return err
}

type BillingTypeWrapper struct {
	Target *BillingType
}

func (b BillingTypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b BillingTypeWrapper) SetInt(v int32) {
	*(b.Target) = BillingType(v)
}

func (b BillingTypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b BillingTypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b BillingTypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b BillingTypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b BillingTypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b BillingTypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b BillingTypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b BillingTypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b BillingTypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b BillingTypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b BillingTypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b BillingTypeWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b BillingTypeWrapper) Finalize() {}
