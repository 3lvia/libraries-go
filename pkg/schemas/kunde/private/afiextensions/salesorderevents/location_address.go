// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100366_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type LocationAddress struct {
	AddressFreeForm *UnionNullString `json:"AddressFreeForm"`

	City *UnionNullString `json:"City"`

	CountryCode *UnionNullString `json:"CountryCode"`

	HouseNumber *UnionNullString `json:"HouseNumber"`

	MunicipalityId *UnionNullString `json:"MunicipalityId"`

	PropertyUnitNumber *UnionNullString `json:"PropertyUnitNumber"`

	StreetName *UnionNullString `json:"StreetName"`

	ZipCode *UnionNullString `json:"ZipCode"`
}

const LocationAddressAvroCRC64Fingerprint = "T\xd7\xdc\x0f\xb0\xa1\xac\x8a"

func NewLocationAddress() LocationAddress {
	r := LocationAddress{}
	r.AddressFreeForm = nil
	r.City = nil
	r.CountryCode = nil
	r.HouseNumber = nil
	r.MunicipalityId = nil
	r.PropertyUnitNumber = nil
	r.StreetName = nil
	r.ZipCode = nil
	return r
}

func DeserializeLocationAddress(r io.Reader) (LocationAddress, error) {
	t := NewLocationAddress()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLocationAddressFromSchema(r io.Reader, schema string) (LocationAddress, error) {
	t := NewLocationAddress()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLocationAddress(r LocationAddress, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.AddressFreeForm, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.City, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CountryCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.HouseNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MunicipalityId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PropertyUnitNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.StreetName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ZipCode, w)
	if err != nil {
		return err
	}
	return err
}

func (r LocationAddress) Serialize(w io.Writer) error {
	return writeLocationAddress(r, w)
}

func (r LocationAddress) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"AddressFreeForm\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"City\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CountryCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HouseNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MunicipalityId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PropertyUnitNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ZipCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"Afiextensions.Schemas.SalesOrderEvents.V1.LocationAddress\",\"type\":\"record\"}"
}

func (r LocationAddress) SchemaName() string {
	return "Afiextensions.Schemas.SalesOrderEvents.V1.LocationAddress"
}

func (_ LocationAddress) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LocationAddress) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LocationAddress) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LocationAddress) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LocationAddress) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LocationAddress) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LocationAddress) SetString(v string)   { panic("Unsupported operation") }
func (_ LocationAddress) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LocationAddress) Get(i int) types.Field {
	switch i {
	case 0:
		r.AddressFreeForm = NewUnionNullString()

		return r.AddressFreeForm
	case 1:
		r.City = NewUnionNullString()

		return r.City
	case 2:
		r.CountryCode = NewUnionNullString()

		return r.CountryCode
	case 3:
		r.HouseNumber = NewUnionNullString()

		return r.HouseNumber
	case 4:
		r.MunicipalityId = NewUnionNullString()

		return r.MunicipalityId
	case 5:
		r.PropertyUnitNumber = NewUnionNullString()

		return r.PropertyUnitNumber
	case 6:
		r.StreetName = NewUnionNullString()

		return r.StreetName
	case 7:
		r.ZipCode = NewUnionNullString()

		return r.ZipCode
	}
	panic("Unknown field index")
}

func (r *LocationAddress) SetDefault(i int) {
	switch i {
	case 0:
		r.AddressFreeForm = nil
		return
	case 1:
		r.City = nil
		return
	case 2:
		r.CountryCode = nil
		return
	case 3:
		r.HouseNumber = nil
		return
	case 4:
		r.MunicipalityId = nil
		return
	case 5:
		r.PropertyUnitNumber = nil
		return
	case 6:
		r.StreetName = nil
		return
	case 7:
		r.ZipCode = nil
		return
	}
	panic("Unknown field index")
}

func (r *LocationAddress) NullField(i int) {
	switch i {
	case 0:
		r.AddressFreeForm = nil
		return
	case 1:
		r.City = nil
		return
	case 2:
		r.CountryCode = nil
		return
	case 3:
		r.HouseNumber = nil
		return
	case 4:
		r.MunicipalityId = nil
		return
	case 5:
		r.PropertyUnitNumber = nil
		return
	case 6:
		r.StreetName = nil
		return
	case 7:
		r.ZipCode = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ LocationAddress) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ LocationAddress) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ LocationAddress) HintSize(int)                     { panic("Unsupported operation") }
func (_ LocationAddress) Finalize()                        {}

func (_ LocationAddress) AvroCRC64Fingerprint() []byte {
	return []byte(LocationAddressAvroCRC64Fingerprint)
}

func (r LocationAddress) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AddressFreeForm"], err = json.Marshal(r.AddressFreeForm)
	if err != nil {
		return nil, err
	}
	output["City"], err = json.Marshal(r.City)
	if err != nil {
		return nil, err
	}
	output["CountryCode"], err = json.Marshal(r.CountryCode)
	if err != nil {
		return nil, err
	}
	output["HouseNumber"], err = json.Marshal(r.HouseNumber)
	if err != nil {
		return nil, err
	}
	output["MunicipalityId"], err = json.Marshal(r.MunicipalityId)
	if err != nil {
		return nil, err
	}
	output["PropertyUnitNumber"], err = json.Marshal(r.PropertyUnitNumber)
	if err != nil {
		return nil, err
	}
	output["StreetName"], err = json.Marshal(r.StreetName)
	if err != nil {
		return nil, err
	}
	output["ZipCode"], err = json.Marshal(r.ZipCode)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LocationAddress) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AddressFreeForm"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AddressFreeForm); err != nil {
			return err
		}
	} else {
		r.AddressFreeForm = NewUnionNullString()

		r.AddressFreeForm = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["City"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.City); err != nil {
			return err
		}
	} else {
		r.City = NewUnionNullString()

		r.City = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CountryCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CountryCode); err != nil {
			return err
		}
	} else {
		r.CountryCode = NewUnionNullString()

		r.CountryCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HouseNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HouseNumber); err != nil {
			return err
		}
	} else {
		r.HouseNumber = NewUnionNullString()

		r.HouseNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MunicipalityId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MunicipalityId); err != nil {
			return err
		}
	} else {
		r.MunicipalityId = NewUnionNullString()

		r.MunicipalityId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PropertyUnitNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PropertyUnitNumber); err != nil {
			return err
		}
	} else {
		r.PropertyUnitNumber = NewUnionNullString()

		r.PropertyUnitNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StreetName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StreetName); err != nil {
			return err
		}
	} else {
		r.StreetName = NewUnionNullString()

		r.StreetName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ZipCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ZipCode); err != nil {
			return err
		}
	} else {
		r.ZipCode = NewUnionNullString()

		r.ZipCode = nil
	}
	return nil
}
