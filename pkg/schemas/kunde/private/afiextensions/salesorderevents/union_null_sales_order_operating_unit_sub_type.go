// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100366_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullSalesOrderOperatingUnitSubTypeTypeEnum int

const (
	UnionNullSalesOrderOperatingUnitSubTypeTypeEnumSalesOrderOperatingUnitSubType UnionNullSalesOrderOperatingUnitSubTypeTypeEnum = 1
)

type UnionNullSalesOrderOperatingUnitSubType struct {
	Null                           *types.NullVal
	SalesOrderOperatingUnitSubType SalesOrderOperatingUnitSubType
	UnionType                      UnionNullSalesOrderOperatingUnitSubTypeTypeEnum
}

func writeUnionNullSalesOrderOperatingUnitSubType(r *UnionNullSalesOrderOperatingUnitSubType, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullSalesOrderOperatingUnitSubTypeTypeEnumSalesOrderOperatingUnitSubType:
		return writeSalesOrderOperatingUnitSubType(r.SalesOrderOperatingUnitSubType, w)
	}
	return fmt.Errorf("invalid value for *UnionNullSalesOrderOperatingUnitSubType")
}

func NewUnionNullSalesOrderOperatingUnitSubType() *UnionNullSalesOrderOperatingUnitSubType {
	return &UnionNullSalesOrderOperatingUnitSubType{}
}

func (r *UnionNullSalesOrderOperatingUnitSubType) Serialize(w io.Writer) error {
	return writeUnionNullSalesOrderOperatingUnitSubType(r, w)
}

func DeserializeUnionNullSalesOrderOperatingUnitSubType(r io.Reader) (*UnionNullSalesOrderOperatingUnitSubType, error) {
	t := NewUnionNullSalesOrderOperatingUnitSubType()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullSalesOrderOperatingUnitSubTypeFromSchema(r io.Reader, schema string) (*UnionNullSalesOrderOperatingUnitSubType, error) {
	t := NewUnionNullSalesOrderOperatingUnitSubType()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullSalesOrderOperatingUnitSubType) Schema() string {
	return "[\"null\",{\"name\":\"SalesOrderOperatingUnitSubType\",\"symbols\":[\"Distribution\",\"Sales\",\"SalesAndDistribution\"],\"type\":\"enum\"}]"
}

func (_ *UnionNullSalesOrderOperatingUnitSubType) SetBoolean(v bool)  { panic("Unsupported operation") }
func (_ *UnionNullSalesOrderOperatingUnitSubType) SetInt(v int32)     { panic("Unsupported operation") }
func (_ *UnionNullSalesOrderOperatingUnitSubType) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *UnionNullSalesOrderOperatingUnitSubType) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ *UnionNullSalesOrderOperatingUnitSubType) SetBytes(v []byte)  { panic("Unsupported operation") }
func (_ *UnionNullSalesOrderOperatingUnitSubType) SetString(v string) { panic("Unsupported operation") }

func (r *UnionNullSalesOrderOperatingUnitSubType) SetLong(v int64) {

	r.UnionType = (UnionNullSalesOrderOperatingUnitSubTypeTypeEnum)(v)
}

func (r *UnionNullSalesOrderOperatingUnitSubType) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		return &SalesOrderOperatingUnitSubTypeWrapper{Target: (&r.SalesOrderOperatingUnitSubType)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullSalesOrderOperatingUnitSubType) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullSalesOrderOperatingUnitSubType) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullSalesOrderOperatingUnitSubType) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullSalesOrderOperatingUnitSubType) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullSalesOrderOperatingUnitSubType) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullSalesOrderOperatingUnitSubType) Finalize() {}

func (r *UnionNullSalesOrderOperatingUnitSubType) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullSalesOrderOperatingUnitSubTypeTypeEnumSalesOrderOperatingUnitSubType:
		return json.Marshal(map[string]interface{}{"Afiextensions.Schemas.SalesOrderEvents.V1.SalesOrderOperatingUnitSubType": r.SalesOrderOperatingUnitSubType})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullSalesOrderOperatingUnitSubType")
}

func (r *UnionNullSalesOrderOperatingUnitSubType) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Afiextensions.Schemas.SalesOrderEvents.V1.SalesOrderOperatingUnitSubType"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.SalesOrderOperatingUnitSubType)
	}
	return fmt.Errorf("invalid value for *UnionNullSalesOrderOperatingUnitSubType")
}
