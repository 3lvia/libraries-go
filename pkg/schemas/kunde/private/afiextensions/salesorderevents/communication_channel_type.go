// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100366_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CommunicationChannelType int32

const (
	CommunicationChannelTypeCasehandling       CommunicationChannelType = 0
	CommunicationChannelTypeChat               CommunicationChannelType = 1
	CommunicationChannelTypeISCustomer         CommunicationChannelType = 2
	CommunicationChannelTypeEMail              CommunicationChannelType = 3
	CommunicationChannelTypeFacebook           CommunicationChannelType = 4
	CommunicationChannelTypeFax                CommunicationChannelType = 5
	CommunicationChannelTypePersonalAttendance CommunicationChannelType = 6
	CommunicationChannelTypeLetter             CommunicationChannelType = 7
	CommunicationChannelTypeSms                CommunicationChannelType = 8
	CommunicationChannelTypePhone              CommunicationChannelType = 9
	CommunicationChannelTypeWeb                CommunicationChannelType = 10
	CommunicationChannelTypeISChange           CommunicationChannelType = 11
	CommunicationChannelTypeElhub              CommunicationChannelType = 12
	CommunicationChannelTypePower              CommunicationChannelType = 13
	CommunicationChannelTypeNet                CommunicationChannelType = 14
	CommunicationChannelTypeDSF                CommunicationChannelType = 15
	CommunicationChannelTypeISSafe             CommunicationChannelType = 16
)

func (e CommunicationChannelType) String() string {
	switch e {
	case CommunicationChannelTypeCasehandling:
		return "Casehandling"
	case CommunicationChannelTypeChat:
		return "Chat"
	case CommunicationChannelTypeISCustomer:
		return "ISCustomer"
	case CommunicationChannelTypeEMail:
		return "EMail"
	case CommunicationChannelTypeFacebook:
		return "Facebook"
	case CommunicationChannelTypeFax:
		return "Fax"
	case CommunicationChannelTypePersonalAttendance:
		return "PersonalAttendance"
	case CommunicationChannelTypeLetter:
		return "Letter"
	case CommunicationChannelTypeSms:
		return "Sms"
	case CommunicationChannelTypePhone:
		return "Phone"
	case CommunicationChannelTypeWeb:
		return "Web"
	case CommunicationChannelTypeISChange:
		return "ISChange"
	case CommunicationChannelTypeElhub:
		return "Elhub"
	case CommunicationChannelTypePower:
		return "Power"
	case CommunicationChannelTypeNet:
		return "Net"
	case CommunicationChannelTypeDSF:
		return "DSF"
	case CommunicationChannelTypeISSafe:
		return "ISSafe"
	}
	return "unknown"
}

func writeCommunicationChannelType(r CommunicationChannelType, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewCommunicationChannelTypeValue(raw string) (r CommunicationChannelType, err error) {
	switch raw {
	case "Casehandling":
		return CommunicationChannelTypeCasehandling, nil
	case "Chat":
		return CommunicationChannelTypeChat, nil
	case "ISCustomer":
		return CommunicationChannelTypeISCustomer, nil
	case "EMail":
		return CommunicationChannelTypeEMail, nil
	case "Facebook":
		return CommunicationChannelTypeFacebook, nil
	case "Fax":
		return CommunicationChannelTypeFax, nil
	case "PersonalAttendance":
		return CommunicationChannelTypePersonalAttendance, nil
	case "Letter":
		return CommunicationChannelTypeLetter, nil
	case "Sms":
		return CommunicationChannelTypeSms, nil
	case "Phone":
		return CommunicationChannelTypePhone, nil
	case "Web":
		return CommunicationChannelTypeWeb, nil
	case "ISChange":
		return CommunicationChannelTypeISChange, nil
	case "Elhub":
		return CommunicationChannelTypeElhub, nil
	case "Power":
		return CommunicationChannelTypePower, nil
	case "Net":
		return CommunicationChannelTypeNet, nil
	case "DSF":
		return CommunicationChannelTypeDSF, nil
	case "ISSafe":
		return CommunicationChannelTypeISSafe, nil
	}

	return -1, fmt.Errorf("invalid value for CommunicationChannelType: '%s'", raw)

}

func (b CommunicationChannelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *CommunicationChannelType) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewCommunicationChannelTypeValue(stringVal)
	*b = val
	return err
}

type CommunicationChannelTypeWrapper struct {
	Target *CommunicationChannelType
}

func (b CommunicationChannelTypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b CommunicationChannelTypeWrapper) SetInt(v int32) {
	*(b.Target) = CommunicationChannelType(v)
}

func (b CommunicationChannelTypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b CommunicationChannelTypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b CommunicationChannelTypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b CommunicationChannelTypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b CommunicationChannelTypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b CommunicationChannelTypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b CommunicationChannelTypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b CommunicationChannelTypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b CommunicationChannelTypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b CommunicationChannelTypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b CommunicationChannelTypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b CommunicationChannelTypeWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b CommunicationChannelTypeWrapper) Finalize() {}
