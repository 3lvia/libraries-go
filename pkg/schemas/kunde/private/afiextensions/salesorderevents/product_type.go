// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100366_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ProductType int32

const (
	ProductTypeActiveEnergy                                       ProductType = 0
	ProductTypeActivePower                                        ProductType = 1
	ProductTypeReactiveEnergy                                     ProductType = 2
	ProductTypeReactivePower                                      ProductType = 3
	ProductTypeDistrictHeatingEnergy                              ProductType = 4
	ProductTypeDistrictHeatingPower                               ProductType = 5
	ProductTypeDistrictHeatingWaterVolume                         ProductType = 6
	ProductTypeDistrictHeatingWaterDelivered                      ProductType = 7
	ProductTypeNaturalGasEnergy                                   ProductType = 8
	ProductTypeNaturalGasVolume                                   ProductType = 9
	ProductTypeNaturalGasNormalizedVolume                         ProductType = 10
	ProductTypeCapacitiveReactiveEnergy                           ProductType = 11
	ProductTypeCapacitiveReactivePower                            ProductType = 12
	ProductTypeInductiveReactiveEnergy                            ProductType = 13
	ProductTypeInductiveReactivePower                             ProductType = 14
	ProductTypeActualProduction                                   ProductType = 15
	ProductTypePlannedProduction                                  ProductType = 16
	ProductTypeReviewedProductionInElSpot                         ProductType = 17
	ProductTypeActualConsumption                                  ProductType = 18
	ProductTypeReviewedConsumptionInElSpot                        ProductType = 19
	ProductTypeConcessionPower                                    ProductType = 20
	ProductTypeReplacementPower                                   ProductType = 21
	ProductTypeIndustryContracts                                  ProductType = 22
	ProductTypeRKImbalanceAsBalanceResponsibleForGridOwner        ProductType = 23
	ProductTypeEnergyPart                                         ProductType = 24
	ProductTypeMarginalLossRates                                  ProductType = 25
	ProductTypeNaturalGasControlVolume                            ProductType = 26
	ProductTypeNaturalGasCorrectedVolume                          ProductType = 27
	ProductTypeActiveEnergyPPC                                    ProductType = 28
	ProductTypeActiveEnergyFPC                                    ProductType = 29
	ProductTypeDistrictHeatingSteppedMeasured                     ProductType = 30
	ProductTypeDistrictHeatingTemperatureInlet                    ProductType = 31
	ProductTypeDistrictHeatingTemperatureOutlet                   ProductType = 32
	ProductTypeDistrictHeatingVolBasedAvgTempIn                   ProductType = 33
	ProductTypeDistrictHeatingVolBasedAvgTempOut                  ProductType = 34
	ProductTypeDistrictCoolingEnergy                              ProductType = 35
	ProductTypeDistrictCoolingWaterVolume                         ProductType = 36
	ProductTypeDistrictCoolingTemperatureInlet                    ProductType = 37
	ProductTypeDistrictCoolingTemperatureOutlet                   ProductType = 38
	ProductTypeDistrictCoolingVolBasedAvgTempIn                   ProductType = 39
	ProductTypeDistrictCoolingVolBasedAvgTempOut                  ProductType = 40
	ProductTypeInvoiceShareElectricity                            ProductType = 41
	ProductTypeInvoiceShareCooling                                ProductType = 42
	ProductTypeInvoiceShareGasEnergy                              ProductType = 43
	ProductTypeInvoiceShareGasVolume                              ProductType = 44
	ProductTypeDistrictHeatingVolumeBasedAverageTemperatureInlet  ProductType = 45
	ProductTypeDistrictHeatingVolumeBasedAverageTemperatureOutlet ProductType = 46
	ProductTypeDistrictCoolingVolumeBasedAverageTemperatureInlet  ProductType = 47
	ProductTypeDistrictCoolingVolumeBasedAverageTemperatureOutlet ProductType = 48
	ProductTypeActiveEnergyControl                                ProductType = 49
	ProductTypeCustomProduct                                      ProductType = 50
)

func (e ProductType) String() string {
	switch e {
	case ProductTypeActiveEnergy:
		return "ActiveEnergy"
	case ProductTypeActivePower:
		return "ActivePower"
	case ProductTypeReactiveEnergy:
		return "ReactiveEnergy"
	case ProductTypeReactivePower:
		return "ReactivePower"
	case ProductTypeDistrictHeatingEnergy:
		return "DistrictHeatingEnergy"
	case ProductTypeDistrictHeatingPower:
		return "DistrictHeatingPower"
	case ProductTypeDistrictHeatingWaterVolume:
		return "DistrictHeatingWaterVolume"
	case ProductTypeDistrictHeatingWaterDelivered:
		return "DistrictHeatingWaterDelivered"
	case ProductTypeNaturalGasEnergy:
		return "NaturalGasEnergy"
	case ProductTypeNaturalGasVolume:
		return "NaturalGasVolume"
	case ProductTypeNaturalGasNormalizedVolume:
		return "NaturalGasNormalizedVolume"
	case ProductTypeCapacitiveReactiveEnergy:
		return "CapacitiveReactiveEnergy"
	case ProductTypeCapacitiveReactivePower:
		return "CapacitiveReactivePower"
	case ProductTypeInductiveReactiveEnergy:
		return "InductiveReactiveEnergy"
	case ProductTypeInductiveReactivePower:
		return "InductiveReactivePower"
	case ProductTypeActualProduction:
		return "ActualProduction"
	case ProductTypePlannedProduction:
		return "PlannedProduction"
	case ProductTypeReviewedProductionInElSpot:
		return "ReviewedProductionInElSpot"
	case ProductTypeActualConsumption:
		return "ActualConsumption"
	case ProductTypeReviewedConsumptionInElSpot:
		return "ReviewedConsumptionInElSpot"
	case ProductTypeConcessionPower:
		return "ConcessionPower"
	case ProductTypeReplacementPower:
		return "ReplacementPower"
	case ProductTypeIndustryContracts:
		return "IndustryContracts"
	case ProductTypeRKImbalanceAsBalanceResponsibleForGridOwner:
		return "RKImbalanceAsBalanceResponsibleForGridOwner"
	case ProductTypeEnergyPart:
		return "EnergyPart"
	case ProductTypeMarginalLossRates:
		return "MarginalLossRates"
	case ProductTypeNaturalGasControlVolume:
		return "NaturalGasControlVolume"
	case ProductTypeNaturalGasCorrectedVolume:
		return "NaturalGasCorrectedVolume"
	case ProductTypeActiveEnergyPPC:
		return "ActiveEnergyPPC"
	case ProductTypeActiveEnergyFPC:
		return "ActiveEnergyFPC"
	case ProductTypeDistrictHeatingSteppedMeasured:
		return "DistrictHeatingSteppedMeasured"
	case ProductTypeDistrictHeatingTemperatureInlet:
		return "DistrictHeatingTemperatureInlet"
	case ProductTypeDistrictHeatingTemperatureOutlet:
		return "DistrictHeatingTemperatureOutlet"
	case ProductTypeDistrictHeatingVolBasedAvgTempIn:
		return "DistrictHeatingVolBasedAvgTempIn"
	case ProductTypeDistrictHeatingVolBasedAvgTempOut:
		return "DistrictHeatingVolBasedAvgTempOut"
	case ProductTypeDistrictCoolingEnergy:
		return "DistrictCoolingEnergy"
	case ProductTypeDistrictCoolingWaterVolume:
		return "DistrictCoolingWaterVolume"
	case ProductTypeDistrictCoolingTemperatureInlet:
		return "DistrictCoolingTemperatureInlet"
	case ProductTypeDistrictCoolingTemperatureOutlet:
		return "DistrictCoolingTemperatureOutlet"
	case ProductTypeDistrictCoolingVolBasedAvgTempIn:
		return "DistrictCoolingVolBasedAvgTempIn"
	case ProductTypeDistrictCoolingVolBasedAvgTempOut:
		return "DistrictCoolingVolBasedAvgTempOut"
	case ProductTypeInvoiceShareElectricity:
		return "InvoiceShareElectricity"
	case ProductTypeInvoiceShareCooling:
		return "InvoiceShareCooling"
	case ProductTypeInvoiceShareGasEnergy:
		return "InvoiceShareGasEnergy"
	case ProductTypeInvoiceShareGasVolume:
		return "InvoiceShareGasVolume"
	case ProductTypeDistrictHeatingVolumeBasedAverageTemperatureInlet:
		return "DistrictHeatingVolumeBasedAverageTemperatureInlet"
	case ProductTypeDistrictHeatingVolumeBasedAverageTemperatureOutlet:
		return "DistrictHeatingVolumeBasedAverageTemperatureOutlet"
	case ProductTypeDistrictCoolingVolumeBasedAverageTemperatureInlet:
		return "DistrictCoolingVolumeBasedAverageTemperatureInlet"
	case ProductTypeDistrictCoolingVolumeBasedAverageTemperatureOutlet:
		return "DistrictCoolingVolumeBasedAverageTemperatureOutlet"
	case ProductTypeActiveEnergyControl:
		return "ActiveEnergyControl"
	case ProductTypeCustomProduct:
		return "CustomProduct"
	}
	return "unknown"
}

func writeProductType(r ProductType, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewProductTypeValue(raw string) (r ProductType, err error) {
	switch raw {
	case "ActiveEnergy":
		return ProductTypeActiveEnergy, nil
	case "ActivePower":
		return ProductTypeActivePower, nil
	case "ReactiveEnergy":
		return ProductTypeReactiveEnergy, nil
	case "ReactivePower":
		return ProductTypeReactivePower, nil
	case "DistrictHeatingEnergy":
		return ProductTypeDistrictHeatingEnergy, nil
	case "DistrictHeatingPower":
		return ProductTypeDistrictHeatingPower, nil
	case "DistrictHeatingWaterVolume":
		return ProductTypeDistrictHeatingWaterVolume, nil
	case "DistrictHeatingWaterDelivered":
		return ProductTypeDistrictHeatingWaterDelivered, nil
	case "NaturalGasEnergy":
		return ProductTypeNaturalGasEnergy, nil
	case "NaturalGasVolume":
		return ProductTypeNaturalGasVolume, nil
	case "NaturalGasNormalizedVolume":
		return ProductTypeNaturalGasNormalizedVolume, nil
	case "CapacitiveReactiveEnergy":
		return ProductTypeCapacitiveReactiveEnergy, nil
	case "CapacitiveReactivePower":
		return ProductTypeCapacitiveReactivePower, nil
	case "InductiveReactiveEnergy":
		return ProductTypeInductiveReactiveEnergy, nil
	case "InductiveReactivePower":
		return ProductTypeInductiveReactivePower, nil
	case "ActualProduction":
		return ProductTypeActualProduction, nil
	case "PlannedProduction":
		return ProductTypePlannedProduction, nil
	case "ReviewedProductionInElSpot":
		return ProductTypeReviewedProductionInElSpot, nil
	case "ActualConsumption":
		return ProductTypeActualConsumption, nil
	case "ReviewedConsumptionInElSpot":
		return ProductTypeReviewedConsumptionInElSpot, nil
	case "ConcessionPower":
		return ProductTypeConcessionPower, nil
	case "ReplacementPower":
		return ProductTypeReplacementPower, nil
	case "IndustryContracts":
		return ProductTypeIndustryContracts, nil
	case "RKImbalanceAsBalanceResponsibleForGridOwner":
		return ProductTypeRKImbalanceAsBalanceResponsibleForGridOwner, nil
	case "EnergyPart":
		return ProductTypeEnergyPart, nil
	case "MarginalLossRates":
		return ProductTypeMarginalLossRates, nil
	case "NaturalGasControlVolume":
		return ProductTypeNaturalGasControlVolume, nil
	case "NaturalGasCorrectedVolume":
		return ProductTypeNaturalGasCorrectedVolume, nil
	case "ActiveEnergyPPC":
		return ProductTypeActiveEnergyPPC, nil
	case "ActiveEnergyFPC":
		return ProductTypeActiveEnergyFPC, nil
	case "DistrictHeatingSteppedMeasured":
		return ProductTypeDistrictHeatingSteppedMeasured, nil
	case "DistrictHeatingTemperatureInlet":
		return ProductTypeDistrictHeatingTemperatureInlet, nil
	case "DistrictHeatingTemperatureOutlet":
		return ProductTypeDistrictHeatingTemperatureOutlet, nil
	case "DistrictHeatingVolBasedAvgTempIn":
		return ProductTypeDistrictHeatingVolBasedAvgTempIn, nil
	case "DistrictHeatingVolBasedAvgTempOut":
		return ProductTypeDistrictHeatingVolBasedAvgTempOut, nil
	case "DistrictCoolingEnergy":
		return ProductTypeDistrictCoolingEnergy, nil
	case "DistrictCoolingWaterVolume":
		return ProductTypeDistrictCoolingWaterVolume, nil
	case "DistrictCoolingTemperatureInlet":
		return ProductTypeDistrictCoolingTemperatureInlet, nil
	case "DistrictCoolingTemperatureOutlet":
		return ProductTypeDistrictCoolingTemperatureOutlet, nil
	case "DistrictCoolingVolBasedAvgTempIn":
		return ProductTypeDistrictCoolingVolBasedAvgTempIn, nil
	case "DistrictCoolingVolBasedAvgTempOut":
		return ProductTypeDistrictCoolingVolBasedAvgTempOut, nil
	case "InvoiceShareElectricity":
		return ProductTypeInvoiceShareElectricity, nil
	case "InvoiceShareCooling":
		return ProductTypeInvoiceShareCooling, nil
	case "InvoiceShareGasEnergy":
		return ProductTypeInvoiceShareGasEnergy, nil
	case "InvoiceShareGasVolume":
		return ProductTypeInvoiceShareGasVolume, nil
	case "DistrictHeatingVolumeBasedAverageTemperatureInlet":
		return ProductTypeDistrictHeatingVolumeBasedAverageTemperatureInlet, nil
	case "DistrictHeatingVolumeBasedAverageTemperatureOutlet":
		return ProductTypeDistrictHeatingVolumeBasedAverageTemperatureOutlet, nil
	case "DistrictCoolingVolumeBasedAverageTemperatureInlet":
		return ProductTypeDistrictCoolingVolumeBasedAverageTemperatureInlet, nil
	case "DistrictCoolingVolumeBasedAverageTemperatureOutlet":
		return ProductTypeDistrictCoolingVolumeBasedAverageTemperatureOutlet, nil
	case "ActiveEnergyControl":
		return ProductTypeActiveEnergyControl, nil
	case "CustomProduct":
		return ProductTypeCustomProduct, nil
	}

	return -1, fmt.Errorf("invalid value for ProductType: '%s'", raw)

}

func (b ProductType) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *ProductType) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewProductTypeValue(stringVal)
	*b = val
	return err
}

type ProductTypeWrapper struct {
	Target *ProductType
}

func (b ProductTypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b ProductTypeWrapper) SetInt(v int32) {
	*(b.Target) = ProductType(v)
}

func (b ProductTypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b ProductTypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b ProductTypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b ProductTypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b ProductTypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b ProductTypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b ProductTypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b ProductTypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b ProductTypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b ProductTypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b ProductTypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b ProductTypeWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b ProductTypeWrapper) Finalize() {}
