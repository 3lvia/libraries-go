// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100444_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OrderSupplier struct {
	FromDate *UnionNullString `json:"FromDate"`

	HourlyRead bool `json:"HourlyRead"`

	SettlementMethod *UnionNullString `json:"SettlementMethod"`

	SupplierId *UnionNullInt `json:"SupplierId"`

	ToDate *UnionNullString `json:"ToDate"`
}

const OrderSupplierAvroCRC64Fingerprint = "\x7f'\x90\x8b\x8b\x04\x9a\xf8"

func NewOrderSupplier() OrderSupplier {
	r := OrderSupplier{}
	r.FromDate = nil
	r.SettlementMethod = nil
	r.SupplierId = nil
	r.ToDate = nil
	return r
}

func DeserializeOrderSupplier(r io.Reader) (OrderSupplier, error) {
	t := NewOrderSupplier()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOrderSupplierFromSchema(r io.Reader, schema string) (OrderSupplier, error) {
	t := NewOrderSupplier()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOrderSupplier(r OrderSupplier, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.FromDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.HourlyRead, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SettlementMethod, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.SupplierId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ToDate, w)
	if err != nil {
		return err
	}
	return err
}

func (r OrderSupplier) Serialize(w io.Writer) error {
	return writeOrderSupplier(r, w)
}

func (r OrderSupplier) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"FromDate\",\"type\":[\"null\",\"string\"]},{\"name\":\"HourlyRead\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"SettlementMethod\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SupplierId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ToDate\",\"type\":[\"null\",\"string\"]}],\"name\":\"Afiextensions.Schemas.TariffEvents.V1.OrderSupplier\",\"type\":\"record\"}"
}

func (r OrderSupplier) SchemaName() string {
	return "Afiextensions.Schemas.TariffEvents.V1.OrderSupplier"
}

func (_ OrderSupplier) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OrderSupplier) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OrderSupplier) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OrderSupplier) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OrderSupplier) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OrderSupplier) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OrderSupplier) SetString(v string)   { panic("Unsupported operation") }
func (_ OrderSupplier) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OrderSupplier) Get(i int) types.Field {
	switch i {
	case 0:
		r.FromDate = NewUnionNullString()

		return r.FromDate
	case 1:
		w := types.Boolean{Target: &r.HourlyRead}

		return w

	case 2:
		r.SettlementMethod = NewUnionNullString()

		return r.SettlementMethod
	case 3:
		r.SupplierId = NewUnionNullInt()

		return r.SupplierId
	case 4:
		r.ToDate = NewUnionNullString()

		return r.ToDate
	}
	panic("Unknown field index")
}

func (r *OrderSupplier) SetDefault(i int) {
	switch i {
	case 0:
		r.FromDate = nil
		return
	case 2:
		r.SettlementMethod = nil
		return
	case 3:
		r.SupplierId = nil
		return
	case 4:
		r.ToDate = nil
		return
	}
	panic("Unknown field index")
}

func (r *OrderSupplier) NullField(i int) {
	switch i {
	case 0:
		r.FromDate = nil
		return
	case 2:
		r.SettlementMethod = nil
		return
	case 3:
		r.SupplierId = nil
		return
	case 4:
		r.ToDate = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ OrderSupplier) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OrderSupplier) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OrderSupplier) HintSize(int)                     { panic("Unsupported operation") }
func (_ OrderSupplier) Finalize()                        {}

func (_ OrderSupplier) AvroCRC64Fingerprint() []byte {
	return []byte(OrderSupplierAvroCRC64Fingerprint)
}

func (r OrderSupplier) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["FromDate"], err = json.Marshal(r.FromDate)
	if err != nil {
		return nil, err
	}
	output["HourlyRead"], err = json.Marshal(r.HourlyRead)
	if err != nil {
		return nil, err
	}
	output["SettlementMethod"], err = json.Marshal(r.SettlementMethod)
	if err != nil {
		return nil, err
	}
	output["SupplierId"], err = json.Marshal(r.SupplierId)
	if err != nil {
		return nil, err
	}
	output["ToDate"], err = json.Marshal(r.ToDate)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OrderSupplier) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["FromDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FromDate); err != nil {
			return err
		}
	} else {
		r.FromDate = NewUnionNullString()

		r.FromDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HourlyRead"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HourlyRead); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for HourlyRead")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SettlementMethod"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SettlementMethod); err != nil {
			return err
		}
	} else {
		r.SettlementMethod = NewUnionNullString()

		r.SettlementMethod = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SupplierId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SupplierId); err != nil {
			return err
		}
	} else {
		r.SupplierId = NewUnionNullInt()

		r.SupplierId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ToDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ToDate); err != nil {
			return err
		}
	} else {
		r.ToDate = NewUnionNullString()

		r.ToDate = nil
	}
	return nil
}
