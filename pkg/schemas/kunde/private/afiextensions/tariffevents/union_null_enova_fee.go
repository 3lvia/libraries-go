// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100444_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullEnovaFeeTypeEnum int

const (
	UnionNullEnovaFeeTypeEnumEnovaFee UnionNullEnovaFeeTypeEnum = 1
)

type UnionNullEnovaFee struct {
	Null      *types.NullVal
	EnovaFee  EnovaFee
	UnionType UnionNullEnovaFeeTypeEnum
}

func writeUnionNullEnovaFee(r *UnionNullEnovaFee, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullEnovaFeeTypeEnumEnovaFee:
		return writeEnovaFee(r.EnovaFee, w)
	}
	return fmt.Errorf("invalid value for *UnionNullEnovaFee")
}

func NewUnionNullEnovaFee() *UnionNullEnovaFee {
	return &UnionNullEnovaFee{}
}

func (r *UnionNullEnovaFee) Serialize(w io.Writer) error {
	return writeUnionNullEnovaFee(r, w)
}

func DeserializeUnionNullEnovaFee(r io.Reader) (*UnionNullEnovaFee, error) {
	t := NewUnionNullEnovaFee()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullEnovaFeeFromSchema(r io.Reader, schema string) (*UnionNullEnovaFee, error) {
	t := NewUnionNullEnovaFee()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullEnovaFee) Schema() string {
	return "[\"null\",{\"fields\":[{\"name\":\"Fee\",\"type\":{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}},{\"name\":\"Type\",\"type\":{\"name\":\"EnovaFeeType\",\"symbols\":[\"Fixed\",\"ConsumptionDependent\"],\"type\":\"enum\"}}],\"name\":\"EnovaFee\",\"type\":\"record\"}]"
}

func (_ *UnionNullEnovaFee) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullEnovaFee) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullEnovaFee) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullEnovaFee) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullEnovaFee) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullEnovaFee) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullEnovaFee) SetLong(v int64) {

	r.UnionType = (UnionNullEnovaFeeTypeEnum)(v)
}

func (r *UnionNullEnovaFee) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.EnovaFee = NewEnovaFee()
		return &types.Record{Target: (&r.EnovaFee)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullEnovaFee) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullEnovaFee) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullEnovaFee) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullEnovaFee) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullEnovaFee) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullEnovaFee) Finalize()                        {}

func (r *UnionNullEnovaFee) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullEnovaFeeTypeEnumEnovaFee:
		return json.Marshal(map[string]interface{}{"Afiextensions.Schemas.TariffEvents.V1.EnovaFee": r.EnovaFee})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullEnovaFee")
}

func (r *UnionNullEnovaFee) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Afiextensions.Schemas.TariffEvents.V1.EnovaFee"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.EnovaFee)
	}
	return fmt.Errorf("invalid value for *UnionNullEnovaFee")
}
