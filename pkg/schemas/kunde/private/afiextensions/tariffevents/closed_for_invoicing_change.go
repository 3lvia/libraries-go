// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100444_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ClosedForInvoicingChange struct {
	CreatedDate *UnionNullString `json:"CreatedDate"`

	Description *UnionNullString `json:"Description"`

	Subject *UnionNullString `json:"Subject"`
}

const ClosedForInvoicingChangeAvroCRC64Fingerprint = "!~\x82>T\x92@\xf4"

func NewClosedForInvoicingChange() ClosedForInvoicingChange {
	r := ClosedForInvoicingChange{}
	r.CreatedDate = nil
	r.Description = nil
	r.Subject = nil
	return r
}

func DeserializeClosedForInvoicingChange(r io.Reader) (ClosedForInvoicingChange, error) {
	t := NewClosedForInvoicingChange()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeClosedForInvoicingChangeFromSchema(r io.Reader, schema string) (ClosedForInvoicingChange, error) {
	t := NewClosedForInvoicingChange()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeClosedForInvoicingChange(r ClosedForInvoicingChange, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CreatedDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Subject, w)
	if err != nil {
		return err
	}
	return err
}

func (r ClosedForInvoicingChange) Serialize(w io.Writer) error {
	return writeClosedForInvoicingChange(r, w)
}

func (r ClosedForInvoicingChange) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CreatedDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Subject\",\"type\":[\"null\",\"string\"]}],\"name\":\"Afiextensions.Schemas.TariffEvents.V1.ClosedForInvoicingChange\",\"type\":\"record\"}"
}

func (r ClosedForInvoicingChange) SchemaName() string {
	return "Afiextensions.Schemas.TariffEvents.V1.ClosedForInvoicingChange"
}

func (_ ClosedForInvoicingChange) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ClosedForInvoicingChange) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ClosedForInvoicingChange) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ClosedForInvoicingChange) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ClosedForInvoicingChange) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ClosedForInvoicingChange) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ClosedForInvoicingChange) SetString(v string)   { panic("Unsupported operation") }
func (_ ClosedForInvoicingChange) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ClosedForInvoicingChange) Get(i int) types.Field {
	switch i {
	case 0:
		r.CreatedDate = NewUnionNullString()

		return r.CreatedDate
	case 1:
		r.Description = NewUnionNullString()

		return r.Description
	case 2:
		r.Subject = NewUnionNullString()

		return r.Subject
	}
	panic("Unknown field index")
}

func (r *ClosedForInvoicingChange) SetDefault(i int) {
	switch i {
	case 0:
		r.CreatedDate = nil
		return
	case 1:
		r.Description = nil
		return
	case 2:
		r.Subject = nil
		return
	}
	panic("Unknown field index")
}

func (r *ClosedForInvoicingChange) NullField(i int) {
	switch i {
	case 0:
		r.CreatedDate = nil
		return
	case 1:
		r.Description = nil
		return
	case 2:
		r.Subject = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ClosedForInvoicingChange) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ClosedForInvoicingChange) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ClosedForInvoicingChange) HintSize(int)                     { panic("Unsupported operation") }
func (_ ClosedForInvoicingChange) Finalize()                        {}

func (_ ClosedForInvoicingChange) AvroCRC64Fingerprint() []byte {
	return []byte(ClosedForInvoicingChangeAvroCRC64Fingerprint)
}

func (r ClosedForInvoicingChange) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CreatedDate"], err = json.Marshal(r.CreatedDate)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["Subject"], err = json.Marshal(r.Subject)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ClosedForInvoicingChange) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CreatedDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedDate); err != nil {
			return err
		}
	} else {
		r.CreatedDate = NewUnionNullString()

		r.CreatedDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Subject"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Subject); err != nil {
			return err
		}
	} else {
		r.Subject = NewUnionNullString()

		r.Subject = nil
	}
	return nil
}
