// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100444_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SalesOrder struct {
	ActorId *UnionNullString `json:"ActorId"`

	Balance *UnionNullMoney `json:"Balance"`

	BilledToDate *UnionNullString `json:"BilledToDate"`

	BillingGroupId *UnionNullString `json:"BillingGroupId"`

	BillingGroupTermId *UnionNullString `json:"BillingGroupTermId"`

	BillingStatus *UnionNullBillingStatus `json:"BillingStatus"`

	BillingType *UnionNullBillingType `json:"BillingType"`

	ClosedForInvoicingChanges []ClosedForInvoicingChange `json:"ClosedForInvoicingChanges"`

	ConsumptionCode *UnionNullConsumptionCode `json:"ConsumptionCode"`

	Counters []Counter `json:"Counters"`

	DeliveryPointId *UnionNullString `json:"DeliveryPointId"`

	DeliveryToDate *UnionNullString `json:"DeliveryToDate"`

	FreeFieldsId *UnionNullArrayString `json:"FreeFieldsId"`

	FreePowerReflected *UnionNullBool `json:"FreePowerReflected"`

	FromDate *UnionNullString `json:"FromDate"`

	Id *UnionNullString `json:"Id"`

	IndustryCode *UnionNullIndustryCode `json:"IndustryCode"`

	InvoiceAgreementId *UnionNullString `json:"InvoiceAgreementId"`

	ItemSalesId *UnionNullArrayString `json:"ItemSalesId"`

	LocationAddress *UnionNullLocationAddress `json:"LocationAddress"`

	MeterId *UnionNullString `json:"MeterId"`

	MonitoringStatus *UnionNullMonitoringStatus `json:"MonitoringStatus"`

	NotificationChannel *UnionNullCommunicationChannelType `json:"NotificationChannel"`

	NotificationEffectLimit *UnionNullBytes `json:"NotificationEffectLimit"`

	NotificationInterval *UnionNullNotificationInterval `json:"NotificationInterval"`

	OperatingUnitId *UnionNullString `json:"OperatingUnitId"`

	OperatingUnitSubType *UnionNullSalesOrderOperatingUnitSubType `json:"OperatingUnitSubType"`

	OrderSupplier *UnionNullOrderSupplier `json:"OrderSupplier"`

	ProductionPercentage *UnionNullBytes `json:"ProductionPercentage"`

	ReadyToBeInvoiced *UnionNullBool `json:"ReadyToBeInvoiced"`

	SerialNumber *UnionNullInt `json:"SerialNumber"`

	ShortTermSubscription *UnionNullString `json:"ShortTermSubscription"`

	Status *UnionNullSalesOrderStatus `json:"Status"`

	SundryExpenceSalesId *UnionNullArrayString `json:"SundryExpenceSalesId"`

	SupplementaryProductSalesId *UnionNullArrayString `json:"SupplementaryProductSalesId"`

	TariffSalesId *UnionNullArrayString `json:"TariffSalesId"`

	TermNumber *UnionNullInt `json:"TermNumber"`

	TermYear *UnionNullInt `json:"TermYear"`

	ThresholdValueSum *UnionNullMoney `json:"ThresholdValueSum"`

	ThresholdValueUpperLimit *UnionNullMoney `json:"ThresholdValueUpperLimit"`

	ToDate *UnionNullString `json:"ToDate"`
}

const SalesOrderAvroCRC64Fingerprint = "\xed\x00\x1bL\x16/\xd8\x03"

func NewSalesOrder() SalesOrder {
	r := SalesOrder{}
	r.ActorId = nil
	r.Balance = nil
	r.BilledToDate = nil
	r.BillingGroupId = nil
	r.BillingGroupTermId = nil
	r.BillingStatus = nil
	r.BillingType = nil
	r.ClosedForInvoicingChanges = make([]ClosedForInvoicingChange, 0)

	r.ConsumptionCode = nil
	r.Counters = make([]Counter, 0)

	r.DeliveryPointId = nil
	r.DeliveryToDate = nil
	r.FreeFieldsId = nil
	r.FreePowerReflected = nil
	r.FromDate = nil
	r.Id = nil
	r.IndustryCode = nil
	r.InvoiceAgreementId = nil
	r.ItemSalesId = nil
	r.LocationAddress = nil
	r.MeterId = nil
	r.MonitoringStatus = nil
	r.NotificationChannel = nil
	r.NotificationEffectLimit = nil
	r.NotificationInterval = nil
	r.OperatingUnitId = nil
	r.OperatingUnitSubType = nil
	r.OrderSupplier = nil
	r.ProductionPercentage = nil
	r.ReadyToBeInvoiced = nil
	r.SerialNumber = nil
	r.ShortTermSubscription = nil
	r.Status = nil
	r.SundryExpenceSalesId = nil
	r.SupplementaryProductSalesId = nil
	r.TariffSalesId = nil
	r.TermNumber = nil
	r.TermYear = nil
	r.ThresholdValueSum = nil
	r.ThresholdValueUpperLimit = nil
	r.ToDate = nil
	return r
}

func DeserializeSalesOrder(r io.Reader) (SalesOrder, error) {
	t := NewSalesOrder()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSalesOrderFromSchema(r io.Reader, schema string) (SalesOrder, error) {
	t := NewSalesOrder()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSalesOrder(r SalesOrder, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ActorId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMoney(r.Balance, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.BilledToDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.BillingGroupId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.BillingGroupTermId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBillingStatus(r.BillingStatus, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBillingType(r.BillingType, w)
	if err != nil {
		return err
	}
	err = writeArrayClosedForInvoicingChange(r.ClosedForInvoicingChanges, w)
	if err != nil {
		return err
	}
	err = writeUnionNullConsumptionCode(r.ConsumptionCode, w)
	if err != nil {
		return err
	}
	err = writeArrayCounter(r.Counters, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DeliveryPointId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DeliveryToDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.FreeFieldsId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.FreePowerReflected, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FromDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullIndustryCode(r.IndustryCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InvoiceAgreementId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.ItemSalesId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLocationAddress(r.LocationAddress, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MeterId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMonitoringStatus(r.MonitoringStatus, w)
	if err != nil {
		return err
	}
	err = writeUnionNullCommunicationChannelType(r.NotificationChannel, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBytes(r.NotificationEffectLimit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullNotificationInterval(r.NotificationInterval, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OperatingUnitId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullSalesOrderOperatingUnitSubType(r.OperatingUnitSubType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullOrderSupplier(r.OrderSupplier, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBytes(r.ProductionPercentage, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.ReadyToBeInvoiced, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.SerialNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ShortTermSubscription, w)
	if err != nil {
		return err
	}
	err = writeUnionNullSalesOrderStatus(r.Status, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.SundryExpenceSalesId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.SupplementaryProductSalesId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.TariffSalesId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.TermNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.TermYear, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMoney(r.ThresholdValueSum, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMoney(r.ThresholdValueUpperLimit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ToDate, w)
	if err != nil {
		return err
	}
	return err
}

func (r SalesOrder) Serialize(w io.Writer) error {
	return writeSalesOrder(r, w)
}

func (r SalesOrder) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ActorId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Balance\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Amount\",\"type\":{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}},{\"default\":null,\"name\":\"CurrencyCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"Money\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"BilledToDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"BillingGroupId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"BillingGroupTermId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"BillingStatus\",\"type\":[\"null\",{\"name\":\"BillingStatus\",\"symbols\":[\"Open\",\"BlockedForBilling\",\"ManualFinalBilling\",\"ManualFinalBillingAndBlockedForBilling\",\"ManualFinalBillingAndBlockedForBatchBilling\",\"ManualFinalBillingAndBlockedForAllBilling\",\"ManualBlockingBatchBilling\",\"BlockedForAllBilling\",\"BlockedByTakeoverWithoutSupplierChange\",\"BlockedByOutsideThresholdValue\",\"BlockedByOutsideThresholdValueVolumePercent\",\"ApprovedOutsideThresholdValueForBilling\",\"ApprovedOutsideThresholdValueForBillingToManualFinalBilling\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"BillingType\",\"type\":[\"null\",{\"name\":\"BillingType\",\"symbols\":[\"SettlementOrOnAccount\",\"Settlement\",\"EnergySettlement\",\"OnAccountInvoicing\",\"AnnualSettlementAfterEnergySettlement\",\"SettlementOfAdditionalOrders\"],\"type\":\"enum\"}]},{\"name\":\"ClosedForInvoicingChanges\",\"type\":{\"items\":{\"fields\":[{\"default\":null,\"name\":\"CreatedDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Subject\",\"type\":[\"null\",\"string\"]}],\"name\":\"ClosedForInvoicingChange\",\"type\":\"record\"},\"type\":\"array\"}},{\"default\":null,\"name\":\"ConsumptionCode\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]}],\"name\":\"ConsumptionCode\",\"type\":\"record\"}]},{\"name\":\"Counters\",\"type\":{\"items\":{\"fields\":[{\"default\":null,\"name\":\"DeliveryPointCounterId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Directionn\",\"type\":[\"null\",{\"name\":\"Direction\",\"symbols\":[\"Production\",\"Consumption\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"FromDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastReadingDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NumberOfDecimals\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"NumberOfDigits\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PendingApproval\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Product\",\"type\":[\"null\",{\"name\":\"ProductType\",\"symbols\":[\"ActiveEnergy\",\"ActivePower\",\"ReactiveEnergy\",\"ReactivePower\",\"DistrictHeatingEnergy\",\"DistrictHeatingPower\",\"DistrictHeatingWaterVolume\",\"DistrictHeatingWaterDelivered\",\"NaturalGasEnergy\",\"NaturalGasVolume\",\"NaturalGasNormalizedVolume\",\"CapacitiveReactiveEnergy\",\"CapacitiveReactivePower\",\"InductiveReactiveEnergy\",\"InductiveReactivePower\",\"ActualProduction\",\"PlannedProduction\",\"ReviewedProductionInElSpot\",\"ActualConsumption\",\"ReviewedConsumptionInElSpot\",\"ConcessionPower\",\"ReplacementPower\",\"IndustryContracts\",\"RKImbalanceAsBalanceResponsibleForGridOwner\",\"EnergyPart\",\"MarginalLossRates\",\"NaturalGasControlVolume\",\"NaturalGasCorrectedVolume\",\"ActiveEnergyPPC\",\"ActiveEnergyFPC\",\"DistrictHeatingSteppedMeasured\",\"DistrictHeatingTemperatureInlet\",\"DistrictHeatingTemperatureOutlet\",\"DistrictHeatingVolBasedAvgTempIn\",\"DistrictHeatingVolBasedAvgTempOut\",\"DistrictCoolingEnergy\",\"DistrictCoolingWaterVolume\",\"DistrictCoolingTemperatureInlet\",\"DistrictCoolingTemperatureOutlet\",\"DistrictCoolingVolBasedAvgTempIn\",\"DistrictCoolingVolBasedAvgTempOut\",\"InvoiceShareElectricity\",\"InvoiceShareCooling\",\"InvoiceShareGasEnergy\",\"InvoiceShareGasVolume\",\"DistrictHeatingVolumeBasedAverageTemperatureInlet\",\"DistrictHeatingVolumeBasedAverageTemperatureOutlet\",\"DistrictCoolingVolumeBasedAverageTemperatureInlet\",\"DistrictCoolingVolumeBasedAverageTemperatureOutlet\",\"ActiveEnergyControl\",\"CustomProduct\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"ReadingType\",\"type\":[\"null\",{\"name\":\"ReadingType\",\"symbols\":[\"Hourly\",\"Manual\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"ToDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Unit\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"YearlyConsumption\",\"type\":[\"null\",\"int\"]}],\"name\":\"Counter\",\"type\":\"record\"},\"type\":\"array\"}},{\"default\":null,\"name\":\"DeliveryPointId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DeliveryToDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FreeFieldsId\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"FreePowerReflected\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"FromDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IndustryCode\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SsbStandard\",\"type\":[\"null\",\"int\"]}],\"name\":\"IndustryCode\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"InvoiceAgreementId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ItemSalesId\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"LocationAddress\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"AddressFreeForm\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"City\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CountryCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HouseNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MunicipalityId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PropertyUnitNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ZipCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"LocationAddress\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"MeterId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MonitoringStatus\",\"type\":[\"null\",{\"name\":\"MonitoringStatus\",\"symbols\":[\"OnTheWatchList\",\"ApprovedForBilling\",\"NotOnTheWatchList\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"NotificationChannel\",\"type\":[\"null\",{\"name\":\"CommunicationChannelType\",\"symbols\":[\"Casehandling\",\"Chat\",\"ISCustomer\",\"EMail\",\"Facebook\",\"Fax\",\"PersonalAttendance\",\"Letter\",\"Sms\",\"Phone\",\"Web\",\"ISChange\",\"Elhub\",\"Power\",\"Net\",\"DSF\",\"ISSafe\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"NotificationEffectLimit\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]},{\"default\":null,\"name\":\"NotificationInterval\",\"type\":[\"null\",{\"name\":\"NotificationInterval\",\"symbols\":[\"Never\",\"Daily\",\"Weekly\",\"Monthly\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"OperatingUnitId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OperatingUnitSubType\",\"type\":[\"null\",{\"name\":\"SalesOrderOperatingUnitSubType\",\"symbols\":[\"Distribution\",\"Sales\",\"SalesAndDistribution\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"OrderSupplier\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"FromDate\",\"type\":[\"null\",\"string\"]},{\"name\":\"HourlyRead\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"SettlementMethod\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SupplierId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ToDate\",\"type\":[\"null\",\"string\"]}],\"name\":\"OrderSupplier\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"ProductionPercentage\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]},{\"default\":null,\"name\":\"ReadyToBeInvoiced\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"SerialNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ShortTermSubscription\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Status\",\"type\":[\"null\",{\"name\":\"SalesOrderStatus\",\"symbols\":[\"All\",\"Active\",\"Anulled\",\"NeedsPriceChange\",\"HandOverInProgress\",\"AboutToBeClosed\",\"Closed\",\"InCloseProcess\",\"AnullmentInitialised\",\"ActivationInitialised\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"SundryExpenceSalesId\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"SupplementaryProductSalesId\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"TariffSalesId\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"TermNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"TermYear\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ThresholdValueSum\",\"type\":[\"null\",\"Afiextensions.Schemas.TariffEvents.V1.Money\"]},{\"default\":null,\"name\":\"ThresholdValueUpperLimit\",\"type\":[\"null\",\"Afiextensions.Schemas.TariffEvents.V1.Money\"]},{\"default\":null,\"name\":\"ToDate\",\"type\":[\"null\",\"string\"]}],\"name\":\"Afiextensions.Schemas.TariffEvents.V1.SalesOrder\",\"type\":\"record\"}"
}

func (r SalesOrder) SchemaName() string {
	return "Afiextensions.Schemas.TariffEvents.V1.SalesOrder"
}

func (_ SalesOrder) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SalesOrder) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SalesOrder) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SalesOrder) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SalesOrder) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SalesOrder) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SalesOrder) SetString(v string)   { panic("Unsupported operation") }
func (_ SalesOrder) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SalesOrder) Get(i int) types.Field {
	switch i {
	case 0:
		r.ActorId = NewUnionNullString()

		return r.ActorId
	case 1:
		r.Balance = NewUnionNullMoney()

		return r.Balance
	case 2:
		r.BilledToDate = NewUnionNullString()

		return r.BilledToDate
	case 3:
		r.BillingGroupId = NewUnionNullString()

		return r.BillingGroupId
	case 4:
		r.BillingGroupTermId = NewUnionNullString()

		return r.BillingGroupTermId
	case 5:
		r.BillingStatus = NewUnionNullBillingStatus()

		return r.BillingStatus
	case 6:
		r.BillingType = NewUnionNullBillingType()

		return r.BillingType
	case 7:
		r.ClosedForInvoicingChanges = make([]ClosedForInvoicingChange, 0)

		w := ArrayClosedForInvoicingChangeWrapper{Target: &r.ClosedForInvoicingChanges}

		return w

	case 8:
		r.ConsumptionCode = NewUnionNullConsumptionCode()

		return r.ConsumptionCode
	case 9:
		r.Counters = make([]Counter, 0)

		w := ArrayCounterWrapper{Target: &r.Counters}

		return w

	case 10:
		r.DeliveryPointId = NewUnionNullString()

		return r.DeliveryPointId
	case 11:
		r.DeliveryToDate = NewUnionNullString()

		return r.DeliveryToDate
	case 12:
		r.FreeFieldsId = NewUnionNullArrayString()

		return r.FreeFieldsId
	case 13:
		r.FreePowerReflected = NewUnionNullBool()

		return r.FreePowerReflected
	case 14:
		r.FromDate = NewUnionNullString()

		return r.FromDate
	case 15:
		r.Id = NewUnionNullString()

		return r.Id
	case 16:
		r.IndustryCode = NewUnionNullIndustryCode()

		return r.IndustryCode
	case 17:
		r.InvoiceAgreementId = NewUnionNullString()

		return r.InvoiceAgreementId
	case 18:
		r.ItemSalesId = NewUnionNullArrayString()

		return r.ItemSalesId
	case 19:
		r.LocationAddress = NewUnionNullLocationAddress()

		return r.LocationAddress
	case 20:
		r.MeterId = NewUnionNullString()

		return r.MeterId
	case 21:
		r.MonitoringStatus = NewUnionNullMonitoringStatus()

		return r.MonitoringStatus
	case 22:
		r.NotificationChannel = NewUnionNullCommunicationChannelType()

		return r.NotificationChannel
	case 23:
		r.NotificationEffectLimit = NewUnionNullBytes()

		return r.NotificationEffectLimit
	case 24:
		r.NotificationInterval = NewUnionNullNotificationInterval()

		return r.NotificationInterval
	case 25:
		r.OperatingUnitId = NewUnionNullString()

		return r.OperatingUnitId
	case 26:
		r.OperatingUnitSubType = NewUnionNullSalesOrderOperatingUnitSubType()

		return r.OperatingUnitSubType
	case 27:
		r.OrderSupplier = NewUnionNullOrderSupplier()

		return r.OrderSupplier
	case 28:
		r.ProductionPercentage = NewUnionNullBytes()

		return r.ProductionPercentage
	case 29:
		r.ReadyToBeInvoiced = NewUnionNullBool()

		return r.ReadyToBeInvoiced
	case 30:
		r.SerialNumber = NewUnionNullInt()

		return r.SerialNumber
	case 31:
		r.ShortTermSubscription = NewUnionNullString()

		return r.ShortTermSubscription
	case 32:
		r.Status = NewUnionNullSalesOrderStatus()

		return r.Status
	case 33:
		r.SundryExpenceSalesId = NewUnionNullArrayString()

		return r.SundryExpenceSalesId
	case 34:
		r.SupplementaryProductSalesId = NewUnionNullArrayString()

		return r.SupplementaryProductSalesId
	case 35:
		r.TariffSalesId = NewUnionNullArrayString()

		return r.TariffSalesId
	case 36:
		r.TermNumber = NewUnionNullInt()

		return r.TermNumber
	case 37:
		r.TermYear = NewUnionNullInt()

		return r.TermYear
	case 38:
		r.ThresholdValueSum = NewUnionNullMoney()

		return r.ThresholdValueSum
	case 39:
		r.ThresholdValueUpperLimit = NewUnionNullMoney()

		return r.ThresholdValueUpperLimit
	case 40:
		r.ToDate = NewUnionNullString()

		return r.ToDate
	}
	panic("Unknown field index")
}

func (r *SalesOrder) SetDefault(i int) {
	switch i {
	case 0:
		r.ActorId = nil
		return
	case 1:
		r.Balance = nil
		return
	case 2:
		r.BilledToDate = nil
		return
	case 3:
		r.BillingGroupId = nil
		return
	case 4:
		r.BillingGroupTermId = nil
		return
	case 5:
		r.BillingStatus = nil
		return
	case 6:
		r.BillingType = nil
		return
	case 8:
		r.ConsumptionCode = nil
		return
	case 10:
		r.DeliveryPointId = nil
		return
	case 11:
		r.DeliveryToDate = nil
		return
	case 12:
		r.FreeFieldsId = nil
		return
	case 13:
		r.FreePowerReflected = nil
		return
	case 14:
		r.FromDate = nil
		return
	case 15:
		r.Id = nil
		return
	case 16:
		r.IndustryCode = nil
		return
	case 17:
		r.InvoiceAgreementId = nil
		return
	case 18:
		r.ItemSalesId = nil
		return
	case 19:
		r.LocationAddress = nil
		return
	case 20:
		r.MeterId = nil
		return
	case 21:
		r.MonitoringStatus = nil
		return
	case 22:
		r.NotificationChannel = nil
		return
	case 23:
		r.NotificationEffectLimit = nil
		return
	case 24:
		r.NotificationInterval = nil
		return
	case 25:
		r.OperatingUnitId = nil
		return
	case 26:
		r.OperatingUnitSubType = nil
		return
	case 27:
		r.OrderSupplier = nil
		return
	case 28:
		r.ProductionPercentage = nil
		return
	case 29:
		r.ReadyToBeInvoiced = nil
		return
	case 30:
		r.SerialNumber = nil
		return
	case 31:
		r.ShortTermSubscription = nil
		return
	case 32:
		r.Status = nil
		return
	case 33:
		r.SundryExpenceSalesId = nil
		return
	case 34:
		r.SupplementaryProductSalesId = nil
		return
	case 35:
		r.TariffSalesId = nil
		return
	case 36:
		r.TermNumber = nil
		return
	case 37:
		r.TermYear = nil
		return
	case 38:
		r.ThresholdValueSum = nil
		return
	case 39:
		r.ThresholdValueUpperLimit = nil
		return
	case 40:
		r.ToDate = nil
		return
	}
	panic("Unknown field index")
}

func (r *SalesOrder) NullField(i int) {
	switch i {
	case 0:
		r.ActorId = nil
		return
	case 1:
		r.Balance = nil
		return
	case 2:
		r.BilledToDate = nil
		return
	case 3:
		r.BillingGroupId = nil
		return
	case 4:
		r.BillingGroupTermId = nil
		return
	case 5:
		r.BillingStatus = nil
		return
	case 6:
		r.BillingType = nil
		return
	case 8:
		r.ConsumptionCode = nil
		return
	case 10:
		r.DeliveryPointId = nil
		return
	case 11:
		r.DeliveryToDate = nil
		return
	case 12:
		r.FreeFieldsId = nil
		return
	case 13:
		r.FreePowerReflected = nil
		return
	case 14:
		r.FromDate = nil
		return
	case 15:
		r.Id = nil
		return
	case 16:
		r.IndustryCode = nil
		return
	case 17:
		r.InvoiceAgreementId = nil
		return
	case 18:
		r.ItemSalesId = nil
		return
	case 19:
		r.LocationAddress = nil
		return
	case 20:
		r.MeterId = nil
		return
	case 21:
		r.MonitoringStatus = nil
		return
	case 22:
		r.NotificationChannel = nil
		return
	case 23:
		r.NotificationEffectLimit = nil
		return
	case 24:
		r.NotificationInterval = nil
		return
	case 25:
		r.OperatingUnitId = nil
		return
	case 26:
		r.OperatingUnitSubType = nil
		return
	case 27:
		r.OrderSupplier = nil
		return
	case 28:
		r.ProductionPercentage = nil
		return
	case 29:
		r.ReadyToBeInvoiced = nil
		return
	case 30:
		r.SerialNumber = nil
		return
	case 31:
		r.ShortTermSubscription = nil
		return
	case 32:
		r.Status = nil
		return
	case 33:
		r.SundryExpenceSalesId = nil
		return
	case 34:
		r.SupplementaryProductSalesId = nil
		return
	case 35:
		r.TariffSalesId = nil
		return
	case 36:
		r.TermNumber = nil
		return
	case 37:
		r.TermYear = nil
		return
	case 38:
		r.ThresholdValueSum = nil
		return
	case 39:
		r.ThresholdValueUpperLimit = nil
		return
	case 40:
		r.ToDate = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SalesOrder) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SalesOrder) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SalesOrder) HintSize(int)                     { panic("Unsupported operation") }
func (_ SalesOrder) Finalize()                        {}

func (_ SalesOrder) AvroCRC64Fingerprint() []byte {
	return []byte(SalesOrderAvroCRC64Fingerprint)
}

func (r SalesOrder) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ActorId"], err = json.Marshal(r.ActorId)
	if err != nil {
		return nil, err
	}
	output["Balance"], err = json.Marshal(r.Balance)
	if err != nil {
		return nil, err
	}
	output["BilledToDate"], err = json.Marshal(r.BilledToDate)
	if err != nil {
		return nil, err
	}
	output["BillingGroupId"], err = json.Marshal(r.BillingGroupId)
	if err != nil {
		return nil, err
	}
	output["BillingGroupTermId"], err = json.Marshal(r.BillingGroupTermId)
	if err != nil {
		return nil, err
	}
	output["BillingStatus"], err = json.Marshal(r.BillingStatus)
	if err != nil {
		return nil, err
	}
	output["BillingType"], err = json.Marshal(r.BillingType)
	if err != nil {
		return nil, err
	}
	output["ClosedForInvoicingChanges"], err = json.Marshal(r.ClosedForInvoicingChanges)
	if err != nil {
		return nil, err
	}
	output["ConsumptionCode"], err = json.Marshal(r.ConsumptionCode)
	if err != nil {
		return nil, err
	}
	output["Counters"], err = json.Marshal(r.Counters)
	if err != nil {
		return nil, err
	}
	output["DeliveryPointId"], err = json.Marshal(r.DeliveryPointId)
	if err != nil {
		return nil, err
	}
	output["DeliveryToDate"], err = json.Marshal(r.DeliveryToDate)
	if err != nil {
		return nil, err
	}
	output["FreeFieldsId"], err = json.Marshal(r.FreeFieldsId)
	if err != nil {
		return nil, err
	}
	output["FreePowerReflected"], err = json.Marshal(r.FreePowerReflected)
	if err != nil {
		return nil, err
	}
	output["FromDate"], err = json.Marshal(r.FromDate)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["IndustryCode"], err = json.Marshal(r.IndustryCode)
	if err != nil {
		return nil, err
	}
	output["InvoiceAgreementId"], err = json.Marshal(r.InvoiceAgreementId)
	if err != nil {
		return nil, err
	}
	output["ItemSalesId"], err = json.Marshal(r.ItemSalesId)
	if err != nil {
		return nil, err
	}
	output["LocationAddress"], err = json.Marshal(r.LocationAddress)
	if err != nil {
		return nil, err
	}
	output["MeterId"], err = json.Marshal(r.MeterId)
	if err != nil {
		return nil, err
	}
	output["MonitoringStatus"], err = json.Marshal(r.MonitoringStatus)
	if err != nil {
		return nil, err
	}
	output["NotificationChannel"], err = json.Marshal(r.NotificationChannel)
	if err != nil {
		return nil, err
	}
	output["NotificationEffectLimit"], err = json.Marshal(r.NotificationEffectLimit)
	if err != nil {
		return nil, err
	}
	output["NotificationInterval"], err = json.Marshal(r.NotificationInterval)
	if err != nil {
		return nil, err
	}
	output["OperatingUnitId"], err = json.Marshal(r.OperatingUnitId)
	if err != nil {
		return nil, err
	}
	output["OperatingUnitSubType"], err = json.Marshal(r.OperatingUnitSubType)
	if err != nil {
		return nil, err
	}
	output["OrderSupplier"], err = json.Marshal(r.OrderSupplier)
	if err != nil {
		return nil, err
	}
	output["ProductionPercentage"], err = json.Marshal(r.ProductionPercentage)
	if err != nil {
		return nil, err
	}
	output["ReadyToBeInvoiced"], err = json.Marshal(r.ReadyToBeInvoiced)
	if err != nil {
		return nil, err
	}
	output["SerialNumber"], err = json.Marshal(r.SerialNumber)
	if err != nil {
		return nil, err
	}
	output["ShortTermSubscription"], err = json.Marshal(r.ShortTermSubscription)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["SundryExpenceSalesId"], err = json.Marshal(r.SundryExpenceSalesId)
	if err != nil {
		return nil, err
	}
	output["SupplementaryProductSalesId"], err = json.Marshal(r.SupplementaryProductSalesId)
	if err != nil {
		return nil, err
	}
	output["TariffSalesId"], err = json.Marshal(r.TariffSalesId)
	if err != nil {
		return nil, err
	}
	output["TermNumber"], err = json.Marshal(r.TermNumber)
	if err != nil {
		return nil, err
	}
	output["TermYear"], err = json.Marshal(r.TermYear)
	if err != nil {
		return nil, err
	}
	output["ThresholdValueSum"], err = json.Marshal(r.ThresholdValueSum)
	if err != nil {
		return nil, err
	}
	output["ThresholdValueUpperLimit"], err = json.Marshal(r.ThresholdValueUpperLimit)
	if err != nil {
		return nil, err
	}
	output["ToDate"], err = json.Marshal(r.ToDate)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SalesOrder) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ActorId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ActorId); err != nil {
			return err
		}
	} else {
		r.ActorId = NewUnionNullString()

		r.ActorId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Balance"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Balance); err != nil {
			return err
		}
	} else {
		r.Balance = NewUnionNullMoney()

		r.Balance = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["BilledToDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BilledToDate); err != nil {
			return err
		}
	} else {
		r.BilledToDate = NewUnionNullString()

		r.BilledToDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["BillingGroupId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BillingGroupId); err != nil {
			return err
		}
	} else {
		r.BillingGroupId = NewUnionNullString()

		r.BillingGroupId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["BillingGroupTermId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BillingGroupTermId); err != nil {
			return err
		}
	} else {
		r.BillingGroupTermId = NewUnionNullString()

		r.BillingGroupTermId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["BillingStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BillingStatus); err != nil {
			return err
		}
	} else {
		r.BillingStatus = NewUnionNullBillingStatus()

		r.BillingStatus = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["BillingType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BillingType); err != nil {
			return err
		}
	} else {
		r.BillingType = NewUnionNullBillingType()

		r.BillingType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ClosedForInvoicingChanges"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClosedForInvoicingChanges); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ClosedForInvoicingChanges")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ConsumptionCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConsumptionCode); err != nil {
			return err
		}
	} else {
		r.ConsumptionCode = NewUnionNullConsumptionCode()

		r.ConsumptionCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Counters"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Counters); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Counters")
	}
	val = func() json.RawMessage {
		if v, ok := fields["DeliveryPointId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DeliveryPointId); err != nil {
			return err
		}
	} else {
		r.DeliveryPointId = NewUnionNullString()

		r.DeliveryPointId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DeliveryToDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DeliveryToDate); err != nil {
			return err
		}
	} else {
		r.DeliveryToDate = NewUnionNullString()

		r.DeliveryToDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FreeFieldsId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FreeFieldsId); err != nil {
			return err
		}
	} else {
		r.FreeFieldsId = NewUnionNullArrayString()

		r.FreeFieldsId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FreePowerReflected"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FreePowerReflected); err != nil {
			return err
		}
	} else {
		r.FreePowerReflected = NewUnionNullBool()

		r.FreePowerReflected = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FromDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FromDate); err != nil {
			return err
		}
	} else {
		r.FromDate = NewUnionNullString()

		r.FromDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IndustryCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IndustryCode); err != nil {
			return err
		}
	} else {
		r.IndustryCode = NewUnionNullIndustryCode()

		r.IndustryCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceAgreementId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceAgreementId); err != nil {
			return err
		}
	} else {
		r.InvoiceAgreementId = NewUnionNullString()

		r.InvoiceAgreementId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ItemSalesId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ItemSalesId); err != nil {
			return err
		}
	} else {
		r.ItemSalesId = NewUnionNullArrayString()

		r.ItemSalesId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LocationAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LocationAddress); err != nil {
			return err
		}
	} else {
		r.LocationAddress = NewUnionNullLocationAddress()

		r.LocationAddress = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeterId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeterId); err != nil {
			return err
		}
	} else {
		r.MeterId = NewUnionNullString()

		r.MeterId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MonitoringStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MonitoringStatus); err != nil {
			return err
		}
	} else {
		r.MonitoringStatus = NewUnionNullMonitoringStatus()

		r.MonitoringStatus = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NotificationChannel"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NotificationChannel); err != nil {
			return err
		}
	} else {
		r.NotificationChannel = NewUnionNullCommunicationChannelType()

		r.NotificationChannel = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NotificationEffectLimit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NotificationEffectLimit); err != nil {
			return err
		}
	} else {
		r.NotificationEffectLimit = NewUnionNullBytes()

		r.NotificationEffectLimit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NotificationInterval"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NotificationInterval); err != nil {
			return err
		}
	} else {
		r.NotificationInterval = NewUnionNullNotificationInterval()

		r.NotificationInterval = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OperatingUnitId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OperatingUnitId); err != nil {
			return err
		}
	} else {
		r.OperatingUnitId = NewUnionNullString()

		r.OperatingUnitId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OperatingUnitSubType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OperatingUnitSubType); err != nil {
			return err
		}
	} else {
		r.OperatingUnitSubType = NewUnionNullSalesOrderOperatingUnitSubType()

		r.OperatingUnitSubType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OrderSupplier"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrderSupplier); err != nil {
			return err
		}
	} else {
		r.OrderSupplier = NewUnionNullOrderSupplier()

		r.OrderSupplier = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ProductionPercentage"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProductionPercentage); err != nil {
			return err
		}
	} else {
		r.ProductionPercentage = NewUnionNullBytes()

		r.ProductionPercentage = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReadyToBeInvoiced"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReadyToBeInvoiced); err != nil {
			return err
		}
	} else {
		r.ReadyToBeInvoiced = NewUnionNullBool()

		r.ReadyToBeInvoiced = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SerialNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SerialNumber); err != nil {
			return err
		}
	} else {
		r.SerialNumber = NewUnionNullInt()

		r.SerialNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ShortTermSubscription"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ShortTermSubscription); err != nil {
			return err
		}
	} else {
		r.ShortTermSubscription = NewUnionNullString()

		r.ShortTermSubscription = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		r.Status = NewUnionNullSalesOrderStatus()

		r.Status = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SundryExpenceSalesId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SundryExpenceSalesId); err != nil {
			return err
		}
	} else {
		r.SundryExpenceSalesId = NewUnionNullArrayString()

		r.SundryExpenceSalesId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SupplementaryProductSalesId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SupplementaryProductSalesId); err != nil {
			return err
		}
	} else {
		r.SupplementaryProductSalesId = NewUnionNullArrayString()

		r.SupplementaryProductSalesId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TariffSalesId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TariffSalesId); err != nil {
			return err
		}
	} else {
		r.TariffSalesId = NewUnionNullArrayString()

		r.TariffSalesId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TermNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TermNumber); err != nil {
			return err
		}
	} else {
		r.TermNumber = NewUnionNullInt()

		r.TermNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TermYear"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TermYear); err != nil {
			return err
		}
	} else {
		r.TermYear = NewUnionNullInt()

		r.TermYear = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ThresholdValueSum"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ThresholdValueSum); err != nil {
			return err
		}
	} else {
		r.ThresholdValueSum = NewUnionNullMoney()

		r.ThresholdValueSum = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ThresholdValueUpperLimit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ThresholdValueUpperLimit); err != nil {
			return err
		}
	} else {
		r.ThresholdValueUpperLimit = NewUnionNullMoney()

		r.ThresholdValueUpperLimit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ToDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ToDate); err != nil {
			return err
		}
	} else {
		r.ToDate = NewUnionNullString()

		r.ToDate = nil
	}
	return nil
}
