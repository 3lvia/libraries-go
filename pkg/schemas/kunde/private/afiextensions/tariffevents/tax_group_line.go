// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100444_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TaxGroupLine struct {
	Formula *UnionNullString `json:"Formula"`

	LineNumber *UnionNullInt `json:"LineNumber"`

	ParameterLabel *UnionNullString `json:"ParameterLabel"`

	ParameterNumber *UnionNullInt `json:"ParameterNumber"`

	PercentOfTheBasis *UnionNullFloat `json:"PercentOfTheBasis"`

	PriceCode *UnionNullString `json:"PriceCode"`

	StandardPriceId *UnionNullInt `json:"StandardPriceId"`

	TaxGroupId *UnionNullString `json:"TaxGroupId"`

	TaxGroupPrices *UnionNullArrayTaxGroupPrice `json:"TaxGroupPrices"`

	VatId *UnionNullString `json:"VatId"`
}

const TaxGroupLineAvroCRC64Fingerprint = "\xc1‡∏Å\xe7\x06\x8d\x82"

func NewTaxGroupLine() TaxGroupLine {
	r := TaxGroupLine{}
	r.Formula = nil
	r.LineNumber = nil
	r.ParameterLabel = nil
	r.ParameterNumber = nil
	r.PercentOfTheBasis = nil
	r.PriceCode = nil
	r.StandardPriceId = nil
	r.TaxGroupId = nil
	r.TaxGroupPrices = nil
	r.VatId = nil
	return r
}

func DeserializeTaxGroupLine(r io.Reader) (TaxGroupLine, error) {
	t := NewTaxGroupLine()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTaxGroupLineFromSchema(r io.Reader, schema string) (TaxGroupLine, error) {
	t := NewTaxGroupLine()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTaxGroupLine(r TaxGroupLine, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Formula, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.LineNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ParameterLabel, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.ParameterNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFloat(r.PercentOfTheBasis, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PriceCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.StandardPriceId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TaxGroupId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayTaxGroupPrice(r.TaxGroupPrices, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.VatId, w)
	if err != nil {
		return err
	}
	return err
}

func (r TaxGroupLine) Serialize(w io.Writer) error {
	return writeTaxGroupLine(r, w)
}

func (r TaxGroupLine) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Formula\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LineNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ParameterLabel\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ParameterNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PercentOfTheBasis\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"PriceCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StandardPriceId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"TaxGroupId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxGroupPrices\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"AlternativaTaxGroupPrice\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]},{\"default\":null,\"name\":\"FromDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LimitValue\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"LineNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Price\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]}],\"name\":\"TaxGroupPrice\",\"type\":\"record\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"VatId\",\"type\":[\"null\",\"string\"]}],\"name\":\"Afiextensions.Schemas.TariffEvents.V1.TaxGroupLine\",\"type\":\"record\"}"
}

func (r TaxGroupLine) SchemaName() string {
	return "Afiextensions.Schemas.TariffEvents.V1.TaxGroupLine"
}

func (_ TaxGroupLine) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TaxGroupLine) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TaxGroupLine) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TaxGroupLine) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TaxGroupLine) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TaxGroupLine) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TaxGroupLine) SetString(v string)   { panic("Unsupported operation") }
func (_ TaxGroupLine) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TaxGroupLine) Get(i int) types.Field {
	switch i {
	case 0:
		r.Formula = NewUnionNullString()

		return r.Formula
	case 1:
		r.LineNumber = NewUnionNullInt()

		return r.LineNumber
	case 2:
		r.ParameterLabel = NewUnionNullString()

		return r.ParameterLabel
	case 3:
		r.ParameterNumber = NewUnionNullInt()

		return r.ParameterNumber
	case 4:
		r.PercentOfTheBasis = NewUnionNullFloat()

		return r.PercentOfTheBasis
	case 5:
		r.PriceCode = NewUnionNullString()

		return r.PriceCode
	case 6:
		r.StandardPriceId = NewUnionNullInt()

		return r.StandardPriceId
	case 7:
		r.TaxGroupId = NewUnionNullString()

		return r.TaxGroupId
	case 8:
		r.TaxGroupPrices = NewUnionNullArrayTaxGroupPrice()

		return r.TaxGroupPrices
	case 9:
		r.VatId = NewUnionNullString()

		return r.VatId
	}
	panic("Unknown field index")
}

func (r *TaxGroupLine) SetDefault(i int) {
	switch i {
	case 0:
		r.Formula = nil
		return
	case 1:
		r.LineNumber = nil
		return
	case 2:
		r.ParameterLabel = nil
		return
	case 3:
		r.ParameterNumber = nil
		return
	case 4:
		r.PercentOfTheBasis = nil
		return
	case 5:
		r.PriceCode = nil
		return
	case 6:
		r.StandardPriceId = nil
		return
	case 7:
		r.TaxGroupId = nil
		return
	case 8:
		r.TaxGroupPrices = nil
		return
	case 9:
		r.VatId = nil
		return
	}
	panic("Unknown field index")
}

func (r *TaxGroupLine) NullField(i int) {
	switch i {
	case 0:
		r.Formula = nil
		return
	case 1:
		r.LineNumber = nil
		return
	case 2:
		r.ParameterLabel = nil
		return
	case 3:
		r.ParameterNumber = nil
		return
	case 4:
		r.PercentOfTheBasis = nil
		return
	case 5:
		r.PriceCode = nil
		return
	case 6:
		r.StandardPriceId = nil
		return
	case 7:
		r.TaxGroupId = nil
		return
	case 8:
		r.TaxGroupPrices = nil
		return
	case 9:
		r.VatId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TaxGroupLine) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TaxGroupLine) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TaxGroupLine) HintSize(int)                     { panic("Unsupported operation") }
func (_ TaxGroupLine) Finalize()                        {}

func (_ TaxGroupLine) AvroCRC64Fingerprint() []byte {
	return []byte(TaxGroupLineAvroCRC64Fingerprint)
}

func (r TaxGroupLine) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Formula"], err = json.Marshal(r.Formula)
	if err != nil {
		return nil, err
	}
	output["LineNumber"], err = json.Marshal(r.LineNumber)
	if err != nil {
		return nil, err
	}
	output["ParameterLabel"], err = json.Marshal(r.ParameterLabel)
	if err != nil {
		return nil, err
	}
	output["ParameterNumber"], err = json.Marshal(r.ParameterNumber)
	if err != nil {
		return nil, err
	}
	output["PercentOfTheBasis"], err = json.Marshal(r.PercentOfTheBasis)
	if err != nil {
		return nil, err
	}
	output["PriceCode"], err = json.Marshal(r.PriceCode)
	if err != nil {
		return nil, err
	}
	output["StandardPriceId"], err = json.Marshal(r.StandardPriceId)
	if err != nil {
		return nil, err
	}
	output["TaxGroupId"], err = json.Marshal(r.TaxGroupId)
	if err != nil {
		return nil, err
	}
	output["TaxGroupPrices"], err = json.Marshal(r.TaxGroupPrices)
	if err != nil {
		return nil, err
	}
	output["VatId"], err = json.Marshal(r.VatId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TaxGroupLine) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Formula"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Formula); err != nil {
			return err
		}
	} else {
		r.Formula = NewUnionNullString()

		r.Formula = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LineNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LineNumber); err != nil {
			return err
		}
	} else {
		r.LineNumber = NewUnionNullInt()

		r.LineNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ParameterLabel"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ParameterLabel); err != nil {
			return err
		}
	} else {
		r.ParameterLabel = NewUnionNullString()

		r.ParameterLabel = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ParameterNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ParameterNumber); err != nil {
			return err
		}
	} else {
		r.ParameterNumber = NewUnionNullInt()

		r.ParameterNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PercentOfTheBasis"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PercentOfTheBasis); err != nil {
			return err
		}
	} else {
		r.PercentOfTheBasis = NewUnionNullFloat()

		r.PercentOfTheBasis = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PriceCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PriceCode); err != nil {
			return err
		}
	} else {
		r.PriceCode = NewUnionNullString()

		r.PriceCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StandardPriceId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StandardPriceId); err != nil {
			return err
		}
	} else {
		r.StandardPriceId = NewUnionNullInt()

		r.StandardPriceId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TaxGroupId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TaxGroupId); err != nil {
			return err
		}
	} else {
		r.TaxGroupId = NewUnionNullString()

		r.TaxGroupId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TaxGroupPrices"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TaxGroupPrices); err != nil {
			return err
		}
	} else {
		r.TaxGroupPrices = NewUnionNullArrayTaxGroupPrice()

		r.TaxGroupPrices = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["VatId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VatId); err != nil {
			return err
		}
	} else {
		r.VatId = NewUnionNullString()

		r.VatId = nil
	}
	return nil
}
