// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100444_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EnovaFee struct {
	Fee Bytes `json:"Fee"`

	Type EnovaFeeType `json:"Type"`
}

const EnovaFeeAvroCRC64Fingerprint = "\xef?\xb0\x97\xb1\xa5N\xa5"

func NewEnovaFee() EnovaFee {
	r := EnovaFee{}
	return r
}

func DeserializeEnovaFee(r io.Reader) (EnovaFee, error) {
	t := NewEnovaFee()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnovaFeeFromSchema(r io.Reader, schema string) (EnovaFee, error) {
	t := NewEnovaFee()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnovaFee(r EnovaFee, w io.Writer) error {
	var err error
	err = vm.WriteBytes(r.Fee, w)
	if err != nil {
		return err
	}
	err = writeEnovaFeeType(r.Type, w)
	if err != nil {
		return err
	}
	return err
}

func (r EnovaFee) Serialize(w io.Writer) error {
	return writeEnovaFee(r, w)
}

func (r EnovaFee) Schema() string {
	return "{\"fields\":[{\"name\":\"Fee\",\"type\":{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}},{\"name\":\"Type\",\"type\":{\"name\":\"EnovaFeeType\",\"symbols\":[\"Fixed\",\"ConsumptionDependent\"],\"type\":\"enum\"}}],\"name\":\"Afiextensions.Schemas.TariffEvents.V1.EnovaFee\",\"type\":\"record\"}"
}

func (r EnovaFee) SchemaName() string {
	return "Afiextensions.Schemas.TariffEvents.V1.EnovaFee"
}

func (_ EnovaFee) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EnovaFee) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EnovaFee) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EnovaFee) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EnovaFee) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EnovaFee) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EnovaFee) SetString(v string)   { panic("Unsupported operation") }
func (_ EnovaFee) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EnovaFee) Get(i int) types.Field {
	switch i {
	case 0:
		w := BytesWrapper{Target: &r.Fee}

		return w

	case 1:
		w := EnovaFeeTypeWrapper{Target: &r.Type}

		return w

	}
	panic("Unknown field index")
}

func (r *EnovaFee) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EnovaFee) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ EnovaFee) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EnovaFee) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EnovaFee) HintSize(int)                     { panic("Unsupported operation") }
func (_ EnovaFee) Finalize()                        {}

func (_ EnovaFee) AvroCRC64Fingerprint() []byte {
	return []byte(EnovaFeeAvroCRC64Fingerprint)
}

func (r EnovaFee) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Fee"], err = json.Marshal(r.Fee)
	if err != nil {
		return nil, err
	}
	output["Type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EnovaFee) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Fee"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fee); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Fee")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Type")
	}
	return nil
}
