// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100444_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TaxGroupPrice struct {
	AlternativaTaxGroupPrice *UnionNullBytes `json:"AlternativaTaxGroupPrice"`

	FromDate *UnionNullLong `json:"FromDate"`

	Id *UnionNullString `json:"Id"`

	LimitValue *UnionNullInt `json:"LimitValue"`

	LineNumber *UnionNullInt `json:"LineNumber"`

	Price *UnionNullBytes `json:"Price"`
}

const TaxGroupPriceAvroCRC64Fingerprint = "#\xcev}\xf1N\xda\xed"

func NewTaxGroupPrice() TaxGroupPrice {
	r := TaxGroupPrice{}
	r.AlternativaTaxGroupPrice = nil
	r.FromDate = nil
	r.Id = nil
	r.LimitValue = nil
	r.LineNumber = nil
	r.Price = nil
	return r
}

func DeserializeTaxGroupPrice(r io.Reader) (TaxGroupPrice, error) {
	t := NewTaxGroupPrice()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTaxGroupPriceFromSchema(r io.Reader, schema string) (TaxGroupPrice, error) {
	t := NewTaxGroupPrice()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTaxGroupPrice(r TaxGroupPrice, w io.Writer) error {
	var err error
	err = writeUnionNullBytes(r.AlternativaTaxGroupPrice, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.FromDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.LimitValue, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.LineNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBytes(r.Price, w)
	if err != nil {
		return err
	}
	return err
}

func (r TaxGroupPrice) Serialize(w io.Writer) error {
	return writeTaxGroupPrice(r, w)
}

func (r TaxGroupPrice) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"AlternativaTaxGroupPrice\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]},{\"default\":null,\"name\":\"FromDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LimitValue\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"LineNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Price\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]}],\"name\":\"Afiextensions.Schemas.TariffEvents.V1.TaxGroupPrice\",\"type\":\"record\"}"
}

func (r TaxGroupPrice) SchemaName() string {
	return "Afiextensions.Schemas.TariffEvents.V1.TaxGroupPrice"
}

func (_ TaxGroupPrice) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TaxGroupPrice) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TaxGroupPrice) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TaxGroupPrice) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TaxGroupPrice) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TaxGroupPrice) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TaxGroupPrice) SetString(v string)   { panic("Unsupported operation") }
func (_ TaxGroupPrice) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TaxGroupPrice) Get(i int) types.Field {
	switch i {
	case 0:
		r.AlternativaTaxGroupPrice = NewUnionNullBytes()

		return r.AlternativaTaxGroupPrice
	case 1:
		r.FromDate = NewUnionNullLong()

		return r.FromDate
	case 2:
		r.Id = NewUnionNullString()

		return r.Id
	case 3:
		r.LimitValue = NewUnionNullInt()

		return r.LimitValue
	case 4:
		r.LineNumber = NewUnionNullInt()

		return r.LineNumber
	case 5:
		r.Price = NewUnionNullBytes()

		return r.Price
	}
	panic("Unknown field index")
}

func (r *TaxGroupPrice) SetDefault(i int) {
	switch i {
	case 0:
		r.AlternativaTaxGroupPrice = nil
		return
	case 1:
		r.FromDate = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.LimitValue = nil
		return
	case 4:
		r.LineNumber = nil
		return
	case 5:
		r.Price = nil
		return
	}
	panic("Unknown field index")
}

func (r *TaxGroupPrice) NullField(i int) {
	switch i {
	case 0:
		r.AlternativaTaxGroupPrice = nil
		return
	case 1:
		r.FromDate = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.LimitValue = nil
		return
	case 4:
		r.LineNumber = nil
		return
	case 5:
		r.Price = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TaxGroupPrice) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TaxGroupPrice) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TaxGroupPrice) HintSize(int)                     { panic("Unsupported operation") }
func (_ TaxGroupPrice) Finalize()                        {}

func (_ TaxGroupPrice) AvroCRC64Fingerprint() []byte {
	return []byte(TaxGroupPriceAvroCRC64Fingerprint)
}

func (r TaxGroupPrice) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AlternativaTaxGroupPrice"], err = json.Marshal(r.AlternativaTaxGroupPrice)
	if err != nil {
		return nil, err
	}
	output["FromDate"], err = json.Marshal(r.FromDate)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["LimitValue"], err = json.Marshal(r.LimitValue)
	if err != nil {
		return nil, err
	}
	output["LineNumber"], err = json.Marshal(r.LineNumber)
	if err != nil {
		return nil, err
	}
	output["Price"], err = json.Marshal(r.Price)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TaxGroupPrice) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AlternativaTaxGroupPrice"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AlternativaTaxGroupPrice); err != nil {
			return err
		}
	} else {
		r.AlternativaTaxGroupPrice = NewUnionNullBytes()

		r.AlternativaTaxGroupPrice = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FromDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FromDate); err != nil {
			return err
		}
	} else {
		r.FromDate = NewUnionNullLong()

		r.FromDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LimitValue"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LimitValue); err != nil {
			return err
		}
	} else {
		r.LimitValue = NewUnionNullInt()

		r.LimitValue = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LineNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LineNumber); err != nil {
			return err
		}
	} else {
		r.LineNumber = NewUnionNullInt()

		r.LineNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Price"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Price); err != nil {
			return err
		}
	} else {
		r.Price = NewUnionNullBytes()

		r.Price = nil
	}
	return nil
}
