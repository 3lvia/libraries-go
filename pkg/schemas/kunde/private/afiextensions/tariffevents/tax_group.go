// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100444_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TaxGroup struct {
	Description string `json:"Description"`

	TaxGroupId string `json:"TaxGroupId"`

	TaxGroupLines []TaxGroupLine `json:"TaxGroupLines"`
}

const TaxGroupAvroCRC64Fingerprint = "\x03R \xf7l@\b+"

func NewTaxGroup() TaxGroup {
	r := TaxGroup{}
	r.TaxGroupLines = make([]TaxGroupLine, 0)

	return r
}

func DeserializeTaxGroup(r io.Reader) (TaxGroup, error) {
	t := NewTaxGroup()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTaxGroupFromSchema(r io.Reader, schema string) (TaxGroup, error) {
	t := NewTaxGroup()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTaxGroup(r TaxGroup, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Description, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.TaxGroupId, w)
	if err != nil {
		return err
	}
	err = writeArrayTaxGroupLine(r.TaxGroupLines, w)
	if err != nil {
		return err
	}
	return err
}

func (r TaxGroup) Serialize(w io.Writer) error {
	return writeTaxGroup(r, w)
}

func (r TaxGroup) Schema() string {
	return "{\"fields\":[{\"name\":\"Description\",\"type\":\"string\"},{\"name\":\"TaxGroupId\",\"type\":\"string\"},{\"name\":\"TaxGroupLines\",\"type\":{\"items\":{\"fields\":[{\"default\":null,\"name\":\"Formula\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LineNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ParameterLabel\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ParameterNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PercentOfTheBasis\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"PriceCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StandardPriceId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"TaxGroupId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxGroupPrices\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"AlternativaTaxGroupPrice\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]},{\"default\":null,\"name\":\"FromDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LimitValue\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"LineNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Price\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]}],\"name\":\"TaxGroupPrice\",\"type\":\"record\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"VatId\",\"type\":[\"null\",\"string\"]}],\"name\":\"TaxGroupLine\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"Afiextensions.Schemas.TariffEvents.V1.TaxGroup\",\"type\":\"record\"}"
}

func (r TaxGroup) SchemaName() string {
	return "Afiextensions.Schemas.TariffEvents.V1.TaxGroup"
}

func (_ TaxGroup) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TaxGroup) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TaxGroup) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TaxGroup) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TaxGroup) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TaxGroup) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TaxGroup) SetString(v string)   { panic("Unsupported operation") }
func (_ TaxGroup) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TaxGroup) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Description}

		return w

	case 1:
		w := types.String{Target: &r.TaxGroupId}

		return w

	case 2:
		r.TaxGroupLines = make([]TaxGroupLine, 0)

		w := ArrayTaxGroupLineWrapper{Target: &r.TaxGroupLines}

		return w

	}
	panic("Unknown field index")
}

func (r *TaxGroup) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *TaxGroup) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ TaxGroup) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TaxGroup) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TaxGroup) HintSize(int)                     { panic("Unsupported operation") }
func (_ TaxGroup) Finalize()                        {}

func (_ TaxGroup) AvroCRC64Fingerprint() []byte {
	return []byte(TaxGroupAvroCRC64Fingerprint)
}

func (r TaxGroup) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["TaxGroupId"], err = json.Marshal(r.TaxGroupId)
	if err != nil {
		return nil, err
	}
	output["TaxGroupLines"], err = json.Marshal(r.TaxGroupLines)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TaxGroup) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Description")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TaxGroupId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TaxGroupId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TaxGroupId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TaxGroupLines"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TaxGroupLines); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TaxGroupLines")
	}
	return nil
}
