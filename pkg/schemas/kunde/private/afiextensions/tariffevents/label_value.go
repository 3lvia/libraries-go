// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100444_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type LabelValue struct {
	Field string `json:"Field"`

	Label string `json:"Label"`

	Value string `json:"Value"`
}

const LabelValueAvroCRC64Fingerprint = "\x7f\x89\x8dp\xf3\x82\xa6\xd1"

func NewLabelValue() LabelValue {
	r := LabelValue{}
	return r
}

func DeserializeLabelValue(r io.Reader) (LabelValue, error) {
	t := NewLabelValue()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLabelValueFromSchema(r io.Reader, schema string) (LabelValue, error) {
	t := NewLabelValue()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLabelValue(r LabelValue, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Field, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Label, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r LabelValue) Serialize(w io.Writer) error {
	return writeLabelValue(r, w)
}

func (r LabelValue) Schema() string {
	return "{\"fields\":[{\"name\":\"Field\",\"type\":\"string\"},{\"name\":\"Label\",\"type\":\"string\"},{\"name\":\"Value\",\"type\":\"string\"}],\"name\":\"Afiextensions.Schemas.TariffEvents.V1.LabelValue\",\"type\":\"record\"}"
}

func (r LabelValue) SchemaName() string {
	return "Afiextensions.Schemas.TariffEvents.V1.LabelValue"
}

func (_ LabelValue) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LabelValue) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LabelValue) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LabelValue) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LabelValue) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LabelValue) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LabelValue) SetString(v string)   { panic("Unsupported operation") }
func (_ LabelValue) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LabelValue) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Field}

		return w

	case 1:
		w := types.String{Target: &r.Label}

		return w

	case 2:
		w := types.String{Target: &r.Value}

		return w

	}
	panic("Unknown field index")
}

func (r *LabelValue) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *LabelValue) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ LabelValue) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ LabelValue) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ LabelValue) HintSize(int)                     { panic("Unsupported operation") }
func (_ LabelValue) Finalize()                        {}

func (_ LabelValue) AvroCRC64Fingerprint() []byte {
	return []byte(LabelValueAvroCRC64Fingerprint)
}

func (r LabelValue) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Field"], err = json.Marshal(r.Field)
	if err != nil {
		return nil, err
	}
	output["Label"], err = json.Marshal(r.Label)
	if err != nil {
		return nil, err
	}
	output["Value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LabelValue) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Field"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Field); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Field")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Label"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Label); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Label")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Value")
	}
	return nil
}
