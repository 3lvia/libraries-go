// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100444_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullTaxGroupTypeEnum int

const (
	UnionNullTaxGroupTypeEnumTaxGroup UnionNullTaxGroupTypeEnum = 1
)

type UnionNullTaxGroup struct {
	Null      *types.NullVal
	TaxGroup  TaxGroup
	UnionType UnionNullTaxGroupTypeEnum
}

func writeUnionNullTaxGroup(r *UnionNullTaxGroup, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullTaxGroupTypeEnumTaxGroup:
		return writeTaxGroup(r.TaxGroup, w)
	}
	return fmt.Errorf("invalid value for *UnionNullTaxGroup")
}

func NewUnionNullTaxGroup() *UnionNullTaxGroup {
	return &UnionNullTaxGroup{}
}

func (r *UnionNullTaxGroup) Serialize(w io.Writer) error {
	return writeUnionNullTaxGroup(r, w)
}

func DeserializeUnionNullTaxGroup(r io.Reader) (*UnionNullTaxGroup, error) {
	t := NewUnionNullTaxGroup()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullTaxGroupFromSchema(r io.Reader, schema string) (*UnionNullTaxGroup, error) {
	t := NewUnionNullTaxGroup()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullTaxGroup) Schema() string {
	return "[\"null\",{\"fields\":[{\"name\":\"Description\",\"type\":\"string\"},{\"name\":\"TaxGroupId\",\"type\":\"string\"},{\"name\":\"TaxGroupLines\",\"type\":{\"items\":{\"fields\":[{\"default\":null,\"name\":\"Formula\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LineNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ParameterLabel\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ParameterNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PercentOfTheBasis\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"PriceCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StandardPriceId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"TaxGroupId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TaxGroupPrices\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"AlternativaTaxGroupPrice\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]},{\"default\":null,\"name\":\"FromDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LimitValue\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"LineNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Price\",\"type\":[\"null\",{\"logicalType\":\"decimal\",\"precision\":29,\"scale\":14,\"type\":\"bytes\"}]}],\"name\":\"TaxGroupPrice\",\"type\":\"record\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"VatId\",\"type\":[\"null\",\"string\"]}],\"name\":\"TaxGroupLine\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"TaxGroup\",\"type\":\"record\"}]"
}

func (_ *UnionNullTaxGroup) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullTaxGroup) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullTaxGroup) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullTaxGroup) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullTaxGroup) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullTaxGroup) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullTaxGroup) SetLong(v int64) {

	r.UnionType = (UnionNullTaxGroupTypeEnum)(v)
}

func (r *UnionNullTaxGroup) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.TaxGroup = NewTaxGroup()
		return &types.Record{Target: (&r.TaxGroup)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullTaxGroup) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullTaxGroup) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullTaxGroup) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullTaxGroup) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullTaxGroup) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullTaxGroup) Finalize()                        {}

func (r *UnionNullTaxGroup) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullTaxGroupTypeEnumTaxGroup:
		return json.Marshal(map[string]interface{}{"Afiextensions.Schemas.TariffEvents.V1.TaxGroup": r.TaxGroup})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullTaxGroup")
}

func (r *UnionNullTaxGroup) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Afiextensions.Schemas.TariffEvents.V1.TaxGroup"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.TaxGroup)
	}
	return fmt.Errorf("invalid value for *UnionNullTaxGroup")
}
