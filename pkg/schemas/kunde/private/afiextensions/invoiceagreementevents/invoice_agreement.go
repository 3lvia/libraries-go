// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100398_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type InvoiceAgreement struct {
	AccountDistributionInformation *UnionNullString `json:"AccountDistributionInformation"`

	AccountName *UnionNullString `json:"AccountName"`

	AccountNumber *UnionNullString `json:"AccountNumber"`

	ActorId *UnionNullString `json:"ActorId"`

	Address *UnionNullString `json:"Address"`

	AgreementDate *UnionNullString `json:"AgreementDate"`

	AlternativeInvoicingAddressStatus *UnionNullString `json:"AlternativeInvoicingAddressStatus"`

	BillingAddress *UnionNullBillingAddress `json:"BillingAddress"`

	Cid *UnionNullString `json:"Cid"`

	DaysUntilDueDate *UnionNullInt `json:"DaysUntilDueDate"`

	Description *UnionNullString `json:"Description"`

	DueDate *UnionNullInt `json:"DueDate"`

	DunningGroup *UnionNullInt `json:"DunningGroup"`

	FormCode *UnionNullString `json:"FormCode"`

	FormType *UnionNullFormType `json:"FormType"`

	Id *UnionNullString `json:"Id"`

	InterestGraceDays *UnionNullInt `json:"InterestGraceDays"`

	InterestRate float64 `json:"InterestRate"`

	InvoiceAgreementCategoryId *UnionNullString `json:"InvoiceAgreementCategoryId"`

	InvoiceIssuerSupplementaryProduct *UnionNullInt `json:"InvoiceIssuerSupplementaryProduct"`

	InvoiceIssuerTariff *UnionNullString `json:"InvoiceIssuerTariff"`

	InvoiceLabel *UnionNullString `json:"InvoiceLabel"`

	InvoiceLabelFrom *UnionNullString `json:"InvoiceLabelFrom"`

	InvoiceLabelTo *UnionNullString `json:"InvoiceLabelTo"`

	SendingMethod *UnionNullString `json:"SendingMethod"`

	Type *UnionNullInvoiceAgreementType `json:"Type"`
}

const InvoiceAgreementAvroCRC64Fingerprint = "\x02\xe5\x84OWzR\""

func NewInvoiceAgreement() InvoiceAgreement {
	r := InvoiceAgreement{}
	r.AccountDistributionInformation = nil
	r.AccountName = nil
	r.AccountNumber = nil
	r.ActorId = nil
	r.Address = nil
	r.AgreementDate = nil
	r.AlternativeInvoicingAddressStatus = nil
	r.BillingAddress = nil
	r.Cid = nil
	r.DaysUntilDueDate = nil
	r.Description = nil
	r.DueDate = nil
	r.DunningGroup = nil
	r.FormCode = nil
	r.FormType = nil
	r.Id = nil
	r.InterestGraceDays = nil
	r.InvoiceAgreementCategoryId = nil
	r.InvoiceIssuerSupplementaryProduct = nil
	r.InvoiceIssuerTariff = nil
	r.InvoiceLabel = nil
	r.InvoiceLabelFrom = nil
	r.InvoiceLabelTo = nil
	r.SendingMethod = nil
	r.Type = nil
	return r
}

func DeserializeInvoiceAgreement(r io.Reader) (InvoiceAgreement, error) {
	t := NewInvoiceAgreement()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInvoiceAgreementFromSchema(r io.Reader, schema string) (InvoiceAgreement, error) {
	t := NewInvoiceAgreement()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInvoiceAgreement(r InvoiceAgreement, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.AccountDistributionInformation, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AccountName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AccountNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ActorId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Address, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AgreementDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AlternativeInvoicingAddressStatus, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBillingAddress(r.BillingAddress, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cid, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.DaysUntilDueDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.DueDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.DunningGroup, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FormCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullFormType(r.FormType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.InterestGraceDays, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.InterestRate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InvoiceAgreementCategoryId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.InvoiceIssuerSupplementaryProduct, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InvoiceIssuerTariff, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InvoiceLabel, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InvoiceLabelFrom, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InvoiceLabelTo, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SendingMethod, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInvoiceAgreementType(r.Type, w)
	if err != nil {
		return err
	}
	return err
}

func (r InvoiceAgreement) Serialize(w io.Writer) error {
	return writeInvoiceAgreement(r, w)
}

func (r InvoiceAgreement) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"AccountDistributionInformation\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AccountName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AccountNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ActorId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Address\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AgreementDate\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AlternativeInvoicingAddressStatus\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"BillingAddress\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Address\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Address2\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AddressOrigin\",\"type\":[\"null\",{\"name\":\"AddressOriginType\",\"symbols\":[\"ActorAddress\",\"OtherPayer\",\"InvoiceAddress\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"City\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Country\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name2\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ZipCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"BillingAddress\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Cid\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DaysUntilDueDate\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"DueDate\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"DunningGroup\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"FormCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FormType\",\"type\":[\"null\",{\"name\":\"FormType\",\"symbols\":[\"Bankgiro\",\"Avtalegiro\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"InterestGraceDays\",\"type\":[\"null\",\"int\"]},{\"name\":\"InterestRate\",\"type\":\"double\"},{\"default\":null,\"name\":\"InvoiceAgreementCategoryId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"InvoiceIssuerSupplementaryProduct\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"InvoiceIssuerTariff\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"InvoiceLabel\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"InvoiceLabelFrom\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"InvoiceLabelTo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SendingMethod\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Type\",\"type\":[\"null\",{\"name\":\"InvoiceAgreementType\",\"symbols\":[\"InvoiceAgreement\",\"InvoiceAgreementDeliverypoint\",\"PaymentDocumentAgreement\",\"AdvanceAccount\"],\"type\":\"enum\"}]}],\"name\":\"Afiextensions.Schemas.InvoiceAgreementEvents.V1.InvoiceAgreement\",\"type\":\"record\"}"
}

func (r InvoiceAgreement) SchemaName() string {
	return "Afiextensions.Schemas.InvoiceAgreementEvents.V1.InvoiceAgreement"
}

func (_ InvoiceAgreement) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ InvoiceAgreement) SetInt(v int32)       { panic("Unsupported operation") }
func (_ InvoiceAgreement) SetLong(v int64)      { panic("Unsupported operation") }
func (_ InvoiceAgreement) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ InvoiceAgreement) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ InvoiceAgreement) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ InvoiceAgreement) SetString(v string)   { panic("Unsupported operation") }
func (_ InvoiceAgreement) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *InvoiceAgreement) Get(i int) types.Field {
	switch i {
	case 0:
		r.AccountDistributionInformation = NewUnionNullString()

		return r.AccountDistributionInformation
	case 1:
		r.AccountName = NewUnionNullString()

		return r.AccountName
	case 2:
		r.AccountNumber = NewUnionNullString()

		return r.AccountNumber
	case 3:
		r.ActorId = NewUnionNullString()

		return r.ActorId
	case 4:
		r.Address = NewUnionNullString()

		return r.Address
	case 5:
		r.AgreementDate = NewUnionNullString()

		return r.AgreementDate
	case 6:
		r.AlternativeInvoicingAddressStatus = NewUnionNullString()

		return r.AlternativeInvoicingAddressStatus
	case 7:
		r.BillingAddress = NewUnionNullBillingAddress()

		return r.BillingAddress
	case 8:
		r.Cid = NewUnionNullString()

		return r.Cid
	case 9:
		r.DaysUntilDueDate = NewUnionNullInt()

		return r.DaysUntilDueDate
	case 10:
		r.Description = NewUnionNullString()

		return r.Description
	case 11:
		r.DueDate = NewUnionNullInt()

		return r.DueDate
	case 12:
		r.DunningGroup = NewUnionNullInt()

		return r.DunningGroup
	case 13:
		r.FormCode = NewUnionNullString()

		return r.FormCode
	case 14:
		r.FormType = NewUnionNullFormType()

		return r.FormType
	case 15:
		r.Id = NewUnionNullString()

		return r.Id
	case 16:
		r.InterestGraceDays = NewUnionNullInt()

		return r.InterestGraceDays
	case 17:
		w := types.Double{Target: &r.InterestRate}

		return w

	case 18:
		r.InvoiceAgreementCategoryId = NewUnionNullString()

		return r.InvoiceAgreementCategoryId
	case 19:
		r.InvoiceIssuerSupplementaryProduct = NewUnionNullInt()

		return r.InvoiceIssuerSupplementaryProduct
	case 20:
		r.InvoiceIssuerTariff = NewUnionNullString()

		return r.InvoiceIssuerTariff
	case 21:
		r.InvoiceLabel = NewUnionNullString()

		return r.InvoiceLabel
	case 22:
		r.InvoiceLabelFrom = NewUnionNullString()

		return r.InvoiceLabelFrom
	case 23:
		r.InvoiceLabelTo = NewUnionNullString()

		return r.InvoiceLabelTo
	case 24:
		r.SendingMethod = NewUnionNullString()

		return r.SendingMethod
	case 25:
		r.Type = NewUnionNullInvoiceAgreementType()

		return r.Type
	}
	panic("Unknown field index")
}

func (r *InvoiceAgreement) SetDefault(i int) {
	switch i {
	case 0:
		r.AccountDistributionInformation = nil
		return
	case 1:
		r.AccountName = nil
		return
	case 2:
		r.AccountNumber = nil
		return
	case 3:
		r.ActorId = nil
		return
	case 4:
		r.Address = nil
		return
	case 5:
		r.AgreementDate = nil
		return
	case 6:
		r.AlternativeInvoicingAddressStatus = nil
		return
	case 7:
		r.BillingAddress = nil
		return
	case 8:
		r.Cid = nil
		return
	case 9:
		r.DaysUntilDueDate = nil
		return
	case 10:
		r.Description = nil
		return
	case 11:
		r.DueDate = nil
		return
	case 12:
		r.DunningGroup = nil
		return
	case 13:
		r.FormCode = nil
		return
	case 14:
		r.FormType = nil
		return
	case 15:
		r.Id = nil
		return
	case 16:
		r.InterestGraceDays = nil
		return
	case 18:
		r.InvoiceAgreementCategoryId = nil
		return
	case 19:
		r.InvoiceIssuerSupplementaryProduct = nil
		return
	case 20:
		r.InvoiceIssuerTariff = nil
		return
	case 21:
		r.InvoiceLabel = nil
		return
	case 22:
		r.InvoiceLabelFrom = nil
		return
	case 23:
		r.InvoiceLabelTo = nil
		return
	case 24:
		r.SendingMethod = nil
		return
	case 25:
		r.Type = nil
		return
	}
	panic("Unknown field index")
}

func (r *InvoiceAgreement) NullField(i int) {
	switch i {
	case 0:
		r.AccountDistributionInformation = nil
		return
	case 1:
		r.AccountName = nil
		return
	case 2:
		r.AccountNumber = nil
		return
	case 3:
		r.ActorId = nil
		return
	case 4:
		r.Address = nil
		return
	case 5:
		r.AgreementDate = nil
		return
	case 6:
		r.AlternativeInvoicingAddressStatus = nil
		return
	case 7:
		r.BillingAddress = nil
		return
	case 8:
		r.Cid = nil
		return
	case 9:
		r.DaysUntilDueDate = nil
		return
	case 10:
		r.Description = nil
		return
	case 11:
		r.DueDate = nil
		return
	case 12:
		r.DunningGroup = nil
		return
	case 13:
		r.FormCode = nil
		return
	case 14:
		r.FormType = nil
		return
	case 15:
		r.Id = nil
		return
	case 16:
		r.InterestGraceDays = nil
		return
	case 18:
		r.InvoiceAgreementCategoryId = nil
		return
	case 19:
		r.InvoiceIssuerSupplementaryProduct = nil
		return
	case 20:
		r.InvoiceIssuerTariff = nil
		return
	case 21:
		r.InvoiceLabel = nil
		return
	case 22:
		r.InvoiceLabelFrom = nil
		return
	case 23:
		r.InvoiceLabelTo = nil
		return
	case 24:
		r.SendingMethod = nil
		return
	case 25:
		r.Type = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ InvoiceAgreement) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ InvoiceAgreement) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ InvoiceAgreement) HintSize(int)                     { panic("Unsupported operation") }
func (_ InvoiceAgreement) Finalize()                        {}

func (_ InvoiceAgreement) AvroCRC64Fingerprint() []byte {
	return []byte(InvoiceAgreementAvroCRC64Fingerprint)
}

func (r InvoiceAgreement) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AccountDistributionInformation"], err = json.Marshal(r.AccountDistributionInformation)
	if err != nil {
		return nil, err
	}
	output["AccountName"], err = json.Marshal(r.AccountName)
	if err != nil {
		return nil, err
	}
	output["AccountNumber"], err = json.Marshal(r.AccountNumber)
	if err != nil {
		return nil, err
	}
	output["ActorId"], err = json.Marshal(r.ActorId)
	if err != nil {
		return nil, err
	}
	output["Address"], err = json.Marshal(r.Address)
	if err != nil {
		return nil, err
	}
	output["AgreementDate"], err = json.Marshal(r.AgreementDate)
	if err != nil {
		return nil, err
	}
	output["AlternativeInvoicingAddressStatus"], err = json.Marshal(r.AlternativeInvoicingAddressStatus)
	if err != nil {
		return nil, err
	}
	output["BillingAddress"], err = json.Marshal(r.BillingAddress)
	if err != nil {
		return nil, err
	}
	output["Cid"], err = json.Marshal(r.Cid)
	if err != nil {
		return nil, err
	}
	output["DaysUntilDueDate"], err = json.Marshal(r.DaysUntilDueDate)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["DueDate"], err = json.Marshal(r.DueDate)
	if err != nil {
		return nil, err
	}
	output["DunningGroup"], err = json.Marshal(r.DunningGroup)
	if err != nil {
		return nil, err
	}
	output["FormCode"], err = json.Marshal(r.FormCode)
	if err != nil {
		return nil, err
	}
	output["FormType"], err = json.Marshal(r.FormType)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["InterestGraceDays"], err = json.Marshal(r.InterestGraceDays)
	if err != nil {
		return nil, err
	}
	output["InterestRate"], err = json.Marshal(r.InterestRate)
	if err != nil {
		return nil, err
	}
	output["InvoiceAgreementCategoryId"], err = json.Marshal(r.InvoiceAgreementCategoryId)
	if err != nil {
		return nil, err
	}
	output["InvoiceIssuerSupplementaryProduct"], err = json.Marshal(r.InvoiceIssuerSupplementaryProduct)
	if err != nil {
		return nil, err
	}
	output["InvoiceIssuerTariff"], err = json.Marshal(r.InvoiceIssuerTariff)
	if err != nil {
		return nil, err
	}
	output["InvoiceLabel"], err = json.Marshal(r.InvoiceLabel)
	if err != nil {
		return nil, err
	}
	output["InvoiceLabelFrom"], err = json.Marshal(r.InvoiceLabelFrom)
	if err != nil {
		return nil, err
	}
	output["InvoiceLabelTo"], err = json.Marshal(r.InvoiceLabelTo)
	if err != nil {
		return nil, err
	}
	output["SendingMethod"], err = json.Marshal(r.SendingMethod)
	if err != nil {
		return nil, err
	}
	output["Type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *InvoiceAgreement) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AccountDistributionInformation"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AccountDistributionInformation); err != nil {
			return err
		}
	} else {
		r.AccountDistributionInformation = NewUnionNullString()

		r.AccountDistributionInformation = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AccountName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AccountName); err != nil {
			return err
		}
	} else {
		r.AccountName = NewUnionNullString()

		r.AccountName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AccountNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AccountNumber); err != nil {
			return err
		}
	} else {
		r.AccountNumber = NewUnionNullString()

		r.AccountNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ActorId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ActorId); err != nil {
			return err
		}
	} else {
		r.ActorId = NewUnionNullString()

		r.ActorId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Address"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Address); err != nil {
			return err
		}
	} else {
		r.Address = NewUnionNullString()

		r.Address = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AgreementDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AgreementDate); err != nil {
			return err
		}
	} else {
		r.AgreementDate = NewUnionNullString()

		r.AgreementDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AlternativeInvoicingAddressStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AlternativeInvoicingAddressStatus); err != nil {
			return err
		}
	} else {
		r.AlternativeInvoicingAddressStatus = NewUnionNullString()

		r.AlternativeInvoicingAddressStatus = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["BillingAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BillingAddress); err != nil {
			return err
		}
	} else {
		r.BillingAddress = NewUnionNullBillingAddress()

		r.BillingAddress = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cid); err != nil {
			return err
		}
	} else {
		r.Cid = NewUnionNullString()

		r.Cid = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DaysUntilDueDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DaysUntilDueDate); err != nil {
			return err
		}
	} else {
		r.DaysUntilDueDate = NewUnionNullInt()

		r.DaysUntilDueDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DueDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DueDate); err != nil {
			return err
		}
	} else {
		r.DueDate = NewUnionNullInt()

		r.DueDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DunningGroup"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DunningGroup); err != nil {
			return err
		}
	} else {
		r.DunningGroup = NewUnionNullInt()

		r.DunningGroup = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FormCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FormCode); err != nil {
			return err
		}
	} else {
		r.FormCode = NewUnionNullString()

		r.FormCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FormType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FormType); err != nil {
			return err
		}
	} else {
		r.FormType = NewUnionNullFormType()

		r.FormType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InterestGraceDays"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InterestGraceDays); err != nil {
			return err
		}
	} else {
		r.InterestGraceDays = NewUnionNullInt()

		r.InterestGraceDays = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InterestRate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InterestRate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for InterestRate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceAgreementCategoryId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceAgreementCategoryId); err != nil {
			return err
		}
	} else {
		r.InvoiceAgreementCategoryId = NewUnionNullString()

		r.InvoiceAgreementCategoryId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceIssuerSupplementaryProduct"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceIssuerSupplementaryProduct); err != nil {
			return err
		}
	} else {
		r.InvoiceIssuerSupplementaryProduct = NewUnionNullInt()

		r.InvoiceIssuerSupplementaryProduct = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceIssuerTariff"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceIssuerTariff); err != nil {
			return err
		}
	} else {
		r.InvoiceIssuerTariff = NewUnionNullString()

		r.InvoiceIssuerTariff = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceLabel"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceLabel); err != nil {
			return err
		}
	} else {
		r.InvoiceLabel = NewUnionNullString()

		r.InvoiceLabel = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceLabelFrom"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceLabelFrom); err != nil {
			return err
		}
	} else {
		r.InvoiceLabelFrom = NewUnionNullString()

		r.InvoiceLabelFrom = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceLabelTo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceLabelTo); err != nil {
			return err
		}
	} else {
		r.InvoiceLabelTo = NewUnionNullString()

		r.InvoiceLabelTo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SendingMethod"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SendingMethod); err != nil {
			return err
		}
	} else {
		r.SendingMethod = NewUnionNullString()

		r.SendingMethod = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		r.Type = NewUnionNullInvoiceAgreementType()

		r.Type = nil
	}
	return nil
}
