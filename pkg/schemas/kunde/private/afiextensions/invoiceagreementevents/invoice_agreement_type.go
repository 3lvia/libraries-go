// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100398_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type InvoiceAgreementType int32

const (
	InvoiceAgreementTypeInvoiceAgreement              InvoiceAgreementType = 0
	InvoiceAgreementTypeInvoiceAgreementDeliverypoint InvoiceAgreementType = 1
	InvoiceAgreementTypePaymentDocumentAgreement      InvoiceAgreementType = 2
	InvoiceAgreementTypeAdvanceAccount                InvoiceAgreementType = 3
)

func (e InvoiceAgreementType) String() string {
	switch e {
	case InvoiceAgreementTypeInvoiceAgreement:
		return "InvoiceAgreement"
	case InvoiceAgreementTypeInvoiceAgreementDeliverypoint:
		return "InvoiceAgreementDeliverypoint"
	case InvoiceAgreementTypePaymentDocumentAgreement:
		return "PaymentDocumentAgreement"
	case InvoiceAgreementTypeAdvanceAccount:
		return "AdvanceAccount"
	}
	return "unknown"
}

func writeInvoiceAgreementType(r InvoiceAgreementType, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewInvoiceAgreementTypeValue(raw string) (r InvoiceAgreementType, err error) {
	switch raw {
	case "InvoiceAgreement":
		return InvoiceAgreementTypeInvoiceAgreement, nil
	case "InvoiceAgreementDeliverypoint":
		return InvoiceAgreementTypeInvoiceAgreementDeliverypoint, nil
	case "PaymentDocumentAgreement":
		return InvoiceAgreementTypePaymentDocumentAgreement, nil
	case "AdvanceAccount":
		return InvoiceAgreementTypeAdvanceAccount, nil
	}

	return -1, fmt.Errorf("invalid value for InvoiceAgreementType: '%s'", raw)

}

func (b InvoiceAgreementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *InvoiceAgreementType) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewInvoiceAgreementTypeValue(stringVal)
	*b = val
	return err
}

type InvoiceAgreementTypeWrapper struct {
	Target *InvoiceAgreementType
}

func (b InvoiceAgreementTypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b InvoiceAgreementTypeWrapper) SetInt(v int32) {
	*(b.Target) = InvoiceAgreementType(v)
}

func (b InvoiceAgreementTypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b InvoiceAgreementTypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b InvoiceAgreementTypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b InvoiceAgreementTypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b InvoiceAgreementTypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b InvoiceAgreementTypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b InvoiceAgreementTypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b InvoiceAgreementTypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b InvoiceAgreementTypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b InvoiceAgreementTypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b InvoiceAgreementTypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b InvoiceAgreementTypeWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b InvoiceAgreementTypeWrapper) Finalize() {}
