// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100398_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullInvoiceAgreementTypeTypeEnum int

const (
	UnionNullInvoiceAgreementTypeTypeEnumInvoiceAgreementType UnionNullInvoiceAgreementTypeTypeEnum = 1
)

type UnionNullInvoiceAgreementType struct {
	Null                 *types.NullVal
	InvoiceAgreementType InvoiceAgreementType
	UnionType            UnionNullInvoiceAgreementTypeTypeEnum
}

func writeUnionNullInvoiceAgreementType(r *UnionNullInvoiceAgreementType, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullInvoiceAgreementTypeTypeEnumInvoiceAgreementType:
		return writeInvoiceAgreementType(r.InvoiceAgreementType, w)
	}
	return fmt.Errorf("invalid value for *UnionNullInvoiceAgreementType")
}

func NewUnionNullInvoiceAgreementType() *UnionNullInvoiceAgreementType {
	return &UnionNullInvoiceAgreementType{}
}

func (r *UnionNullInvoiceAgreementType) Serialize(w io.Writer) error {
	return writeUnionNullInvoiceAgreementType(r, w)
}

func DeserializeUnionNullInvoiceAgreementType(r io.Reader) (*UnionNullInvoiceAgreementType, error) {
	t := NewUnionNullInvoiceAgreementType()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullInvoiceAgreementTypeFromSchema(r io.Reader, schema string) (*UnionNullInvoiceAgreementType, error) {
	t := NewUnionNullInvoiceAgreementType()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullInvoiceAgreementType) Schema() string {
	return "[\"null\",{\"name\":\"InvoiceAgreementType\",\"symbols\":[\"InvoiceAgreement\",\"InvoiceAgreementDeliverypoint\",\"PaymentDocumentAgreement\",\"AdvanceAccount\"],\"type\":\"enum\"}]"
}

func (_ *UnionNullInvoiceAgreementType) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullInvoiceAgreementType) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullInvoiceAgreementType) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullInvoiceAgreementType) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullInvoiceAgreementType) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullInvoiceAgreementType) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullInvoiceAgreementType) SetLong(v int64) {

	r.UnionType = (UnionNullInvoiceAgreementTypeTypeEnum)(v)
}

func (r *UnionNullInvoiceAgreementType) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		return &InvoiceAgreementTypeWrapper{Target: (&r.InvoiceAgreementType)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullInvoiceAgreementType) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullInvoiceAgreementType) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullInvoiceAgreementType) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullInvoiceAgreementType) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullInvoiceAgreementType) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullInvoiceAgreementType) Finalize()                {}

func (r *UnionNullInvoiceAgreementType) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullInvoiceAgreementTypeTypeEnumInvoiceAgreementType:
		return json.Marshal(map[string]interface{}{"Afiextensions.Schemas.InvoiceAgreementEvents.V1.InvoiceAgreementType": r.InvoiceAgreementType})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullInvoiceAgreementType")
}

func (r *UnionNullInvoiceAgreementType) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Afiextensions.Schemas.InvoiceAgreementEvents.V1.InvoiceAgreementType"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.InvoiceAgreementType)
	}
	return fmt.Errorf("invalid value for *UnionNullInvoiceAgreementType")
}
