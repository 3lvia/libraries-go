// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100398_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type BillingAddress struct {
	Address *UnionNullString `json:"Address"`

	Address2 *UnionNullString `json:"Address2"`

	AddressOrigin *UnionNullAddressOriginType `json:"AddressOrigin"`

	City *UnionNullString `json:"City"`

	Country *UnionNullString `json:"Country"`

	Name *UnionNullString `json:"Name"`

	Name2 *UnionNullString `json:"Name2"`

	ZipCode *UnionNullString `json:"ZipCode"`
}

const BillingAddressAvroCRC64Fingerprint = "G\\\"\xe4r,7\xbb"

func NewBillingAddress() BillingAddress {
	r := BillingAddress{}
	r.Address = nil
	r.Address2 = nil
	r.AddressOrigin = nil
	r.City = nil
	r.Country = nil
	r.Name = nil
	r.Name2 = nil
	r.ZipCode = nil
	return r
}

func DeserializeBillingAddress(r io.Reader) (BillingAddress, error) {
	t := NewBillingAddress()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBillingAddressFromSchema(r io.Reader, schema string) (BillingAddress, error) {
	t := NewBillingAddress()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBillingAddress(r BillingAddress, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Address, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Address2, w)
	if err != nil {
		return err
	}
	err = writeUnionNullAddressOriginType(r.AddressOrigin, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.City, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Country, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name2, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ZipCode, w)
	if err != nil {
		return err
	}
	return err
}

func (r BillingAddress) Serialize(w io.Writer) error {
	return writeBillingAddress(r, w)
}

func (r BillingAddress) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Address\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Address2\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"AddressOrigin\",\"type\":[\"null\",{\"name\":\"AddressOriginType\",\"symbols\":[\"ActorAddress\",\"OtherPayer\",\"InvoiceAddress\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"City\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Country\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name2\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ZipCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"Afiextensions.Schemas.InvoiceAgreementEvents.V1.BillingAddress\",\"type\":\"record\"}"
}

func (r BillingAddress) SchemaName() string {
	return "Afiextensions.Schemas.InvoiceAgreementEvents.V1.BillingAddress"
}

func (_ BillingAddress) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ BillingAddress) SetInt(v int32)       { panic("Unsupported operation") }
func (_ BillingAddress) SetLong(v int64)      { panic("Unsupported operation") }
func (_ BillingAddress) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ BillingAddress) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ BillingAddress) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ BillingAddress) SetString(v string)   { panic("Unsupported operation") }
func (_ BillingAddress) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *BillingAddress) Get(i int) types.Field {
	switch i {
	case 0:
		r.Address = NewUnionNullString()

		return r.Address
	case 1:
		r.Address2 = NewUnionNullString()

		return r.Address2
	case 2:
		r.AddressOrigin = NewUnionNullAddressOriginType()

		return r.AddressOrigin
	case 3:
		r.City = NewUnionNullString()

		return r.City
	case 4:
		r.Country = NewUnionNullString()

		return r.Country
	case 5:
		r.Name = NewUnionNullString()

		return r.Name
	case 6:
		r.Name2 = NewUnionNullString()

		return r.Name2
	case 7:
		r.ZipCode = NewUnionNullString()

		return r.ZipCode
	}
	panic("Unknown field index")
}

func (r *BillingAddress) SetDefault(i int) {
	switch i {
	case 0:
		r.Address = nil
		return
	case 1:
		r.Address2 = nil
		return
	case 2:
		r.AddressOrigin = nil
		return
	case 3:
		r.City = nil
		return
	case 4:
		r.Country = nil
		return
	case 5:
		r.Name = nil
		return
	case 6:
		r.Name2 = nil
		return
	case 7:
		r.ZipCode = nil
		return
	}
	panic("Unknown field index")
}

func (r *BillingAddress) NullField(i int) {
	switch i {
	case 0:
		r.Address = nil
		return
	case 1:
		r.Address2 = nil
		return
	case 2:
		r.AddressOrigin = nil
		return
	case 3:
		r.City = nil
		return
	case 4:
		r.Country = nil
		return
	case 5:
		r.Name = nil
		return
	case 6:
		r.Name2 = nil
		return
	case 7:
		r.ZipCode = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ BillingAddress) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ BillingAddress) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ BillingAddress) HintSize(int)                     { panic("Unsupported operation") }
func (_ BillingAddress) Finalize()                        {}

func (_ BillingAddress) AvroCRC64Fingerprint() []byte {
	return []byte(BillingAddressAvroCRC64Fingerprint)
}

func (r BillingAddress) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Address"], err = json.Marshal(r.Address)
	if err != nil {
		return nil, err
	}
	output["Address2"], err = json.Marshal(r.Address2)
	if err != nil {
		return nil, err
	}
	output["AddressOrigin"], err = json.Marshal(r.AddressOrigin)
	if err != nil {
		return nil, err
	}
	output["City"], err = json.Marshal(r.City)
	if err != nil {
		return nil, err
	}
	output["Country"], err = json.Marshal(r.Country)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Name2"], err = json.Marshal(r.Name2)
	if err != nil {
		return nil, err
	}
	output["ZipCode"], err = json.Marshal(r.ZipCode)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *BillingAddress) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Address"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Address); err != nil {
			return err
		}
	} else {
		r.Address = NewUnionNullString()

		r.Address = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Address2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Address2); err != nil {
			return err
		}
	} else {
		r.Address2 = NewUnionNullString()

		r.Address2 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["AddressOrigin"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AddressOrigin); err != nil {
			return err
		}
	} else {
		r.AddressOrigin = NewUnionNullAddressOriginType()

		r.AddressOrigin = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["City"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.City); err != nil {
			return err
		}
	} else {
		r.City = NewUnionNullString()

		r.City = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Country"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Country); err != nil {
			return err
		}
	} else {
		r.Country = NewUnionNullString()

		r.Country = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name2); err != nil {
			return err
		}
	} else {
		r.Name2 = NewUnionNullString()

		r.Name2 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ZipCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ZipCode); err != nil {
			return err
		}
	} else {
		r.ZipCode = NewUnionNullString()

		r.ZipCode = nil
	}
	return nil
}
