// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100395_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type InvoiceDebtCollectionUpdatedEvent struct {
	Amount float64 `json:"Amount"`

	CaseNumber *UnionNullString `json:"CaseNumber"`

	DebtCollectionAgency int32 `json:"DebtCollectionAgency"`

	Description *UnionNullString `json:"Description"`

	EventType string `json:"EventType"`

	ExternalCustomerGUID *UnionNullString `json:"ExternalCustomerGUID"`

	ExternalCustomerReference *UnionNullString `json:"ExternalCustomerReference"`

	Id string `json:"Id"`

	InvoiceDebtCollectionEventType *UnionNullString `json:"InvoiceDebtCollectionEventType"`

	InvoiceId int64 `json:"InvoiceId"`

	SourceId *UnionNullLong `json:"SourceId"`

	SourceType *UnionNullString `json:"SourceType"`

	TransactionDate *UnionNullLong `json:"TransactionDate"`
}

const InvoiceDebtCollectionUpdatedEventAvroCRC64Fingerprint = "\x15Lt\xaf\xec\xecd\x9a"

func NewInvoiceDebtCollectionUpdatedEvent() InvoiceDebtCollectionUpdatedEvent {
	r := InvoiceDebtCollectionUpdatedEvent{}
	r.CaseNumber = nil
	r.Description = nil
	r.ExternalCustomerGUID = nil
	r.ExternalCustomerReference = nil
	r.InvoiceDebtCollectionEventType = nil
	r.SourceId = nil
	r.SourceType = nil
	r.TransactionDate = nil
	return r
}

func DeserializeInvoiceDebtCollectionUpdatedEvent(r io.Reader) (InvoiceDebtCollectionUpdatedEvent, error) {
	t := NewInvoiceDebtCollectionUpdatedEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeInvoiceDebtCollectionUpdatedEventFromSchema(r io.Reader, schema string) (InvoiceDebtCollectionUpdatedEvent, error) {
	t := NewInvoiceDebtCollectionUpdatedEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeInvoiceDebtCollectionUpdatedEvent(r InvoiceDebtCollectionUpdatedEvent, w io.Writer) error {
	var err error
	err = vm.WriteDouble(r.Amount, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CaseNumber, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.DebtCollectionAgency, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EventType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ExternalCustomerGUID, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ExternalCustomerReference, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InvoiceDebtCollectionEventType, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.InvoiceId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.SourceId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SourceType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.TransactionDate, w)
	if err != nil {
		return err
	}
	return err
}

func (r InvoiceDebtCollectionUpdatedEvent) Serialize(w io.Writer) error {
	return writeInvoiceDebtCollectionUpdatedEvent(r, w)
}

func (r InvoiceDebtCollectionUpdatedEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"Amount\",\"type\":\"double\"},{\"default\":null,\"name\":\"CaseNumber\",\"type\":[\"null\",\"string\"]},{\"name\":\"DebtCollectionAgency\",\"type\":\"int\"},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"name\":\"EventType\",\"type\":\"string\"},{\"default\":null,\"name\":\"ExternalCustomerGUID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ExternalCustomerReference\",\"type\":[\"null\",\"string\"]},{\"name\":\"Id\",\"type\":\"string\"},{\"default\":null,\"name\":\"InvoiceDebtCollectionEventType\",\"type\":[\"null\",\"string\"]},{\"name\":\"InvoiceId\",\"type\":\"long\"},{\"default\":null,\"name\":\"SourceId\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"SourceType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TransactionDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]}],\"name\":\"Afiextensions.Schemas.InvoiceDebtCollectionEvents.V1.InvoiceDebtCollectionUpdatedEvent\",\"type\":\"record\"}"
}

func (r InvoiceDebtCollectionUpdatedEvent) SchemaName() string {
	return "Afiextensions.Schemas.InvoiceDebtCollectionEvents.V1.InvoiceDebtCollectionUpdatedEvent"
}

func (_ InvoiceDebtCollectionUpdatedEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ InvoiceDebtCollectionUpdatedEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ InvoiceDebtCollectionUpdatedEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ InvoiceDebtCollectionUpdatedEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ InvoiceDebtCollectionUpdatedEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ InvoiceDebtCollectionUpdatedEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ InvoiceDebtCollectionUpdatedEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ InvoiceDebtCollectionUpdatedEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *InvoiceDebtCollectionUpdatedEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Double{Target: &r.Amount}

		return w

	case 1:
		r.CaseNumber = NewUnionNullString()

		return r.CaseNumber
	case 2:
		w := types.Int{Target: &r.DebtCollectionAgency}

		return w

	case 3:
		r.Description = NewUnionNullString()

		return r.Description
	case 4:
		w := types.String{Target: &r.EventType}

		return w

	case 5:
		r.ExternalCustomerGUID = NewUnionNullString()

		return r.ExternalCustomerGUID
	case 6:
		r.ExternalCustomerReference = NewUnionNullString()

		return r.ExternalCustomerReference
	case 7:
		w := types.String{Target: &r.Id}

		return w

	case 8:
		r.InvoiceDebtCollectionEventType = NewUnionNullString()

		return r.InvoiceDebtCollectionEventType
	case 9:
		w := types.Long{Target: &r.InvoiceId}

		return w

	case 10:
		r.SourceId = NewUnionNullLong()

		return r.SourceId
	case 11:
		r.SourceType = NewUnionNullString()

		return r.SourceType
	case 12:
		r.TransactionDate = NewUnionNullLong()

		return r.TransactionDate
	}
	panic("Unknown field index")
}

func (r *InvoiceDebtCollectionUpdatedEvent) SetDefault(i int) {
	switch i {
	case 1:
		r.CaseNumber = nil
		return
	case 3:
		r.Description = nil
		return
	case 5:
		r.ExternalCustomerGUID = nil
		return
	case 6:
		r.ExternalCustomerReference = nil
		return
	case 8:
		r.InvoiceDebtCollectionEventType = nil
		return
	case 10:
		r.SourceId = nil
		return
	case 11:
		r.SourceType = nil
		return
	case 12:
		r.TransactionDate = nil
		return
	}
	panic("Unknown field index")
}

func (r *InvoiceDebtCollectionUpdatedEvent) NullField(i int) {
	switch i {
	case 1:
		r.CaseNumber = nil
		return
	case 3:
		r.Description = nil
		return
	case 5:
		r.ExternalCustomerGUID = nil
		return
	case 6:
		r.ExternalCustomerReference = nil
		return
	case 8:
		r.InvoiceDebtCollectionEventType = nil
		return
	case 10:
		r.SourceId = nil
		return
	case 11:
		r.SourceType = nil
		return
	case 12:
		r.TransactionDate = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ InvoiceDebtCollectionUpdatedEvent) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ InvoiceDebtCollectionUpdatedEvent) AppendArray() types.Field { panic("Unsupported operation") }
func (_ InvoiceDebtCollectionUpdatedEvent) HintSize(int)             { panic("Unsupported operation") }
func (_ InvoiceDebtCollectionUpdatedEvent) Finalize()                {}

func (_ InvoiceDebtCollectionUpdatedEvent) AvroCRC64Fingerprint() []byte {
	return []byte(InvoiceDebtCollectionUpdatedEventAvroCRC64Fingerprint)
}

func (r InvoiceDebtCollectionUpdatedEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Amount"], err = json.Marshal(r.Amount)
	if err != nil {
		return nil, err
	}
	output["CaseNumber"], err = json.Marshal(r.CaseNumber)
	if err != nil {
		return nil, err
	}
	output["DebtCollectionAgency"], err = json.Marshal(r.DebtCollectionAgency)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["EventType"], err = json.Marshal(r.EventType)
	if err != nil {
		return nil, err
	}
	output["ExternalCustomerGUID"], err = json.Marshal(r.ExternalCustomerGUID)
	if err != nil {
		return nil, err
	}
	output["ExternalCustomerReference"], err = json.Marshal(r.ExternalCustomerReference)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["InvoiceDebtCollectionEventType"], err = json.Marshal(r.InvoiceDebtCollectionEventType)
	if err != nil {
		return nil, err
	}
	output["InvoiceId"], err = json.Marshal(r.InvoiceId)
	if err != nil {
		return nil, err
	}
	output["SourceId"], err = json.Marshal(r.SourceId)
	if err != nil {
		return nil, err
	}
	output["SourceType"], err = json.Marshal(r.SourceType)
	if err != nil {
		return nil, err
	}
	output["TransactionDate"], err = json.Marshal(r.TransactionDate)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *InvoiceDebtCollectionUpdatedEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Amount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Amount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Amount")
	}
	val = func() json.RawMessage {
		if v, ok := fields["CaseNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CaseNumber); err != nil {
			return err
		}
	} else {
		r.CaseNumber = NewUnionNullString()

		r.CaseNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DebtCollectionAgency"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DebtCollectionAgency); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for DebtCollectionAgency")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EventType")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ExternalCustomerGUID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExternalCustomerGUID); err != nil {
			return err
		}
	} else {
		r.ExternalCustomerGUID = NewUnionNullString()

		r.ExternalCustomerGUID = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ExternalCustomerReference"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExternalCustomerReference); err != nil {
			return err
		}
	} else {
		r.ExternalCustomerReference = NewUnionNullString()

		r.ExternalCustomerReference = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceDebtCollectionEventType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceDebtCollectionEventType); err != nil {
			return err
		}
	} else {
		r.InvoiceDebtCollectionEventType = NewUnionNullString()

		r.InvoiceDebtCollectionEventType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for InvoiceId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SourceId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SourceId); err != nil {
			return err
		}
	} else {
		r.SourceId = NewUnionNullLong()

		r.SourceId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SourceType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SourceType); err != nil {
			return err
		}
	} else {
		r.SourceType = NewUnionNullString()

		r.SourceType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TransactionDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TransactionDate); err != nil {
			return err
		}
	} else {
		r.TransactionDate = NewUnionNullLong()

		r.TransactionDate = nil
	}
	return nil
}
