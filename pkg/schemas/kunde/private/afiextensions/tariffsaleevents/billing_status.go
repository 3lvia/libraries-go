// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100346_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type BillingStatus int32

const (
	BillingStatusOpen                                                        BillingStatus = 0
	BillingStatusBlockedForBilling                                           BillingStatus = 1
	BillingStatusManualFinalBilling                                          BillingStatus = 2
	BillingStatusManualFinalBillingAndBlockedForBilling                      BillingStatus = 3
	BillingStatusManualFinalBillingAndBlockedForBatchBilling                 BillingStatus = 4
	BillingStatusManualFinalBillingAndBlockedForAllBilling                   BillingStatus = 5
	BillingStatusManualBlockingBatchBilling                                  BillingStatus = 6
	BillingStatusBlockedForAllBilling                                        BillingStatus = 7
	BillingStatusBlockedByTakeoverWithoutSupplierChange                      BillingStatus = 8
	BillingStatusBlockedByOutsideThresholdValue                              BillingStatus = 9
	BillingStatusBlockedByOutsideThresholdValueVolumePercent                 BillingStatus = 10
	BillingStatusApprovedOutsideThresholdValueForBilling                     BillingStatus = 11
	BillingStatusApprovedOutsideThresholdValueForBillingToManualFinalBilling BillingStatus = 12
)

func (e BillingStatus) String() string {
	switch e {
	case BillingStatusOpen:
		return "Open"
	case BillingStatusBlockedForBilling:
		return "BlockedForBilling"
	case BillingStatusManualFinalBilling:
		return "ManualFinalBilling"
	case BillingStatusManualFinalBillingAndBlockedForBilling:
		return "ManualFinalBillingAndBlockedForBilling"
	case BillingStatusManualFinalBillingAndBlockedForBatchBilling:
		return "ManualFinalBillingAndBlockedForBatchBilling"
	case BillingStatusManualFinalBillingAndBlockedForAllBilling:
		return "ManualFinalBillingAndBlockedForAllBilling"
	case BillingStatusManualBlockingBatchBilling:
		return "ManualBlockingBatchBilling"
	case BillingStatusBlockedForAllBilling:
		return "BlockedForAllBilling"
	case BillingStatusBlockedByTakeoverWithoutSupplierChange:
		return "BlockedByTakeoverWithoutSupplierChange"
	case BillingStatusBlockedByOutsideThresholdValue:
		return "BlockedByOutsideThresholdValue"
	case BillingStatusBlockedByOutsideThresholdValueVolumePercent:
		return "BlockedByOutsideThresholdValueVolumePercent"
	case BillingStatusApprovedOutsideThresholdValueForBilling:
		return "ApprovedOutsideThresholdValueForBilling"
	case BillingStatusApprovedOutsideThresholdValueForBillingToManualFinalBilling:
		return "ApprovedOutsideThresholdValueForBillingToManualFinalBilling"
	}
	return "unknown"
}

func writeBillingStatus(r BillingStatus, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewBillingStatusValue(raw string) (r BillingStatus, err error) {
	switch raw {
	case "Open":
		return BillingStatusOpen, nil
	case "BlockedForBilling":
		return BillingStatusBlockedForBilling, nil
	case "ManualFinalBilling":
		return BillingStatusManualFinalBilling, nil
	case "ManualFinalBillingAndBlockedForBilling":
		return BillingStatusManualFinalBillingAndBlockedForBilling, nil
	case "ManualFinalBillingAndBlockedForBatchBilling":
		return BillingStatusManualFinalBillingAndBlockedForBatchBilling, nil
	case "ManualFinalBillingAndBlockedForAllBilling":
		return BillingStatusManualFinalBillingAndBlockedForAllBilling, nil
	case "ManualBlockingBatchBilling":
		return BillingStatusManualBlockingBatchBilling, nil
	case "BlockedForAllBilling":
		return BillingStatusBlockedForAllBilling, nil
	case "BlockedByTakeoverWithoutSupplierChange":
		return BillingStatusBlockedByTakeoverWithoutSupplierChange, nil
	case "BlockedByOutsideThresholdValue":
		return BillingStatusBlockedByOutsideThresholdValue, nil
	case "BlockedByOutsideThresholdValueVolumePercent":
		return BillingStatusBlockedByOutsideThresholdValueVolumePercent, nil
	case "ApprovedOutsideThresholdValueForBilling":
		return BillingStatusApprovedOutsideThresholdValueForBilling, nil
	case "ApprovedOutsideThresholdValueForBillingToManualFinalBilling":
		return BillingStatusApprovedOutsideThresholdValueForBillingToManualFinalBilling, nil
	}

	return -1, fmt.Errorf("invalid value for BillingStatus: '%s'", raw)

}

func (b BillingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *BillingStatus) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewBillingStatusValue(stringVal)
	*b = val
	return err
}

type BillingStatusWrapper struct {
	Target *BillingStatus
}

func (b BillingStatusWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b BillingStatusWrapper) SetInt(v int32) {
	*(b.Target) = BillingStatus(v)
}

func (b BillingStatusWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b BillingStatusWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b BillingStatusWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b BillingStatusWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b BillingStatusWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b BillingStatusWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b BillingStatusWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b BillingStatusWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b BillingStatusWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b BillingStatusWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b BillingStatusWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b BillingStatusWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b BillingStatusWrapper) Finalize() {}
