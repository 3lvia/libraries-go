// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100257_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SpotPrice struct {
	Area *UnionNullString `json:"Area"`

	Currency *UnionNullString `json:"Currency"`

	EndTime *UnionNullLong `json:"EndTime"`

	StartTime *UnionNullLong `json:"StartTime"`

	Status *UnionNullString `json:"Status"`

	Unit *UnionNullString `json:"Unit"`

	Value *UnionNullDouble `json:"Value"`
}

const SpotPriceAvroCRC64Fingerprint = "=\xc9\xc1A0\xebd\xfa"

func NewSpotPrice() SpotPrice {
	r := SpotPrice{}
	r.Area = nil
	r.Currency = nil
	r.EndTime = nil
	r.StartTime = nil
	r.Status = nil
	r.Unit = nil
	r.Value = nil
	return r
}

func DeserializeSpotPrice(r io.Reader) (SpotPrice, error) {
	t := NewSpotPrice()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSpotPriceFromSchema(r io.Reader, schema string) (SpotPrice, error) {
	t := NewSpotPrice()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSpotPrice(r SpotPrice, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Area, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Currency, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EndTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.StartTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Status, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Unit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r SpotPrice) Serialize(w io.Writer) error {
	return writeSpotPrice(r, w)
}

func (r SpotPrice) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Area\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Currency\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EndTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"StartTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"Status\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Unit\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"double\"]}],\"name\":\"SpotPriceFeeder.Models.SpotPrice\",\"type\":\"record\"}"
}

func (r SpotPrice) SchemaName() string {
	return "SpotPriceFeeder.Models.SpotPrice"
}

func (_ SpotPrice) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SpotPrice) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SpotPrice) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SpotPrice) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SpotPrice) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SpotPrice) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SpotPrice) SetString(v string)   { panic("Unsupported operation") }
func (_ SpotPrice) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SpotPrice) Get(i int) types.Field {
	switch i {
	case 0:
		r.Area = NewUnionNullString()

		return r.Area
	case 1:
		r.Currency = NewUnionNullString()

		return r.Currency
	case 2:
		r.EndTime = NewUnionNullLong()

		return r.EndTime
	case 3:
		r.StartTime = NewUnionNullLong()

		return r.StartTime
	case 4:
		r.Status = NewUnionNullString()

		return r.Status
	case 5:
		r.Unit = NewUnionNullString()

		return r.Unit
	case 6:
		r.Value = NewUnionNullDouble()

		return r.Value
	}
	panic("Unknown field index")
}

func (r *SpotPrice) SetDefault(i int) {
	switch i {
	case 0:
		r.Area = nil
		return
	case 1:
		r.Currency = nil
		return
	case 2:
		r.EndTime = nil
		return
	case 3:
		r.StartTime = nil
		return
	case 4:
		r.Status = nil
		return
	case 5:
		r.Unit = nil
		return
	case 6:
		r.Value = nil
		return
	}
	panic("Unknown field index")
}

func (r *SpotPrice) NullField(i int) {
	switch i {
	case 0:
		r.Area = nil
		return
	case 1:
		r.Currency = nil
		return
	case 2:
		r.EndTime = nil
		return
	case 3:
		r.StartTime = nil
		return
	case 4:
		r.Status = nil
		return
	case 5:
		r.Unit = nil
		return
	case 6:
		r.Value = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SpotPrice) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SpotPrice) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SpotPrice) HintSize(int)                     { panic("Unsupported operation") }
func (_ SpotPrice) Finalize()                        {}

func (_ SpotPrice) AvroCRC64Fingerprint() []byte {
	return []byte(SpotPriceAvroCRC64Fingerprint)
}

func (r SpotPrice) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Area"], err = json.Marshal(r.Area)
	if err != nil {
		return nil, err
	}
	output["Currency"], err = json.Marshal(r.Currency)
	if err != nil {
		return nil, err
	}
	output["EndTime"], err = json.Marshal(r.EndTime)
	if err != nil {
		return nil, err
	}
	output["StartTime"], err = json.Marshal(r.StartTime)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["Unit"], err = json.Marshal(r.Unit)
	if err != nil {
		return nil, err
	}
	output["Value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SpotPrice) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Area"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Area); err != nil {
			return err
		}
	} else {
		r.Area = NewUnionNullString()

		r.Area = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Currency"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Currency); err != nil {
			return err
		}
	} else {
		r.Currency = NewUnionNullString()

		r.Currency = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EndTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndTime); err != nil {
			return err
		}
	} else {
		r.EndTime = NewUnionNullLong()

		r.EndTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StartTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartTime); err != nil {
			return err
		}
	} else {
		r.StartTime = NewUnionNullLong()

		r.StartTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		r.Status = NewUnionNullString()

		r.Status = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Unit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Unit); err != nil {
			return err
		}
	} else {
		r.Unit = NewUnionNullString()

		r.Unit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		r.Value = NewUnionNullDouble()

		r.Value = nil
	}
	return nil
}
