// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100441_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayUnionNullHanPortEventTypeEnum int

const (
	UnionNullArrayUnionNullHanPortEventTypeEnumArrayUnionNullHanPortEvent UnionNullArrayUnionNullHanPortEventTypeEnum = 1
)

type UnionNullArrayUnionNullHanPortEvent struct {
	Null                       *types.NullVal
	ArrayUnionNullHanPortEvent []*UnionNullHanPortEvent
	UnionType                  UnionNullArrayUnionNullHanPortEventTypeEnum
}

func writeUnionNullArrayUnionNullHanPortEvent(r *UnionNullArrayUnionNullHanPortEvent, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayUnionNullHanPortEventTypeEnumArrayUnionNullHanPortEvent:
		return writeArrayUnionNullHanPortEvent(r.ArrayUnionNullHanPortEvent, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullHanPortEvent")
}

func NewUnionNullArrayUnionNullHanPortEvent() *UnionNullArrayUnionNullHanPortEvent {
	return &UnionNullArrayUnionNullHanPortEvent{}
}

func (r *UnionNullArrayUnionNullHanPortEvent) Serialize(w io.Writer) error {
	return writeUnionNullArrayUnionNullHanPortEvent(r, w)
}

func DeserializeUnionNullArrayUnionNullHanPortEvent(r io.Reader) (*UnionNullArrayUnionNullHanPortEvent, error) {
	t := NewUnionNullArrayUnionNullHanPortEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayUnionNullHanPortEventFromSchema(r io.Reader, schema string) (*UnionNullArrayUnionNullHanPortEvent, error) {
	t := NewUnionNullArrayUnionNullHanPortEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayUnionNullHanPortEvent) Schema() string {
	return "[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CreatedDateUtc\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Status\",\"type\":{\"name\":\"HanPortStatus\",\"symbols\":[\"OpeningRequested\",\"Open\",\"ClosingRequested\",\"Closed\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"TermsId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TermsRevision\",\"type\":[\"null\",\"string\"]}],\"name\":\"HanPortEvent\",\"type\":\"record\"}],\"type\":\"array\"}]"
}

func (_ *UnionNullArrayUnionNullHanPortEvent) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullHanPortEvent) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullHanPortEvent) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullHanPortEvent) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullHanPortEvent) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullHanPortEvent) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayUnionNullHanPortEvent) SetLong(v int64) {

	r.UnionType = (UnionNullArrayUnionNullHanPortEventTypeEnum)(v)
}

func (r *UnionNullArrayUnionNullHanPortEvent) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayUnionNullHanPortEvent = make([]*UnionNullHanPortEvent, 0)
		return &ArrayUnionNullHanPortEventWrapper{Target: (&r.ArrayUnionNullHanPortEvent)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayUnionNullHanPortEvent) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullHanPortEvent) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullHanPortEvent) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullHanPortEvent) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullHanPortEvent) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullHanPortEvent) Finalize() {}

func (r *UnionNullArrayUnionNullHanPortEvent) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayUnionNullHanPortEventTypeEnumArrayUnionNullHanPortEvent:
		return json.Marshal(map[string]interface{}{"array": r.ArrayUnionNullHanPortEvent})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayUnionNullHanPortEvent")
}

func (r *UnionNullArrayUnionNullHanPortEvent) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayUnionNullHanPortEvent)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullHanPortEvent")
}
