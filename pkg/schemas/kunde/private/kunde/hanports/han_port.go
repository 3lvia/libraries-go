// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100441_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type HanPort struct {
	Contract *UnionNullContract `json:"Contract"`

	Customer *UnionNullCustomer `json:"Customer"`

	HanPortEvents *UnionNullArrayUnionNullHanPortEvent `json:"HanPortEvents"`

	HanPortStatus HanPortStatus `json:"HanPortStatus"`

	Id string `json:"Id"`

	UpdatedDateUtc int64 `json:"UpdatedDateUtc"`
}

const HanPortAvroCRC64Fingerprint = "\xb7\x82\xd4$\xbb\xf5\xdfB"

func NewHanPort() HanPort {
	r := HanPort{}
	r.Contract = nil
	r.Customer = nil
	r.HanPortEvents = nil
	return r
}

func DeserializeHanPort(r io.Reader) (HanPort, error) {
	t := NewHanPort()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeHanPortFromSchema(r io.Reader, schema string) (HanPort, error) {
	t := NewHanPort()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeHanPort(r HanPort, w io.Writer) error {
	var err error
	err = writeUnionNullContract(r.Contract, w)
	if err != nil {
		return err
	}
	err = writeUnionNullCustomer(r.Customer, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullHanPortEvent(r.HanPortEvents, w)
	if err != nil {
		return err
	}
	err = writeHanPortStatus(r.HanPortStatus, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.UpdatedDateUtc, w)
	if err != nil {
		return err
	}
	return err
}

func (r HanPort) Serialize(w io.Writer) error {
	return writeHanPort(r, w)
}

func (r HanPort) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Contract\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"EndTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"MeteringPointId\",\"type\":[\"null\",\"string\"]},{\"name\":\"StartTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Contract\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Customer\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"IdentificationNumber\",\"type\":[\"null\",\"string\"]}],\"name\":\"Customer\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"HanPortEvents\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CreatedDateUtc\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Status\",\"type\":{\"name\":\"HanPortStatus\",\"symbols\":[\"OpeningRequested\",\"Open\",\"ClosingRequested\",\"Closed\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"TermsId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TermsRevision\",\"type\":[\"null\",\"string\"]}],\"name\":\"HanPortEvent\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"name\":\"HanPortStatus\",\"type\":\"Kunde.Schema.Messages.HanPortStatus\"},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"UpdatedDateUtc\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Kunde.Schema.Messages.HanPort\",\"type\":\"record\"}"
}

func (r HanPort) SchemaName() string {
	return "Kunde.Schema.Messages.HanPort"
}

func (_ HanPort) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ HanPort) SetInt(v int32)       { panic("Unsupported operation") }
func (_ HanPort) SetLong(v int64)      { panic("Unsupported operation") }
func (_ HanPort) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ HanPort) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ HanPort) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ HanPort) SetString(v string)   { panic("Unsupported operation") }
func (_ HanPort) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *HanPort) Get(i int) types.Field {
	switch i {
	case 0:
		r.Contract = NewUnionNullContract()

		return r.Contract
	case 1:
		r.Customer = NewUnionNullCustomer()

		return r.Customer
	case 2:
		r.HanPortEvents = NewUnionNullArrayUnionNullHanPortEvent()

		return r.HanPortEvents
	case 3:
		w := HanPortStatusWrapper{Target: &r.HanPortStatus}

		return w

	case 4:
		w := types.String{Target: &r.Id}

		return w

	case 5:
		w := types.Long{Target: &r.UpdatedDateUtc}

		return w

	}
	panic("Unknown field index")
}

func (r *HanPort) SetDefault(i int) {
	switch i {
	case 0:
		r.Contract = nil
		return
	case 1:
		r.Customer = nil
		return
	case 2:
		r.HanPortEvents = nil
		return
	}
	panic("Unknown field index")
}

func (r *HanPort) NullField(i int) {
	switch i {
	case 0:
		r.Contract = nil
		return
	case 1:
		r.Customer = nil
		return
	case 2:
		r.HanPortEvents = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ HanPort) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ HanPort) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ HanPort) HintSize(int)                     { panic("Unsupported operation") }
func (_ HanPort) Finalize()                        {}

func (_ HanPort) AvroCRC64Fingerprint() []byte {
	return []byte(HanPortAvroCRC64Fingerprint)
}

func (r HanPort) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Contract"], err = json.Marshal(r.Contract)
	if err != nil {
		return nil, err
	}
	output["Customer"], err = json.Marshal(r.Customer)
	if err != nil {
		return nil, err
	}
	output["HanPortEvents"], err = json.Marshal(r.HanPortEvents)
	if err != nil {
		return nil, err
	}
	output["HanPortStatus"], err = json.Marshal(r.HanPortStatus)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["UpdatedDateUtc"], err = json.Marshal(r.UpdatedDateUtc)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *HanPort) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Contract"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contract); err != nil {
			return err
		}
	} else {
		r.Contract = NewUnionNullContract()

		r.Contract = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Customer"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Customer); err != nil {
			return err
		}
	} else {
		r.Customer = NewUnionNullCustomer()

		r.Customer = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HanPortEvents"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HanPortEvents); err != nil {
			return err
		}
	} else {
		r.HanPortEvents = NewUnionNullArrayUnionNullHanPortEvent()

		r.HanPortEvents = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HanPortStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HanPortStatus); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for HanPortStatus")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["UpdatedDateUtc"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UpdatedDateUtc); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for UpdatedDateUtc")
	}
	return nil
}
