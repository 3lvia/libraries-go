// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100441_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type HanPortEvent struct {
	CreatedDateUtc *UnionNullLong `json:"CreatedDateUtc"`

	Status HanPortStatus `json:"Status"`

	TermsId *UnionNullString `json:"TermsId"`

	TermsRevision *UnionNullString `json:"TermsRevision"`
}

const HanPortEventAvroCRC64Fingerprint = "\xf8\xedB\x86}\b\xbc\xa3"

func NewHanPortEvent() HanPortEvent {
	r := HanPortEvent{}
	r.CreatedDateUtc = nil
	r.TermsId = nil
	r.TermsRevision = nil
	return r
}

func DeserializeHanPortEvent(r io.Reader) (HanPortEvent, error) {
	t := NewHanPortEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeHanPortEventFromSchema(r io.Reader, schema string) (HanPortEvent, error) {
	t := NewHanPortEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeHanPortEvent(r HanPortEvent, w io.Writer) error {
	var err error
	err = writeUnionNullLong(r.CreatedDateUtc, w)
	if err != nil {
		return err
	}
	err = writeHanPortStatus(r.Status, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TermsId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TermsRevision, w)
	if err != nil {
		return err
	}
	return err
}

func (r HanPortEvent) Serialize(w io.Writer) error {
	return writeHanPortEvent(r, w)
}

func (r HanPortEvent) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CreatedDateUtc\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Status\",\"type\":{\"name\":\"HanPortStatus\",\"symbols\":[\"OpeningRequested\",\"Open\",\"ClosingRequested\",\"Closed\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"TermsId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TermsRevision\",\"type\":[\"null\",\"string\"]}],\"name\":\"Kunde.Schema.Messages.HanPortEvent\",\"type\":\"record\"}"
}

func (r HanPortEvent) SchemaName() string {
	return "Kunde.Schema.Messages.HanPortEvent"
}

func (_ HanPortEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ HanPortEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ HanPortEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ HanPortEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ HanPortEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ HanPortEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ HanPortEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ HanPortEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *HanPortEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.CreatedDateUtc = NewUnionNullLong()

		return r.CreatedDateUtc
	case 1:
		w := HanPortStatusWrapper{Target: &r.Status}

		return w

	case 2:
		r.TermsId = NewUnionNullString()

		return r.TermsId
	case 3:
		r.TermsRevision = NewUnionNullString()

		return r.TermsRevision
	}
	panic("Unknown field index")
}

func (r *HanPortEvent) SetDefault(i int) {
	switch i {
	case 0:
		r.CreatedDateUtc = nil
		return
	case 2:
		r.TermsId = nil
		return
	case 3:
		r.TermsRevision = nil
		return
	}
	panic("Unknown field index")
}

func (r *HanPortEvent) NullField(i int) {
	switch i {
	case 0:
		r.CreatedDateUtc = nil
		return
	case 2:
		r.TermsId = nil
		return
	case 3:
		r.TermsRevision = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ HanPortEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ HanPortEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ HanPortEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ HanPortEvent) Finalize()                        {}

func (_ HanPortEvent) AvroCRC64Fingerprint() []byte {
	return []byte(HanPortEventAvroCRC64Fingerprint)
}

func (r HanPortEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CreatedDateUtc"], err = json.Marshal(r.CreatedDateUtc)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["TermsId"], err = json.Marshal(r.TermsId)
	if err != nil {
		return nil, err
	}
	output["TermsRevision"], err = json.Marshal(r.TermsRevision)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *HanPortEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CreatedDateUtc"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedDateUtc); err != nil {
			return err
		}
	} else {
		r.CreatedDateUtc = NewUnionNullLong()

		r.CreatedDateUtc = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TermsId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TermsId); err != nil {
			return err
		}
	} else {
		r.TermsId = NewUnionNullString()

		r.TermsId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TermsRevision"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TermsRevision); err != nil {
			return err
		}
	} else {
		r.TermsRevision = NewUnionNullString()

		r.TermsRevision = nil
	}
	return nil
}
