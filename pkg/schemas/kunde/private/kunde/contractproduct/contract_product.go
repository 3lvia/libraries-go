// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100406_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ContractProduct struct {
	Contract *UnionNullContract `json:"Contract"`

	EndTime *UnionNullLong `json:"EndTime"`

	Id string `json:"Id"`

	Product *UnionNullProductProperties `json:"Product"`

	StartTime int64 `json:"StartTime"`
}

const ContractProductAvroCRC64Fingerprint = "Z\xfb\xba^z*Ç”"

func NewContractProduct() ContractProduct {
	r := ContractProduct{}
	r.Contract = nil
	r.EndTime = nil
	r.Product = nil
	return r
}

func DeserializeContractProduct(r io.Reader) (ContractProduct, error) {
	t := NewContractProduct()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContractProductFromSchema(r io.Reader, schema string) (ContractProduct, error) {
	t := NewContractProduct()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContractProduct(r ContractProduct, w io.Writer) error {
	var err error
	err = writeUnionNullContract(r.Contract, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EndTime, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullProductProperties(r.Product, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.StartTime, w)
	if err != nil {
		return err
	}
	return err
}

func (r ContractProduct) Serialize(w io.Writer) error {
	return writeContractProduct(r, w)
}

func (r ContractProduct) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Contract\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"EndTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"MeteringPointId\",\"type\":[\"null\",\"string\"]},{\"name\":\"StartTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Contract\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"EndTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Product\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ExternalId\",\"type\":[\"null\",\"string\"]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]}],\"name\":\"ProductProperties\",\"type\":\"record\"}]},{\"name\":\"StartTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Kunde.Schema.Messages.ContractProduct\",\"type\":\"record\"}"
}

func (r ContractProduct) SchemaName() string {
	return "Kunde.Schema.Messages.ContractProduct"
}

func (_ ContractProduct) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ContractProduct) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ContractProduct) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ContractProduct) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ContractProduct) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ContractProduct) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ContractProduct) SetString(v string)   { panic("Unsupported operation") }
func (_ ContractProduct) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ContractProduct) Get(i int) types.Field {
	switch i {
	case 0:
		r.Contract = NewUnionNullContract()

		return r.Contract
	case 1:
		r.EndTime = NewUnionNullLong()

		return r.EndTime
	case 2:
		w := types.String{Target: &r.Id}

		return w

	case 3:
		r.Product = NewUnionNullProductProperties()

		return r.Product
	case 4:
		w := types.Long{Target: &r.StartTime}

		return w

	}
	panic("Unknown field index")
}

func (r *ContractProduct) SetDefault(i int) {
	switch i {
	case 0:
		r.Contract = nil
		return
	case 1:
		r.EndTime = nil
		return
	case 3:
		r.Product = nil
		return
	}
	panic("Unknown field index")
}

func (r *ContractProduct) NullField(i int) {
	switch i {
	case 0:
		r.Contract = nil
		return
	case 1:
		r.EndTime = nil
		return
	case 3:
		r.Product = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ContractProduct) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ContractProduct) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ContractProduct) HintSize(int)                     { panic("Unsupported operation") }
func (_ ContractProduct) Finalize()                        {}

func (_ ContractProduct) AvroCRC64Fingerprint() []byte {
	return []byte(ContractProductAvroCRC64Fingerprint)
}

func (r ContractProduct) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Contract"], err = json.Marshal(r.Contract)
	if err != nil {
		return nil, err
	}
	output["EndTime"], err = json.Marshal(r.EndTime)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Product"], err = json.Marshal(r.Product)
	if err != nil {
		return nil, err
	}
	output["StartTime"], err = json.Marshal(r.StartTime)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ContractProduct) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Contract"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contract); err != nil {
			return err
		}
	} else {
		r.Contract = NewUnionNullContract()

		r.Contract = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EndTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndTime); err != nil {
			return err
		}
	} else {
		r.EndTime = NewUnionNullLong()

		r.EndTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Product"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Product); err != nil {
			return err
		}
	} else {
		r.Product = NewUnionNullProductProperties()

		r.Product = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StartTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartTime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for StartTime")
	}
	return nil
}
