// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100406_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ProductProperties struct {
	ExternalId *UnionNullString `json:"ExternalId"`

	Id string `json:"Id"`

	Name *UnionNullString `json:"Name"`
}

const ProductPropertiesAvroCRC64Fingerprint = "\x9d\xeb\xb9\x1b\x92[\xcb\xca"

func NewProductProperties() ProductProperties {
	r := ProductProperties{}
	r.ExternalId = nil
	r.Name = nil
	return r
}

func DeserializeProductProperties(r io.Reader) (ProductProperties, error) {
	t := NewProductProperties()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeProductPropertiesFromSchema(r io.Reader, schema string) (ProductProperties, error) {
	t := NewProductProperties()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeProductProperties(r ProductProperties, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ExternalId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	return err
}

func (r ProductProperties) Serialize(w io.Writer) error {
	return writeProductProperties(r, w)
}

func (r ProductProperties) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ExternalId\",\"type\":[\"null\",\"string\"]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]}],\"name\":\"Kunde.Schema.Messages.ProductProperties\",\"type\":\"record\"}"
}

func (r ProductProperties) SchemaName() string {
	return "Kunde.Schema.Messages.ProductProperties"
}

func (_ ProductProperties) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ProductProperties) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ProductProperties) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ProductProperties) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ProductProperties) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ProductProperties) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ProductProperties) SetString(v string)   { panic("Unsupported operation") }
func (_ ProductProperties) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ProductProperties) Get(i int) types.Field {
	switch i {
	case 0:
		r.ExternalId = NewUnionNullString()

		return r.ExternalId
	case 1:
		w := types.String{Target: &r.Id}

		return w

	case 2:
		r.Name = NewUnionNullString()

		return r.Name
	}
	panic("Unknown field index")
}

func (r *ProductProperties) SetDefault(i int) {
	switch i {
	case 0:
		r.ExternalId = nil
		return
	case 2:
		r.Name = nil
		return
	}
	panic("Unknown field index")
}

func (r *ProductProperties) NullField(i int) {
	switch i {
	case 0:
		r.ExternalId = nil
		return
	case 2:
		r.Name = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ProductProperties) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ProductProperties) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ProductProperties) HintSize(int)                     { panic("Unsupported operation") }
func (_ ProductProperties) Finalize()                        {}

func (_ ProductProperties) AvroCRC64Fingerprint() []byte {
	return []byte(ProductPropertiesAvroCRC64Fingerprint)
}

func (r ProductProperties) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ExternalId"], err = json.Marshal(r.ExternalId)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ProductProperties) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ExternalId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExternalId); err != nil {
			return err
		}
	} else {
		r.ExternalId = NewUnionNullString()

		r.ExternalId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	return nil
}
