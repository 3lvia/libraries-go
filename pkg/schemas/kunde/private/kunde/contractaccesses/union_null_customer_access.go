// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100412_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullCustomerAccessTypeEnum int

const (
	UnionNullCustomerAccessTypeEnumCustomerAccess UnionNullCustomerAccessTypeEnum = 1
)

type UnionNullCustomerAccess struct {
	Null           *types.NullVal
	CustomerAccess CustomerAccess
	UnionType      UnionNullCustomerAccessTypeEnum
}

func writeUnionNullCustomerAccess(r *UnionNullCustomerAccess, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullCustomerAccessTypeEnumCustomerAccess:
		return writeCustomerAccess(r.CustomerAccess, w)
	}
	return fmt.Errorf("invalid value for *UnionNullCustomerAccess")
}

func NewUnionNullCustomerAccess() *UnionNullCustomerAccess {
	return &UnionNullCustomerAccess{}
}

func (r *UnionNullCustomerAccess) Serialize(w io.Writer) error {
	return writeUnionNullCustomerAccess(r, w)
}

func DeserializeUnionNullCustomerAccess(r io.Reader) (*UnionNullCustomerAccess, error) {
	t := NewUnionNullCustomerAccess()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullCustomerAccessFromSchema(r io.Reader, schema string) (*UnionNullCustomerAccess, error) {
	t := NewUnionNullCustomerAccess()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullCustomerAccess) Schema() string {
	return "[\"null\",{\"fields\":[{\"name\":\"ApprovedByOwner\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"Customer\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"IdentificationNumber\",\"type\":[\"null\",\"string\"]}],\"name\":\"Customer\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Email\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ExpirationDateUtc\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"GrantedByCustomerAccessId\",\"type\":[\"null\",{\"logicalType\":\"uuid\",\"type\":\"string\"}]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"LastAccessedDateUtc\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Pid\",\"type\":[\"null\",\"string\"]},{\"name\":\"Role\",\"type\":{\"name\":\"CustomerAccessRole\",\"symbols\":[\"Owner\",\"CoOwner\",\"CompanyReader\",\"MachineReader\",\"CustomerService\"],\"type\":\"enum\"}}],\"name\":\"CustomerAccess\",\"type\":\"record\"}]"
}

func (_ *UnionNullCustomerAccess) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullCustomerAccess) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullCustomerAccess) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullCustomerAccess) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullCustomerAccess) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullCustomerAccess) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullCustomerAccess) SetLong(v int64) {

	r.UnionType = (UnionNullCustomerAccessTypeEnum)(v)
}

func (r *UnionNullCustomerAccess) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.CustomerAccess = NewCustomerAccess()
		return &types.Record{Target: (&r.CustomerAccess)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullCustomerAccess) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullCustomerAccess) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullCustomerAccess) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullCustomerAccess) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullCustomerAccess) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullCustomerAccess) Finalize()                        {}

func (r *UnionNullCustomerAccess) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullCustomerAccessTypeEnumCustomerAccess:
		return json.Marshal(map[string]interface{}{"Kunde.Schema.Messages.CustomerAccess": r.CustomerAccess})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullCustomerAccess")
}

func (r *UnionNullCustomerAccess) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Kunde.Schema.Messages.CustomerAccess"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.CustomerAccess)
	}
	return fmt.Errorf("invalid value for *UnionNullCustomerAccess")
}
