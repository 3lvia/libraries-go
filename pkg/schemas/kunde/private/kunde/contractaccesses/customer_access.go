// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100412_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CustomerAccess struct {
	ApprovedByOwner bool `json:"ApprovedByOwner"`

	Customer *UnionNullCustomer `json:"Customer"`

	Email *UnionNullString `json:"Email"`

	ExpirationDateUtc *UnionNullLong `json:"ExpirationDateUtc"`

	GrantedByCustomerAccessId *UnionNullString `json:"GrantedByCustomerAccessId"`

	Id string `json:"Id"`

	LastAccessedDateUtc *UnionNullLong `json:"LastAccessedDateUtc"`

	Name *UnionNullString `json:"Name"`

	Pid *UnionNullString `json:"Pid"`

	Role CustomerAccessRole `json:"Role"`
}

const CustomerAccessAvroCRC64Fingerprint = "'\x13\x9fv\x85\xce?3"

func NewCustomerAccess() CustomerAccess {
	r := CustomerAccess{}
	r.Customer = nil
	r.Email = nil
	r.ExpirationDateUtc = nil
	r.GrantedByCustomerAccessId = nil
	r.LastAccessedDateUtc = nil
	r.Name = nil
	r.Pid = nil
	return r
}

func DeserializeCustomerAccess(r io.Reader) (CustomerAccess, error) {
	t := NewCustomerAccess()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCustomerAccessFromSchema(r io.Reader, schema string) (CustomerAccess, error) {
	t := NewCustomerAccess()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCustomerAccess(r CustomerAccess, w io.Writer) error {
	var err error
	err = vm.WriteBool(r.ApprovedByOwner, w)
	if err != nil {
		return err
	}
	err = writeUnionNullCustomer(r.Customer, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Email, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.ExpirationDateUtc, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GrantedByCustomerAccessId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.LastAccessedDateUtc, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Pid, w)
	if err != nil {
		return err
	}
	err = writeCustomerAccessRole(r.Role, w)
	if err != nil {
		return err
	}
	return err
}

func (r CustomerAccess) Serialize(w io.Writer) error {
	return writeCustomerAccess(r, w)
}

func (r CustomerAccess) Schema() string {
	return "{\"fields\":[{\"name\":\"ApprovedByOwner\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"Customer\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"IdentificationNumber\",\"type\":[\"null\",\"string\"]}],\"name\":\"Customer\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Email\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ExpirationDateUtc\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"GrantedByCustomerAccessId\",\"type\":[\"null\",{\"logicalType\":\"uuid\",\"type\":\"string\"}]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"LastAccessedDateUtc\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Pid\",\"type\":[\"null\",\"string\"]},{\"name\":\"Role\",\"type\":{\"name\":\"CustomerAccessRole\",\"symbols\":[\"Owner\",\"CoOwner\",\"CompanyReader\",\"MachineReader\",\"CustomerService\"],\"type\":\"enum\"}}],\"name\":\"Kunde.Schema.Messages.CustomerAccess\",\"type\":\"record\"}"
}

func (r CustomerAccess) SchemaName() string {
	return "Kunde.Schema.Messages.CustomerAccess"
}

func (_ CustomerAccess) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CustomerAccess) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CustomerAccess) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CustomerAccess) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CustomerAccess) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CustomerAccess) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CustomerAccess) SetString(v string)   { panic("Unsupported operation") }
func (_ CustomerAccess) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CustomerAccess) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Boolean{Target: &r.ApprovedByOwner}

		return w

	case 1:
		r.Customer = NewUnionNullCustomer()

		return r.Customer
	case 2:
		r.Email = NewUnionNullString()

		return r.Email
	case 3:
		r.ExpirationDateUtc = NewUnionNullLong()

		return r.ExpirationDateUtc
	case 4:
		r.GrantedByCustomerAccessId = NewUnionNullString()

		return r.GrantedByCustomerAccessId
	case 5:
		w := types.String{Target: &r.Id}

		return w

	case 6:
		r.LastAccessedDateUtc = NewUnionNullLong()

		return r.LastAccessedDateUtc
	case 7:
		r.Name = NewUnionNullString()

		return r.Name
	case 8:
		r.Pid = NewUnionNullString()

		return r.Pid
	case 9:
		w := CustomerAccessRoleWrapper{Target: &r.Role}

		return w

	}
	panic("Unknown field index")
}

func (r *CustomerAccess) SetDefault(i int) {
	switch i {
	case 1:
		r.Customer = nil
		return
	case 2:
		r.Email = nil
		return
	case 3:
		r.ExpirationDateUtc = nil
		return
	case 4:
		r.GrantedByCustomerAccessId = nil
		return
	case 6:
		r.LastAccessedDateUtc = nil
		return
	case 7:
		r.Name = nil
		return
	case 8:
		r.Pid = nil
		return
	}
	panic("Unknown field index")
}

func (r *CustomerAccess) NullField(i int) {
	switch i {
	case 1:
		r.Customer = nil
		return
	case 2:
		r.Email = nil
		return
	case 3:
		r.ExpirationDateUtc = nil
		return
	case 4:
		r.GrantedByCustomerAccessId = nil
		return
	case 6:
		r.LastAccessedDateUtc = nil
		return
	case 7:
		r.Name = nil
		return
	case 8:
		r.Pid = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CustomerAccess) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CustomerAccess) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CustomerAccess) HintSize(int)                     { panic("Unsupported operation") }
func (_ CustomerAccess) Finalize()                        {}

func (_ CustomerAccess) AvroCRC64Fingerprint() []byte {
	return []byte(CustomerAccessAvroCRC64Fingerprint)
}

func (r CustomerAccess) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ApprovedByOwner"], err = json.Marshal(r.ApprovedByOwner)
	if err != nil {
		return nil, err
	}
	output["Customer"], err = json.Marshal(r.Customer)
	if err != nil {
		return nil, err
	}
	output["Email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	output["ExpirationDateUtc"], err = json.Marshal(r.ExpirationDateUtc)
	if err != nil {
		return nil, err
	}
	output["GrantedByCustomerAccessId"], err = json.Marshal(r.GrantedByCustomerAccessId)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["LastAccessedDateUtc"], err = json.Marshal(r.LastAccessedDateUtc)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Pid"], err = json.Marshal(r.Pid)
	if err != nil {
		return nil, err
	}
	output["Role"], err = json.Marshal(r.Role)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CustomerAccess) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ApprovedByOwner"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ApprovedByOwner); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ApprovedByOwner")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Customer"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Customer); err != nil {
			return err
		}
	} else {
		r.Customer = NewUnionNullCustomer()

		r.Customer = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		r.Email = NewUnionNullString()

		r.Email = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ExpirationDateUtc"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExpirationDateUtc); err != nil {
			return err
		}
	} else {
		r.ExpirationDateUtc = NewUnionNullLong()

		r.ExpirationDateUtc = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GrantedByCustomerAccessId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GrantedByCustomerAccessId); err != nil {
			return err
		}
	} else {
		r.GrantedByCustomerAccessId = NewUnionNullString()

		r.GrantedByCustomerAccessId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastAccessedDateUtc"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastAccessedDateUtc); err != nil {
			return err
		}
	} else {
		r.LastAccessedDateUtc = NewUnionNullLong()

		r.LastAccessedDateUtc = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Pid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Pid); err != nil {
			return err
		}
	} else {
		r.Pid = NewUnionNullString()

		r.Pid = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Role"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Role); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Role")
	}
	return nil
}
