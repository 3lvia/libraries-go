// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100412_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ContractAccess struct {
	Contract *UnionNullContract `json:"Contract"`

	CustomerAccess *UnionNullCustomerAccess `json:"CustomerAccess"`

	Id string `json:"Id"`
}

const ContractAccessAvroCRC64Fingerprint = "\x8d\xc1\x83\x9b\x8a;\xcek"

func NewContractAccess() ContractAccess {
	r := ContractAccess{}
	r.Contract = nil
	r.CustomerAccess = nil
	return r
}

func DeserializeContractAccess(r io.Reader) (ContractAccess, error) {
	t := NewContractAccess()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContractAccessFromSchema(r io.Reader, schema string) (ContractAccess, error) {
	t := NewContractAccess()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContractAccess(r ContractAccess, w io.Writer) error {
	var err error
	err = writeUnionNullContract(r.Contract, w)
	if err != nil {
		return err
	}
	err = writeUnionNullCustomerAccess(r.CustomerAccess, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	return err
}

func (r ContractAccess) Serialize(w io.Writer) error {
	return writeContractAccess(r, w)
}

func (r ContractAccess) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Contract\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"EndTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"MeteringPointId\",\"type\":[\"null\",\"string\"]},{\"name\":\"StartTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Contract\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"CustomerAccess\",\"type\":[\"null\",{\"fields\":[{\"name\":\"ApprovedByOwner\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"Customer\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"IdentificationNumber\",\"type\":[\"null\",\"string\"]}],\"name\":\"Customer\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Email\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ExpirationDateUtc\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"GrantedByCustomerAccessId\",\"type\":[\"null\",{\"logicalType\":\"uuid\",\"type\":\"string\"}]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"LastAccessedDateUtc\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Pid\",\"type\":[\"null\",\"string\"]},{\"name\":\"Role\",\"type\":{\"name\":\"CustomerAccessRole\",\"symbols\":[\"Owner\",\"CoOwner\",\"CompanyReader\",\"MachineReader\",\"CustomerService\"],\"type\":\"enum\"}}],\"name\":\"CustomerAccess\",\"type\":\"record\"}]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}}],\"name\":\"Kunde.Schema.Messages.ContractAccess\",\"type\":\"record\"}"
}

func (r ContractAccess) SchemaName() string {
	return "Kunde.Schema.Messages.ContractAccess"
}

func (_ ContractAccess) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ContractAccess) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ContractAccess) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ContractAccess) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ContractAccess) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ContractAccess) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ContractAccess) SetString(v string)   { panic("Unsupported operation") }
func (_ ContractAccess) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ContractAccess) Get(i int) types.Field {
	switch i {
	case 0:
		r.Contract = NewUnionNullContract()

		return r.Contract
	case 1:
		r.CustomerAccess = NewUnionNullCustomerAccess()

		return r.CustomerAccess
	case 2:
		w := types.String{Target: &r.Id}

		return w

	}
	panic("Unknown field index")
}

func (r *ContractAccess) SetDefault(i int) {
	switch i {
	case 0:
		r.Contract = nil
		return
	case 1:
		r.CustomerAccess = nil
		return
	}
	panic("Unknown field index")
}

func (r *ContractAccess) NullField(i int) {
	switch i {
	case 0:
		r.Contract = nil
		return
	case 1:
		r.CustomerAccess = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ContractAccess) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ContractAccess) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ContractAccess) HintSize(int)                     { panic("Unsupported operation") }
func (_ ContractAccess) Finalize()                        {}

func (_ ContractAccess) AvroCRC64Fingerprint() []byte {
	return []byte(ContractAccessAvroCRC64Fingerprint)
}

func (r ContractAccess) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Contract"], err = json.Marshal(r.Contract)
	if err != nil {
		return nil, err
	}
	output["CustomerAccess"], err = json.Marshal(r.CustomerAccess)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ContractAccess) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Contract"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contract); err != nil {
			return err
		}
	} else {
		r.Contract = NewUnionNullContract()

		r.Contract = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CustomerAccess"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CustomerAccess); err != nil {
			return err
		}
	} else {
		r.CustomerAccess = NewUnionNullCustomerAccess()

		r.CustomerAccess = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	return nil
}
