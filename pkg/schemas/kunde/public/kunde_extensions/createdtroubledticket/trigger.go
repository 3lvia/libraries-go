// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100467_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Trigger int32

const (
	TriggerEtrChange        Trigger = 0
	TriggerInformDispatched Trigger = 1
	TriggerInitialEtr       Trigger = 2
	TriggerPowerOut         Trigger = 3
	TriggerPowerRestored    Trigger = 4
)

func (e Trigger) String() string {
	switch e {
	case TriggerEtrChange:
		return "EtrChange"
	case TriggerInformDispatched:
		return "InformDispatched"
	case TriggerInitialEtr:
		return "InitialEtr"
	case TriggerPowerOut:
		return "PowerOut"
	case TriggerPowerRestored:
		return "PowerRestored"
	}
	return "unknown"
}

func writeTrigger(r Trigger, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewTriggerValue(raw string) (r Trigger, err error) {
	switch raw {
	case "EtrChange":
		return TriggerEtrChange, nil
	case "InformDispatched":
		return TriggerInformDispatched, nil
	case "InitialEtr":
		return TriggerInitialEtr, nil
	case "PowerOut":
		return TriggerPowerOut, nil
	case "PowerRestored":
		return TriggerPowerRestored, nil
	}

	return -1, fmt.Errorf("invalid value for Trigger: '%s'", raw)

}

func (b Trigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *Trigger) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewTriggerValue(stringVal)
	*b = val
	return err
}

type TriggerWrapper struct {
	Target *Trigger
}

func (b TriggerWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b TriggerWrapper) SetInt(v int32) {
	*(b.Target) = Trigger(v)
}

func (b TriggerWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b TriggerWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b TriggerWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b TriggerWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b TriggerWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b TriggerWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b TriggerWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b TriggerWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b TriggerWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b TriggerWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b TriggerWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b TriggerWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b TriggerWrapper) Finalize() {}
