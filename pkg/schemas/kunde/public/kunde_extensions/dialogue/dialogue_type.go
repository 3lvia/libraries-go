// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100238_6.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DialogueType int32

const (
	DialogueTypeUnknown DialogueType = 0
	DialogueTypeNote    DialogueType = 1
	DialogueTypeChat    DialogueType = 2
	DialogueTypeLog     DialogueType = 3
	DialogueTypeEmail   DialogueType = 4
	DialogueTypeSMS     DialogueType = 5
)

func (e DialogueType) String() string {
	switch e {
	case DialogueTypeUnknown:
		return "Unknown"
	case DialogueTypeNote:
		return "Note"
	case DialogueTypeChat:
		return "Chat"
	case DialogueTypeLog:
		return "Log"
	case DialogueTypeEmail:
		return "Email"
	case DialogueTypeSMS:
		return "SMS"
	}
	return "unknown"
}

func writeDialogueType(r DialogueType, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewDialogueTypeValue(raw string) (r DialogueType, err error) {
	switch raw {
	case "Unknown":
		return DialogueTypeUnknown, nil
	case "Note":
		return DialogueTypeNote, nil
	case "Chat":
		return DialogueTypeChat, nil
	case "Log":
		return DialogueTypeLog, nil
	case "Email":
		return DialogueTypeEmail, nil
	case "SMS":
		return DialogueTypeSMS, nil
	}

	return -1, fmt.Errorf("invalid value for DialogueType: '%s'", raw)

}

func (b DialogueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *DialogueType) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewDialogueTypeValue(stringVal)
	*b = val
	return err
}

type DialogueTypeWrapper struct {
	Target *DialogueType
}

func (b DialogueTypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b DialogueTypeWrapper) SetInt(v int32) {
	*(b.Target) = DialogueType(v)
}

func (b DialogueTypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b DialogueTypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b DialogueTypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b DialogueTypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b DialogueTypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b DialogueTypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b DialogueTypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b DialogueTypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b DialogueTypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b DialogueTypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b DialogueTypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b DialogueTypeWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b DialogueTypeWrapper) Finalize() {}
