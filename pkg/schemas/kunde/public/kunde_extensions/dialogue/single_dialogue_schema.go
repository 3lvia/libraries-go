// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100238_6.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SingleDialogueSchema struct {
	CaseNumber *UnionNullString `json:"CaseNumber"`

	Dialogue *UnionNullDialogueSchema `json:"Dialogue"`

	Sender *UnionNullString `json:"Sender"`

	SenderEmail *UnionNullString `json:"SenderEmail"`

	SystemName SystemName `json:"SystemName"`
}

const SingleDialogueSchemaAvroCRC64Fingerprint = "Z\x01\x16o\xa8\xda\xd7\x12"

func NewSingleDialogueSchema() SingleDialogueSchema {
	r := SingleDialogueSchema{}
	r.CaseNumber = nil
	r.Dialogue = nil
	r.Sender = nil
	r.SenderEmail = nil
	return r
}

func DeserializeSingleDialogueSchema(r io.Reader) (SingleDialogueSchema, error) {
	t := NewSingleDialogueSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSingleDialogueSchemaFromSchema(r io.Reader, schema string) (SingleDialogueSchema, error) {
	t := NewSingleDialogueSchema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSingleDialogueSchema(r SingleDialogueSchema, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CaseNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDialogueSchema(r.Dialogue, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Sender, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SenderEmail, w)
	if err != nil {
		return err
	}
	err = writeSystemName(r.SystemName, w)
	if err != nil {
		return err
	}
	return err
}

func (r SingleDialogueSchema) Serialize(w io.Writer) error {
	return writeSingleDialogueSchema(r, w)
}

func (r SingleDialogueSchema) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CaseNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Dialogue\",\"type\":[\"null\",{\"fields\":[{\"name\":\"CreatedDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"Direction\",\"type\":[\"null\",{\"name\":\"Direction\",\"symbols\":[\"Unknown\",\"In\",\"Out\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"FromAddress\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FromName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Message\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Subject\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ToAddress\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ToName\",\"type\":[\"null\",\"string\"]},{\"name\":\"Type\",\"type\":{\"name\":\"DialogueType\",\"symbols\":[\"Unknown\",\"Note\",\"Chat\",\"Log\",\"Email\",\"SMS\"],\"type\":\"enum\"}}],\"name\":\"DialogueSchema\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Sender\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SenderEmail\",\"type\":[\"null\",\"string\"]},{\"name\":\"SystemName\",\"type\":{\"name\":\"SystemName\",\"symbols\":[\"Unknown\",\"Elwin\"],\"type\":\"enum\"}}],\"name\":\"kunde_extensions_external_data_api.Model.SingleDialogueSchema\",\"type\":\"record\"}"
}

func (r SingleDialogueSchema) SchemaName() string {
	return "kunde_extensions_external_data_api.Model.SingleDialogueSchema"
}

func (_ SingleDialogueSchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SingleDialogueSchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SingleDialogueSchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SingleDialogueSchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SingleDialogueSchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SingleDialogueSchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SingleDialogueSchema) SetString(v string)   { panic("Unsupported operation") }
func (_ SingleDialogueSchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SingleDialogueSchema) Get(i int) types.Field {
	switch i {
	case 0:
		r.CaseNumber = NewUnionNullString()

		return r.CaseNumber
	case 1:
		r.Dialogue = NewUnionNullDialogueSchema()

		return r.Dialogue
	case 2:
		r.Sender = NewUnionNullString()

		return r.Sender
	case 3:
		r.SenderEmail = NewUnionNullString()

		return r.SenderEmail
	case 4:
		w := SystemNameWrapper{Target: &r.SystemName}

		return w

	}
	panic("Unknown field index")
}

func (r *SingleDialogueSchema) SetDefault(i int) {
	switch i {
	case 0:
		r.CaseNumber = nil
		return
	case 1:
		r.Dialogue = nil
		return
	case 2:
		r.Sender = nil
		return
	case 3:
		r.SenderEmail = nil
		return
	}
	panic("Unknown field index")
}

func (r *SingleDialogueSchema) NullField(i int) {
	switch i {
	case 0:
		r.CaseNumber = nil
		return
	case 1:
		r.Dialogue = nil
		return
	case 2:
		r.Sender = nil
		return
	case 3:
		r.SenderEmail = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SingleDialogueSchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SingleDialogueSchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SingleDialogueSchema) HintSize(int)                     { panic("Unsupported operation") }
func (_ SingleDialogueSchema) Finalize()                        {}

func (_ SingleDialogueSchema) AvroCRC64Fingerprint() []byte {
	return []byte(SingleDialogueSchemaAvroCRC64Fingerprint)
}

func (r SingleDialogueSchema) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CaseNumber"], err = json.Marshal(r.CaseNumber)
	if err != nil {
		return nil, err
	}
	output["Dialogue"], err = json.Marshal(r.Dialogue)
	if err != nil {
		return nil, err
	}
	output["Sender"], err = json.Marshal(r.Sender)
	if err != nil {
		return nil, err
	}
	output["SenderEmail"], err = json.Marshal(r.SenderEmail)
	if err != nil {
		return nil, err
	}
	output["SystemName"], err = json.Marshal(r.SystemName)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SingleDialogueSchema) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CaseNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CaseNumber); err != nil {
			return err
		}
	} else {
		r.CaseNumber = NewUnionNullString()

		r.CaseNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Dialogue"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Dialogue); err != nil {
			return err
		}
	} else {
		r.Dialogue = NewUnionNullDialogueSchema()

		r.Dialogue = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sender"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sender); err != nil {
			return err
		}
	} else {
		r.Sender = NewUnionNullString()

		r.Sender = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SenderEmail"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SenderEmail); err != nil {
			return err
		}
	} else {
		r.SenderEmail = NewUnionNullString()

		r.SenderEmail = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SystemName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SystemName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SystemName")
	}
	return nil
}
