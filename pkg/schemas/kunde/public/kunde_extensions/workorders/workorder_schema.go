// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100250_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type WorkorderSchema struct {
	CaseNumber *UnionNullString `json:"CaseNumber"`

	ContractNumber *UnionNullString `json:"ContractNumber"`

	CreatedDate *UnionNullLong `json:"CreatedDate"`

	CustomerName *UnionNullString `json:"CustomerName"`

	CustomerNumber *UnionNullString `json:"CustomerNumber"`

	Description *UnionNullString `json:"Description"`

	Dialogues *UnionNullArrayUnionNullDialogueSchema `json:"Dialogues"`

	LastModified *UnionNullLong `json:"LastModified"`

	MeteringPoint *UnionNullString `json:"MeteringPoint"`

	ReceiverGroup *UnionNullString `json:"ReceiverGroup"`

	ReceiverUsername *UnionNullString `json:"ReceiverUsername"`

	SalesForceCaseId *UnionNullString `json:"SalesForceCaseId"`

	SalesforceCaseNumber *UnionNullString `json:"SalesforceCaseNumber"`

	SalesForceUrl *UnionNullString `json:"SalesForceUrl"`

	Sender *UnionNullString `json:"Sender"`

	SenderEmail *UnionNullString `json:"SenderEmail"`

	Status *UnionNullString `json:"Status"`

	SystemName SystemName `json:"SystemName"`

	Title *UnionNullString `json:"Title"`
}

const WorkorderSchemaAvroCRC64Fingerprint = "[w\x80Þ˜mEG"

func NewWorkorderSchema() WorkorderSchema {
	r := WorkorderSchema{}
	r.CaseNumber = nil
	r.ContractNumber = nil
	r.CreatedDate = nil
	r.CustomerName = nil
	r.CustomerNumber = nil
	r.Description = nil
	r.Dialogues = nil
	r.LastModified = nil
	r.MeteringPoint = nil
	r.ReceiverGroup = nil
	r.ReceiverUsername = nil
	r.SalesForceCaseId = nil
	r.SalesforceCaseNumber = nil
	r.SalesForceUrl = nil
	r.Sender = nil
	r.SenderEmail = nil
	r.Status = nil
	r.Title = nil
	return r
}

func DeserializeWorkorderSchema(r io.Reader) (WorkorderSchema, error) {
	t := NewWorkorderSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeWorkorderSchemaFromSchema(r io.Reader, schema string) (WorkorderSchema, error) {
	t := NewWorkorderSchema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeWorkorderSchema(r WorkorderSchema, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CaseNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContractNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.CreatedDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CustomerName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CustomerNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullDialogueSchema(r.Dialogues, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.LastModified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MeteringPoint, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ReceiverGroup, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ReceiverUsername, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SalesForceCaseId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SalesforceCaseNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SalesForceUrl, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Sender, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SenderEmail, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Status, w)
	if err != nil {
		return err
	}
	err = writeSystemName(r.SystemName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Title, w)
	if err != nil {
		return err
	}
	return err
}

func (r WorkorderSchema) Serialize(w io.Writer) error {
	return writeWorkorderSchema(r, w)
}

func (r WorkorderSchema) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CaseNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ContractNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CreatedDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"CustomerName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CustomerNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Dialogues\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"name\":\"CreatedDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"Direction\",\"type\":[\"null\",{\"name\":\"Direction\",\"symbols\":[\"Unknown\",\"In\",\"Out\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"FromAddress\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FromName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Message\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Subject\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ToAddress\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ToName\",\"type\":[\"null\",\"string\"]},{\"name\":\"Type\",\"type\":{\"name\":\"DialogueType\",\"symbols\":[\"Unknown\",\"Note\",\"Chat\",\"Log\",\"Email\",\"SMS\"],\"type\":\"enum\"}}],\"name\":\"DialogueSchema\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"LastModified\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"MeteringPoint\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ReceiverGroup\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ReceiverUsername\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SalesForceCaseId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SalesforceCaseNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SalesForceUrl\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Sender\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SenderEmail\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Status\",\"type\":[\"null\",\"string\"]},{\"name\":\"SystemName\",\"type\":{\"name\":\"SystemName\",\"symbols\":[\"Unknown\",\"Elwin\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"Title\",\"type\":[\"null\",\"string\"]}],\"name\":\"kunde_extensions_external_data_api.Model.WorkorderSchema\",\"type\":\"record\"}"
}

func (r WorkorderSchema) SchemaName() string {
	return "kunde_extensions_external_data_api.Model.WorkorderSchema"
}

func (_ WorkorderSchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ WorkorderSchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ WorkorderSchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ WorkorderSchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ WorkorderSchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ WorkorderSchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ WorkorderSchema) SetString(v string)   { panic("Unsupported operation") }
func (_ WorkorderSchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *WorkorderSchema) Get(i int) types.Field {
	switch i {
	case 0:
		r.CaseNumber = NewUnionNullString()

		return r.CaseNumber
	case 1:
		r.ContractNumber = NewUnionNullString()

		return r.ContractNumber
	case 2:
		r.CreatedDate = NewUnionNullLong()

		return r.CreatedDate
	case 3:
		r.CustomerName = NewUnionNullString()

		return r.CustomerName
	case 4:
		r.CustomerNumber = NewUnionNullString()

		return r.CustomerNumber
	case 5:
		r.Description = NewUnionNullString()

		return r.Description
	case 6:
		r.Dialogues = NewUnionNullArrayUnionNullDialogueSchema()

		return r.Dialogues
	case 7:
		r.LastModified = NewUnionNullLong()

		return r.LastModified
	case 8:
		r.MeteringPoint = NewUnionNullString()

		return r.MeteringPoint
	case 9:
		r.ReceiverGroup = NewUnionNullString()

		return r.ReceiverGroup
	case 10:
		r.ReceiverUsername = NewUnionNullString()

		return r.ReceiverUsername
	case 11:
		r.SalesForceCaseId = NewUnionNullString()

		return r.SalesForceCaseId
	case 12:
		r.SalesforceCaseNumber = NewUnionNullString()

		return r.SalesforceCaseNumber
	case 13:
		r.SalesForceUrl = NewUnionNullString()

		return r.SalesForceUrl
	case 14:
		r.Sender = NewUnionNullString()

		return r.Sender
	case 15:
		r.SenderEmail = NewUnionNullString()

		return r.SenderEmail
	case 16:
		r.Status = NewUnionNullString()

		return r.Status
	case 17:
		w := SystemNameWrapper{Target: &r.SystemName}

		return w

	case 18:
		r.Title = NewUnionNullString()

		return r.Title
	}
	panic("Unknown field index")
}

func (r *WorkorderSchema) SetDefault(i int) {
	switch i {
	case 0:
		r.CaseNumber = nil
		return
	case 1:
		r.ContractNumber = nil
		return
	case 2:
		r.CreatedDate = nil
		return
	case 3:
		r.CustomerName = nil
		return
	case 4:
		r.CustomerNumber = nil
		return
	case 5:
		r.Description = nil
		return
	case 6:
		r.Dialogues = nil
		return
	case 7:
		r.LastModified = nil
		return
	case 8:
		r.MeteringPoint = nil
		return
	case 9:
		r.ReceiverGroup = nil
		return
	case 10:
		r.ReceiverUsername = nil
		return
	case 11:
		r.SalesForceCaseId = nil
		return
	case 12:
		r.SalesforceCaseNumber = nil
		return
	case 13:
		r.SalesForceUrl = nil
		return
	case 14:
		r.Sender = nil
		return
	case 15:
		r.SenderEmail = nil
		return
	case 16:
		r.Status = nil
		return
	case 18:
		r.Title = nil
		return
	}
	panic("Unknown field index")
}

func (r *WorkorderSchema) NullField(i int) {
	switch i {
	case 0:
		r.CaseNumber = nil
		return
	case 1:
		r.ContractNumber = nil
		return
	case 2:
		r.CreatedDate = nil
		return
	case 3:
		r.CustomerName = nil
		return
	case 4:
		r.CustomerNumber = nil
		return
	case 5:
		r.Description = nil
		return
	case 6:
		r.Dialogues = nil
		return
	case 7:
		r.LastModified = nil
		return
	case 8:
		r.MeteringPoint = nil
		return
	case 9:
		r.ReceiverGroup = nil
		return
	case 10:
		r.ReceiverUsername = nil
		return
	case 11:
		r.SalesForceCaseId = nil
		return
	case 12:
		r.SalesforceCaseNumber = nil
		return
	case 13:
		r.SalesForceUrl = nil
		return
	case 14:
		r.Sender = nil
		return
	case 15:
		r.SenderEmail = nil
		return
	case 16:
		r.Status = nil
		return
	case 18:
		r.Title = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ WorkorderSchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ WorkorderSchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ WorkorderSchema) HintSize(int)                     { panic("Unsupported operation") }
func (_ WorkorderSchema) Finalize()                        {}

func (_ WorkorderSchema) AvroCRC64Fingerprint() []byte {
	return []byte(WorkorderSchemaAvroCRC64Fingerprint)
}

func (r WorkorderSchema) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CaseNumber"], err = json.Marshal(r.CaseNumber)
	if err != nil {
		return nil, err
	}
	output["ContractNumber"], err = json.Marshal(r.ContractNumber)
	if err != nil {
		return nil, err
	}
	output["CreatedDate"], err = json.Marshal(r.CreatedDate)
	if err != nil {
		return nil, err
	}
	output["CustomerName"], err = json.Marshal(r.CustomerName)
	if err != nil {
		return nil, err
	}
	output["CustomerNumber"], err = json.Marshal(r.CustomerNumber)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["Dialogues"], err = json.Marshal(r.Dialogues)
	if err != nil {
		return nil, err
	}
	output["LastModified"], err = json.Marshal(r.LastModified)
	if err != nil {
		return nil, err
	}
	output["MeteringPoint"], err = json.Marshal(r.MeteringPoint)
	if err != nil {
		return nil, err
	}
	output["ReceiverGroup"], err = json.Marshal(r.ReceiverGroup)
	if err != nil {
		return nil, err
	}
	output["ReceiverUsername"], err = json.Marshal(r.ReceiverUsername)
	if err != nil {
		return nil, err
	}
	output["SalesForceCaseId"], err = json.Marshal(r.SalesForceCaseId)
	if err != nil {
		return nil, err
	}
	output["SalesforceCaseNumber"], err = json.Marshal(r.SalesforceCaseNumber)
	if err != nil {
		return nil, err
	}
	output["SalesForceUrl"], err = json.Marshal(r.SalesForceUrl)
	if err != nil {
		return nil, err
	}
	output["Sender"], err = json.Marshal(r.Sender)
	if err != nil {
		return nil, err
	}
	output["SenderEmail"], err = json.Marshal(r.SenderEmail)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["SystemName"], err = json.Marshal(r.SystemName)
	if err != nil {
		return nil, err
	}
	output["Title"], err = json.Marshal(r.Title)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *WorkorderSchema) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CaseNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CaseNumber); err != nil {
			return err
		}
	} else {
		r.CaseNumber = NewUnionNullString()

		r.CaseNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContractNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContractNumber); err != nil {
			return err
		}
	} else {
		r.ContractNumber = NewUnionNullString()

		r.ContractNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CreatedDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedDate); err != nil {
			return err
		}
	} else {
		r.CreatedDate = NewUnionNullLong()

		r.CreatedDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CustomerName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CustomerName); err != nil {
			return err
		}
	} else {
		r.CustomerName = NewUnionNullString()

		r.CustomerName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CustomerNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CustomerNumber); err != nil {
			return err
		}
	} else {
		r.CustomerNumber = NewUnionNullString()

		r.CustomerNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Dialogues"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Dialogues); err != nil {
			return err
		}
	} else {
		r.Dialogues = NewUnionNullArrayUnionNullDialogueSchema()

		r.Dialogues = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastModified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModified); err != nil {
			return err
		}
	} else {
		r.LastModified = NewUnionNullLong()

		r.LastModified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeteringPoint"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeteringPoint); err != nil {
			return err
		}
	} else {
		r.MeteringPoint = NewUnionNullString()

		r.MeteringPoint = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReceiverGroup"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReceiverGroup); err != nil {
			return err
		}
	} else {
		r.ReceiverGroup = NewUnionNullString()

		r.ReceiverGroup = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReceiverUsername"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReceiverUsername); err != nil {
			return err
		}
	} else {
		r.ReceiverUsername = NewUnionNullString()

		r.ReceiverUsername = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SalesForceCaseId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SalesForceCaseId); err != nil {
			return err
		}
	} else {
		r.SalesForceCaseId = NewUnionNullString()

		r.SalesForceCaseId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SalesforceCaseNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SalesforceCaseNumber); err != nil {
			return err
		}
	} else {
		r.SalesforceCaseNumber = NewUnionNullString()

		r.SalesforceCaseNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SalesForceUrl"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SalesForceUrl); err != nil {
			return err
		}
	} else {
		r.SalesForceUrl = NewUnionNullString()

		r.SalesForceUrl = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Sender"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Sender); err != nil {
			return err
		}
	} else {
		r.Sender = NewUnionNullString()

		r.Sender = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SenderEmail"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SenderEmail); err != nil {
			return err
		}
	} else {
		r.SenderEmail = NewUnionNullString()

		r.SenderEmail = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		r.Status = NewUnionNullString()

		r.Status = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SystemName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SystemName); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SystemName")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Title"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Title); err != nil {
			return err
		}
	} else {
		r.Title = NewUnionNullString()

		r.Title = nil
	}
	return nil
}
