// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100250_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DialogueSchema struct {
	CreatedDate int64 `json:"CreatedDate"`

	Direction *UnionNullDirection `json:"Direction"`

	FromAddress *UnionNullString `json:"FromAddress"`

	FromName *UnionNullString `json:"FromName"`

	Message *UnionNullString `json:"Message"`

	Subject *UnionNullString `json:"Subject"`

	ToAddress *UnionNullString `json:"ToAddress"`

	ToName *UnionNullString `json:"ToName"`

	Type DialogueType `json:"Type"`
}

const DialogueSchemaAvroCRC64Fingerprint = "\r5\x97P%\b\x9d\x0f"

func NewDialogueSchema() DialogueSchema {
	r := DialogueSchema{}
	r.Direction = nil
	r.FromAddress = nil
	r.FromName = nil
	r.Message = nil
	r.Subject = nil
	r.ToAddress = nil
	r.ToName = nil
	return r
}

func DeserializeDialogueSchema(r io.Reader) (DialogueSchema, error) {
	t := NewDialogueSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDialogueSchemaFromSchema(r io.Reader, schema string) (DialogueSchema, error) {
	t := NewDialogueSchema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDialogueSchema(r DialogueSchema, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.CreatedDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDirection(r.Direction, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FromAddress, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FromName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Message, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Subject, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ToAddress, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ToName, w)
	if err != nil {
		return err
	}
	err = writeDialogueType(r.Type, w)
	if err != nil {
		return err
	}
	return err
}

func (r DialogueSchema) Serialize(w io.Writer) error {
	return writeDialogueSchema(r, w)
}

func (r DialogueSchema) Schema() string {
	return "{\"fields\":[{\"name\":\"CreatedDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"Direction\",\"type\":[\"null\",{\"name\":\"Direction\",\"symbols\":[\"Unknown\",\"In\",\"Out\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"FromAddress\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FromName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Message\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Subject\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ToAddress\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ToName\",\"type\":[\"null\",\"string\"]},{\"name\":\"Type\",\"type\":{\"name\":\"DialogueType\",\"symbols\":[\"Unknown\",\"Note\",\"Chat\",\"Log\",\"Email\",\"SMS\"],\"type\":\"enum\"}}],\"name\":\"kunde_extensions_external_data_api.Model.DialogueSchema\",\"type\":\"record\"}"
}

func (r DialogueSchema) SchemaName() string {
	return "kunde_extensions_external_data_api.Model.DialogueSchema"
}

func (_ DialogueSchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DialogueSchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DialogueSchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DialogueSchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DialogueSchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DialogueSchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DialogueSchema) SetString(v string)   { panic("Unsupported operation") }
func (_ DialogueSchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DialogueSchema) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.CreatedDate}

		return w

	case 1:
		r.Direction = NewUnionNullDirection()

		return r.Direction
	case 2:
		r.FromAddress = NewUnionNullString()

		return r.FromAddress
	case 3:
		r.FromName = NewUnionNullString()

		return r.FromName
	case 4:
		r.Message = NewUnionNullString()

		return r.Message
	case 5:
		r.Subject = NewUnionNullString()

		return r.Subject
	case 6:
		r.ToAddress = NewUnionNullString()

		return r.ToAddress
	case 7:
		r.ToName = NewUnionNullString()

		return r.ToName
	case 8:
		w := DialogueTypeWrapper{Target: &r.Type}

		return w

	}
	panic("Unknown field index")
}

func (r *DialogueSchema) SetDefault(i int) {
	switch i {
	case 1:
		r.Direction = nil
		return
	case 2:
		r.FromAddress = nil
		return
	case 3:
		r.FromName = nil
		return
	case 4:
		r.Message = nil
		return
	case 5:
		r.Subject = nil
		return
	case 6:
		r.ToAddress = nil
		return
	case 7:
		r.ToName = nil
		return
	}
	panic("Unknown field index")
}

func (r *DialogueSchema) NullField(i int) {
	switch i {
	case 1:
		r.Direction = nil
		return
	case 2:
		r.FromAddress = nil
		return
	case 3:
		r.FromName = nil
		return
	case 4:
		r.Message = nil
		return
	case 5:
		r.Subject = nil
		return
	case 6:
		r.ToAddress = nil
		return
	case 7:
		r.ToName = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DialogueSchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DialogueSchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DialogueSchema) HintSize(int)                     { panic("Unsupported operation") }
func (_ DialogueSchema) Finalize()                        {}

func (_ DialogueSchema) AvroCRC64Fingerprint() []byte {
	return []byte(DialogueSchemaAvroCRC64Fingerprint)
}

func (r DialogueSchema) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CreatedDate"], err = json.Marshal(r.CreatedDate)
	if err != nil {
		return nil, err
	}
	output["Direction"], err = json.Marshal(r.Direction)
	if err != nil {
		return nil, err
	}
	output["FromAddress"], err = json.Marshal(r.FromAddress)
	if err != nil {
		return nil, err
	}
	output["FromName"], err = json.Marshal(r.FromName)
	if err != nil {
		return nil, err
	}
	output["Message"], err = json.Marshal(r.Message)
	if err != nil {
		return nil, err
	}
	output["Subject"], err = json.Marshal(r.Subject)
	if err != nil {
		return nil, err
	}
	output["ToAddress"], err = json.Marshal(r.ToAddress)
	if err != nil {
		return nil, err
	}
	output["ToName"], err = json.Marshal(r.ToName)
	if err != nil {
		return nil, err
	}
	output["Type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DialogueSchema) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CreatedDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CreatedDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Direction"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Direction); err != nil {
			return err
		}
	} else {
		r.Direction = NewUnionNullDirection()

		r.Direction = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FromAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FromAddress); err != nil {
			return err
		}
	} else {
		r.FromAddress = NewUnionNullString()

		r.FromAddress = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FromName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FromName); err != nil {
			return err
		}
	} else {
		r.FromName = NewUnionNullString()

		r.FromName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Message"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Message); err != nil {
			return err
		}
	} else {
		r.Message = NewUnionNullString()

		r.Message = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Subject"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Subject); err != nil {
			return err
		}
	} else {
		r.Subject = NewUnionNullString()

		r.Subject = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ToAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ToAddress); err != nil {
			return err
		}
	} else {
		r.ToAddress = NewUnionNullString()

		r.ToAddress = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ToName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ToName); err != nil {
			return err
		}
	} else {
		r.ToName = NewUnionNullString()

		r.ToName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Type")
	}
	return nil
}
