// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100479_10.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Kontaktinformasjon struct {
	Beskrivelse *UnionNullString `json:"Beskrivelse"`

	KommunikasjonsType KommunikasjonsType `json:"KommunikasjonsType"`

	Verdi string `json:"Verdi"`
}

const KontaktinformasjonAvroCRC64Fingerprint = "\xf9[QM\xe1\xc3\\\x14"

func NewKontaktinformasjon() Kontaktinformasjon {
	r := Kontaktinformasjon{}
	r.Beskrivelse = nil
	return r
}

func DeserializeKontaktinformasjon(r io.Reader) (Kontaktinformasjon, error) {
	t := NewKontaktinformasjon()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeKontaktinformasjonFromSchema(r io.Reader, schema string) (Kontaktinformasjon, error) {
	t := NewKontaktinformasjon()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeKontaktinformasjon(r Kontaktinformasjon, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Beskrivelse, w)
	if err != nil {
		return err
	}
	err = writeKommunikasjonsType(r.KommunikasjonsType, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Verdi, w)
	if err != nil {
		return err
	}
	return err
}

func (r Kontaktinformasjon) Serialize(w io.Writer) error {
	return writeKontaktinformasjon(r, w)
}

func (r Kontaktinformasjon) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Beskrivelse\",\"type\":[\"null\",\"string\"]},{\"name\":\"KommunikasjonsType\",\"type\":{\"name\":\"KommunikasjonsType\",\"symbols\":[\"Mobil\",\"Telefon\",\"Epost\",\"Telefax\"],\"type\":\"enum\"}},{\"name\":\"Verdi\",\"type\":\"string\"}],\"name\":\"Mmm.Schemas.NettleieAvtale.V1.Kontaktinformasjon\",\"type\":\"record\"}"
}

func (r Kontaktinformasjon) SchemaName() string {
	return "Mmm.Schemas.NettleieAvtale.V1.Kontaktinformasjon"
}

func (_ Kontaktinformasjon) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Kontaktinformasjon) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Kontaktinformasjon) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Kontaktinformasjon) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Kontaktinformasjon) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Kontaktinformasjon) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Kontaktinformasjon) SetString(v string)   { panic("Unsupported operation") }
func (_ Kontaktinformasjon) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Kontaktinformasjon) Get(i int) types.Field {
	switch i {
	case 0:
		r.Beskrivelse = NewUnionNullString()

		return r.Beskrivelse
	case 1:
		w := KommunikasjonsTypeWrapper{Target: &r.KommunikasjonsType}

		return w

	case 2:
		w := types.String{Target: &r.Verdi}

		return w

	}
	panic("Unknown field index")
}

func (r *Kontaktinformasjon) SetDefault(i int) {
	switch i {
	case 0:
		r.Beskrivelse = nil
		return
	}
	panic("Unknown field index")
}

func (r *Kontaktinformasjon) NullField(i int) {
	switch i {
	case 0:
		r.Beskrivelse = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Kontaktinformasjon) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Kontaktinformasjon) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Kontaktinformasjon) HintSize(int)                     { panic("Unsupported operation") }
func (_ Kontaktinformasjon) Finalize()                        {}

func (_ Kontaktinformasjon) AvroCRC64Fingerprint() []byte {
	return []byte(KontaktinformasjonAvroCRC64Fingerprint)
}

func (r Kontaktinformasjon) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Beskrivelse"], err = json.Marshal(r.Beskrivelse)
	if err != nil {
		return nil, err
	}
	output["KommunikasjonsType"], err = json.Marshal(r.KommunikasjonsType)
	if err != nil {
		return nil, err
	}
	output["Verdi"], err = json.Marshal(r.Verdi)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Kontaktinformasjon) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Beskrivelse"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Beskrivelse); err != nil {
			return err
		}
	} else {
		r.Beskrivelse = NewUnionNullString()

		r.Beskrivelse = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["KommunikasjonsType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.KommunikasjonsType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for KommunikasjonsType")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Verdi"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Verdi); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Verdi")
	}
	return nil
}
