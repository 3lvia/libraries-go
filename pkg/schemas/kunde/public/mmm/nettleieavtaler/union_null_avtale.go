// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100479_10.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullAvtaleTypeEnum int

const (
	UnionNullAvtaleTypeEnumAvtale UnionNullAvtaleTypeEnum = 1
)

type UnionNullAvtale struct {
	Null      *types.NullVal
	Avtale    Avtale
	UnionType UnionNullAvtaleTypeEnum
}

func writeUnionNullAvtale(r *UnionNullAvtale, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullAvtaleTypeEnumAvtale:
		return writeAvtale(r.Avtale, w)
	}
	return fmt.Errorf("invalid value for *UnionNullAvtale")
}

func NewUnionNullAvtale() *UnionNullAvtale {
	return &UnionNullAvtale{}
}

func (r *UnionNullAvtale) Serialize(w io.Writer) error {
	return writeUnionNullAvtale(r, w)
}

func DeserializeUnionNullAvtale(r io.Reader) (*UnionNullAvtale, error) {
	t := NewUnionNullAvtale()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullAvtaleFromSchema(r io.Reader, schema string) (*UnionNullAvtale, error) {
	t := NewUnionNullAvtale()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullAvtale) Schema() string {
	return "[\"null\",{\"fields\":[{\"name\":\"AvtaleId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"FakturaAdresse\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"Bruksenhetsnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CoAdresse\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Etasje\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Gatenavn\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Husnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Kommunenummer\",\"type\":[\"null\",\"string\"]},{\"name\":\"Landkode\",\"type\":\"string\"},{\"default\":null,\"name\":\"Postboks\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostboksAnleggsnavn\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Postnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Poststed\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PaaVegneAv\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VedPerson\",\"type\":[\"null\",\"string\"]}],\"name\":\"Adresse\",\"type\":\"record\"}},{\"name\":\"Kontaktinformasjon\",\"type\":{\"items\":{\"fields\":[{\"default\":null,\"name\":\"Beskrivelse\",\"type\":[\"null\",\"string\"]},{\"name\":\"KommunikasjonsType\",\"type\":{\"name\":\"KommunikasjonsType\",\"symbols\":[\"Mobil\",\"Telefon\",\"Epost\",\"Telefax\"],\"type\":\"enum\"}},{\"name\":\"Verdi\",\"type\":\"string\"}],\"name\":\"Kontaktinformasjon\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"Kunde\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"Etternavn\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Foedselsnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Fornavn\",\"type\":[\"null\",\"string\"]},{\"name\":\"KundeGuid\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Organisasjonsnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Virksomhetsnavn\",\"type\":[\"null\",\"string\"]}],\"name\":\"Kunde\",\"type\":\"record\"}},{\"name\":\"Leverandoerer\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Gln\",\"type\":\"string\"},{\"name\":\"Startdato\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Leverandoer\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"MaalepunktId\",\"type\":\"string\"},{\"default\":null,\"name\":\"PostAdresse\",\"type\":[\"null\",\"Mmm.Schemas.NettleieAvtale.V1.Adresse\"]},{\"default\":null,\"name\":\"Sluttdato\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Startdato\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Avtale\",\"type\":\"record\"}]"
}

func (_ *UnionNullAvtale) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullAvtale) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullAvtale) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullAvtale) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullAvtale) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullAvtale) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullAvtale) SetLong(v int64) {

	r.UnionType = (UnionNullAvtaleTypeEnum)(v)
}

func (r *UnionNullAvtale) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.Avtale = NewAvtale()
		return &types.Record{Target: (&r.Avtale)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullAvtale) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullAvtale) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullAvtale) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullAvtale) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullAvtale) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullAvtale) Finalize()                        {}

func (r *UnionNullAvtale) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullAvtaleTypeEnumAvtale:
		return json.Marshal(map[string]interface{}{"Mmm.Schemas.NettleieAvtale.V1.Avtale": r.Avtale})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullAvtale")
}

func (r *UnionNullAvtale) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Mmm.Schemas.NettleieAvtale.V1.Avtale"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Avtale)
	}
	return fmt.Errorf("invalid value for *UnionNullAvtale")
}
