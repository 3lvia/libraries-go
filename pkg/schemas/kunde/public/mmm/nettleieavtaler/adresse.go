// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100479_10.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Adresse struct {
	Bruksenhetsnummer *UnionNullString `json:"Bruksenhetsnummer"`

	CoAdresse *UnionNullString `json:"CoAdresse"`

	Etasje *UnionNullString `json:"Etasje"`

	Gatenavn *UnionNullString `json:"Gatenavn"`

	Husnummer *UnionNullString `json:"Husnummer"`

	Kommunenummer *UnionNullString `json:"Kommunenummer"`

	Landkode string `json:"Landkode"`

	Postboks *UnionNullString `json:"Postboks"`

	PostboksAnleggsnavn *UnionNullString `json:"PostboksAnleggsnavn"`

	Postnummer *UnionNullString `json:"Postnummer"`

	Poststed *UnionNullString `json:"Poststed"`

	PaaVegneAv *UnionNullString `json:"PaaVegneAv"`

	VedPerson *UnionNullString `json:"VedPerson"`
}

const AdresseAvroCRC64Fingerprint = "w@[Í‰\xc5Mi"

func NewAdresse() Adresse {
	r := Adresse{}
	r.Bruksenhetsnummer = nil
	r.CoAdresse = nil
	r.Etasje = nil
	r.Gatenavn = nil
	r.Husnummer = nil
	r.Kommunenummer = nil
	r.Postboks = nil
	r.PostboksAnleggsnavn = nil
	r.Postnummer = nil
	r.Poststed = nil
	r.PaaVegneAv = nil
	r.VedPerson = nil
	return r
}

func DeserializeAdresse(r io.Reader) (Adresse, error) {
	t := NewAdresse()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAdresseFromSchema(r io.Reader, schema string) (Adresse, error) {
	t := NewAdresse()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAdresse(r Adresse, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Bruksenhetsnummer, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CoAdresse, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Etasje, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Gatenavn, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Husnummer, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Kommunenummer, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Landkode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Postboks, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PostboksAnleggsnavn, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Postnummer, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Poststed, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PaaVegneAv, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.VedPerson, w)
	if err != nil {
		return err
	}
	return err
}

func (r Adresse) Serialize(w io.Writer) error {
	return writeAdresse(r, w)
}

func (r Adresse) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Bruksenhetsnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CoAdresse\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Etasje\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Gatenavn\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Husnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Kommunenummer\",\"type\":[\"null\",\"string\"]},{\"name\":\"Landkode\",\"type\":\"string\"},{\"default\":null,\"name\":\"Postboks\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostboksAnleggsnavn\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Postnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Poststed\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PaaVegneAv\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VedPerson\",\"type\":[\"null\",\"string\"]}],\"name\":\"Mmm.Schemas.NettleieAvtale.V1.Adresse\",\"type\":\"record\"}"
}

func (r Adresse) SchemaName() string {
	return "Mmm.Schemas.NettleieAvtale.V1.Adresse"
}

func (_ Adresse) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Adresse) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Adresse) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Adresse) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Adresse) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Adresse) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Adresse) SetString(v string)   { panic("Unsupported operation") }
func (_ Adresse) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Adresse) Get(i int) types.Field {
	switch i {
	case 0:
		r.Bruksenhetsnummer = NewUnionNullString()

		return r.Bruksenhetsnummer
	case 1:
		r.CoAdresse = NewUnionNullString()

		return r.CoAdresse
	case 2:
		r.Etasje = NewUnionNullString()

		return r.Etasje
	case 3:
		r.Gatenavn = NewUnionNullString()

		return r.Gatenavn
	case 4:
		r.Husnummer = NewUnionNullString()

		return r.Husnummer
	case 5:
		r.Kommunenummer = NewUnionNullString()

		return r.Kommunenummer
	case 6:
		w := types.String{Target: &r.Landkode}

		return w

	case 7:
		r.Postboks = NewUnionNullString()

		return r.Postboks
	case 8:
		r.PostboksAnleggsnavn = NewUnionNullString()

		return r.PostboksAnleggsnavn
	case 9:
		r.Postnummer = NewUnionNullString()

		return r.Postnummer
	case 10:
		r.Poststed = NewUnionNullString()

		return r.Poststed
	case 11:
		r.PaaVegneAv = NewUnionNullString()

		return r.PaaVegneAv
	case 12:
		r.VedPerson = NewUnionNullString()

		return r.VedPerson
	}
	panic("Unknown field index")
}

func (r *Adresse) SetDefault(i int) {
	switch i {
	case 0:
		r.Bruksenhetsnummer = nil
		return
	case 1:
		r.CoAdresse = nil
		return
	case 2:
		r.Etasje = nil
		return
	case 3:
		r.Gatenavn = nil
		return
	case 4:
		r.Husnummer = nil
		return
	case 5:
		r.Kommunenummer = nil
		return
	case 7:
		r.Postboks = nil
		return
	case 8:
		r.PostboksAnleggsnavn = nil
		return
	case 9:
		r.Postnummer = nil
		return
	case 10:
		r.Poststed = nil
		return
	case 11:
		r.PaaVegneAv = nil
		return
	case 12:
		r.VedPerson = nil
		return
	}
	panic("Unknown field index")
}

func (r *Adresse) NullField(i int) {
	switch i {
	case 0:
		r.Bruksenhetsnummer = nil
		return
	case 1:
		r.CoAdresse = nil
		return
	case 2:
		r.Etasje = nil
		return
	case 3:
		r.Gatenavn = nil
		return
	case 4:
		r.Husnummer = nil
		return
	case 5:
		r.Kommunenummer = nil
		return
	case 7:
		r.Postboks = nil
		return
	case 8:
		r.PostboksAnleggsnavn = nil
		return
	case 9:
		r.Postnummer = nil
		return
	case 10:
		r.Poststed = nil
		return
	case 11:
		r.PaaVegneAv = nil
		return
	case 12:
		r.VedPerson = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Adresse) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Adresse) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Adresse) HintSize(int)                     { panic("Unsupported operation") }
func (_ Adresse) Finalize()                        {}

func (_ Adresse) AvroCRC64Fingerprint() []byte {
	return []byte(AdresseAvroCRC64Fingerprint)
}

func (r Adresse) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Bruksenhetsnummer"], err = json.Marshal(r.Bruksenhetsnummer)
	if err != nil {
		return nil, err
	}
	output["CoAdresse"], err = json.Marshal(r.CoAdresse)
	if err != nil {
		return nil, err
	}
	output["Etasje"], err = json.Marshal(r.Etasje)
	if err != nil {
		return nil, err
	}
	output["Gatenavn"], err = json.Marshal(r.Gatenavn)
	if err != nil {
		return nil, err
	}
	output["Husnummer"], err = json.Marshal(r.Husnummer)
	if err != nil {
		return nil, err
	}
	output["Kommunenummer"], err = json.Marshal(r.Kommunenummer)
	if err != nil {
		return nil, err
	}
	output["Landkode"], err = json.Marshal(r.Landkode)
	if err != nil {
		return nil, err
	}
	output["Postboks"], err = json.Marshal(r.Postboks)
	if err != nil {
		return nil, err
	}
	output["PostboksAnleggsnavn"], err = json.Marshal(r.PostboksAnleggsnavn)
	if err != nil {
		return nil, err
	}
	output["Postnummer"], err = json.Marshal(r.Postnummer)
	if err != nil {
		return nil, err
	}
	output["Poststed"], err = json.Marshal(r.Poststed)
	if err != nil {
		return nil, err
	}
	output["PaaVegneAv"], err = json.Marshal(r.PaaVegneAv)
	if err != nil {
		return nil, err
	}
	output["VedPerson"], err = json.Marshal(r.VedPerson)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Adresse) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Bruksenhetsnummer"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Bruksenhetsnummer); err != nil {
			return err
		}
	} else {
		r.Bruksenhetsnummer = NewUnionNullString()

		r.Bruksenhetsnummer = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CoAdresse"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CoAdresse); err != nil {
			return err
		}
	} else {
		r.CoAdresse = NewUnionNullString()

		r.CoAdresse = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Etasje"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Etasje); err != nil {
			return err
		}
	} else {
		r.Etasje = NewUnionNullString()

		r.Etasje = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Gatenavn"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gatenavn); err != nil {
			return err
		}
	} else {
		r.Gatenavn = NewUnionNullString()

		r.Gatenavn = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Husnummer"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Husnummer); err != nil {
			return err
		}
	} else {
		r.Husnummer = NewUnionNullString()

		r.Husnummer = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Kommunenummer"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Kommunenummer); err != nil {
			return err
		}
	} else {
		r.Kommunenummer = NewUnionNullString()

		r.Kommunenummer = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Landkode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Landkode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Landkode")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Postboks"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Postboks); err != nil {
			return err
		}
	} else {
		r.Postboks = NewUnionNullString()

		r.Postboks = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PostboksAnleggsnavn"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostboksAnleggsnavn); err != nil {
			return err
		}
	} else {
		r.PostboksAnleggsnavn = NewUnionNullString()

		r.PostboksAnleggsnavn = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Postnummer"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Postnummer); err != nil {
			return err
		}
	} else {
		r.Postnummer = NewUnionNullString()

		r.Postnummer = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Poststed"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Poststed); err != nil {
			return err
		}
	} else {
		r.Poststed = NewUnionNullString()

		r.Poststed = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PaaVegneAv"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaaVegneAv); err != nil {
			return err
		}
	} else {
		r.PaaVegneAv = NewUnionNullString()

		r.PaaVegneAv = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["VedPerson"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VedPerson); err != nil {
			return err
		}
	} else {
		r.VedPerson = NewUnionNullString()

		r.VedPerson = nil
	}
	return nil
}
