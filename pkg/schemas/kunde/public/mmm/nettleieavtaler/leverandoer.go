// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100479_10.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Leverandoer struct {
	Gln string `json:"Gln"`

	Startdato int64 `json:"Startdato"`
}

const LeverandoerAvroCRC64Fingerprint = "\xeb‘µ]\xb0\xa3c\v"

func NewLeverandoer() Leverandoer {
	r := Leverandoer{}
	return r
}

func DeserializeLeverandoer(r io.Reader) (Leverandoer, error) {
	t := NewLeverandoer()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLeverandoerFromSchema(r io.Reader, schema string) (Leverandoer, error) {
	t := NewLeverandoer()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLeverandoer(r Leverandoer, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Gln, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Startdato, w)
	if err != nil {
		return err
	}
	return err
}

func (r Leverandoer) Serialize(w io.Writer) error {
	return writeLeverandoer(r, w)
}

func (r Leverandoer) Schema() string {
	return "{\"fields\":[{\"name\":\"Gln\",\"type\":\"string\"},{\"name\":\"Startdato\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Mmm.Schemas.NettleieAvtale.V1.Leverandoer\",\"type\":\"record\"}"
}

func (r Leverandoer) SchemaName() string {
	return "Mmm.Schemas.NettleieAvtale.V1.Leverandoer"
}

func (_ Leverandoer) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Leverandoer) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Leverandoer) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Leverandoer) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Leverandoer) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Leverandoer) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Leverandoer) SetString(v string)   { panic("Unsupported operation") }
func (_ Leverandoer) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Leverandoer) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Gln}

		return w

	case 1:
		w := types.Long{Target: &r.Startdato}

		return w

	}
	panic("Unknown field index")
}

func (r *Leverandoer) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Leverandoer) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Leverandoer) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Leverandoer) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Leverandoer) HintSize(int)                     { panic("Unsupported operation") }
func (_ Leverandoer) Finalize()                        {}

func (_ Leverandoer) AvroCRC64Fingerprint() []byte {
	return []byte(LeverandoerAvroCRC64Fingerprint)
}

func (r Leverandoer) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Gln"], err = json.Marshal(r.Gln)
	if err != nil {
		return nil, err
	}
	output["Startdato"], err = json.Marshal(r.Startdato)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Leverandoer) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Gln"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gln); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Gln")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Startdato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Startdato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Startdato")
	}
	return nil
}
