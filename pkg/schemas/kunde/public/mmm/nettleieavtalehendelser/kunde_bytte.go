// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100480_13.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type KundeBytte struct {
	Avtale Avtale `json:"Avtale"`

	AvtaleId string `json:"AvtaleId"`

	Hendelsestype string `json:"Hendelsestype"`

	Id string `json:"Id"`

	MaalepunktId string `json:"MaalepunktId"`
}

const KundeBytteAvroCRC64Fingerprint = "\xac\x8bg\xb8\x9b\x1d\xbcx"

func NewKundeBytte() KundeBytte {
	r := KundeBytte{}
	r.Avtale = NewAvtale()

	return r
}

func DeserializeKundeBytte(r io.Reader) (KundeBytte, error) {
	t := NewKundeBytte()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeKundeBytteFromSchema(r io.Reader, schema string) (KundeBytte, error) {
	t := NewKundeBytte()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeKundeBytte(r KundeBytte, w io.Writer) error {
	var err error
	err = writeAvtale(r.Avtale, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AvtaleId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Hendelsestype, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MaalepunktId, w)
	if err != nil {
		return err
	}
	return err
}

func (r KundeBytte) Serialize(w io.Writer) error {
	return writeKundeBytte(r, w)
}

func (r KundeBytte) Schema() string {
	return "{\"fields\":[{\"name\":\"Avtale\",\"type\":{\"fields\":[{\"name\":\"AvtaleId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"FakturaAdresse\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"Bruksenhetsnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CoAdresse\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Etasje\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Gatenavn\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Husnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Kommunenummer\",\"type\":[\"null\",\"string\"]},{\"name\":\"Landkode\",\"type\":\"string\"},{\"default\":null,\"name\":\"Postboks\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostboksAnleggsnavn\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Postnummer\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Poststed\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PaaVegneAv\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"VedPerson\",\"type\":[\"null\",\"string\"]}],\"name\":\"Adresse\",\"type\":\"record\"}},{\"name\":\"Kontaktinformasjon\",\"type\":{\"items\":{\"fields\":[{\"default\":null,\"name\":\"Beskrivelse\",\"type\":[\"null\",\"string\"]},{\"name\":\"KommunikasjonsType\",\"type\":{\"name\":\"KommunikasjonsType\",\"symbols\":[\"Mobil\",\"Telefon\",\"Epost\",\"Telefax\"],\"type\":\"enum\"}},{\"name\":\"Verdi\",\"type\":\"string\"}],\"name\":\"Kontaktinformasjon\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"Kunde\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"Etternavn\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Fornavn\",\"type\":[\"null\",\"string\"]},{\"name\":\"KundeGuid\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Virksomhetsnavn\",\"type\":[\"null\",\"string\"]}],\"name\":\"Kunde\",\"type\":\"record\"}},{\"name\":\"Leverandoerer\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Gln\",\"type\":\"string\"},{\"name\":\"Startdato\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Leverandoer\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"MaalepunktId\",\"type\":\"string\"},{\"default\":null,\"name\":\"PostAdresse\",\"type\":[\"null\",\"Mmm.Schemas.NettleieAvtaleHendelser.V1.Adresse\"]},{\"default\":null,\"name\":\"Sluttdato\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"Startdato\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Avtale\",\"type\":\"record\"}},{\"name\":\"AvtaleId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"Hendelsestype\",\"type\":\"string\"},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"MaalepunktId\",\"type\":\"string\"}],\"name\":\"Mmm.Schemas.NettleieAvtaleHendelser.V1.KundeBytte\",\"type\":\"record\"}"
}

func (r KundeBytte) SchemaName() string {
	return "Mmm.Schemas.NettleieAvtaleHendelser.V1.KundeBytte"
}

func (_ KundeBytte) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ KundeBytte) SetInt(v int32)       { panic("Unsupported operation") }
func (_ KundeBytte) SetLong(v int64)      { panic("Unsupported operation") }
func (_ KundeBytte) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ KundeBytte) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ KundeBytte) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ KundeBytte) SetString(v string)   { panic("Unsupported operation") }
func (_ KundeBytte) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *KundeBytte) Get(i int) types.Field {
	switch i {
	case 0:
		r.Avtale = NewAvtale()

		w := types.Record{Target: &r.Avtale}

		return w

	case 1:
		w := types.String{Target: &r.AvtaleId}

		return w

	case 2:
		w := types.String{Target: &r.Hendelsestype}

		return w

	case 3:
		w := types.String{Target: &r.Id}

		return w

	case 4:
		w := types.String{Target: &r.MaalepunktId}

		return w

	}
	panic("Unknown field index")
}

func (r *KundeBytte) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *KundeBytte) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ KundeBytte) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ KundeBytte) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ KundeBytte) HintSize(int)                     { panic("Unsupported operation") }
func (_ KundeBytte) Finalize()                        {}

func (_ KundeBytte) AvroCRC64Fingerprint() []byte {
	return []byte(KundeBytteAvroCRC64Fingerprint)
}

func (r KundeBytte) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Avtale"], err = json.Marshal(r.Avtale)
	if err != nil {
		return nil, err
	}
	output["AvtaleId"], err = json.Marshal(r.AvtaleId)
	if err != nil {
		return nil, err
	}
	output["Hendelsestype"], err = json.Marshal(r.Hendelsestype)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["MaalepunktId"], err = json.Marshal(r.MaalepunktId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *KundeBytte) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Avtale"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Avtale); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Avtale")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AvtaleId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AvtaleId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AvtaleId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Hendelsestype"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Hendelsestype); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Hendelsestype")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaalepunktId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaalepunktId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MaalepunktId")
	}
	return nil
}
