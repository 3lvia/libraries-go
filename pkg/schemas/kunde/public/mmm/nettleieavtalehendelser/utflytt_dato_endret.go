// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100480_13.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type UtflyttDatoEndret struct {
	AvtaleId string `json:"AvtaleId"`

	GammelSluttdato int64 `json:"GammelSluttdato"`

	Hendelsestype string `json:"Hendelsestype"`

	Id string `json:"Id"`

	KundeGuid string `json:"KundeGuid"`

	MaalepunktId string `json:"MaalepunktId"`

	NySluttdato int64 `json:"NySluttdato"`
}

const UtflyttDatoEndretAvroCRC64Fingerprint = "\x83\x93\xe1\xf9\xf4\xcd'\xe8"

func NewUtflyttDatoEndret() UtflyttDatoEndret {
	r := UtflyttDatoEndret{}
	return r
}

func DeserializeUtflyttDatoEndret(r io.Reader) (UtflyttDatoEndret, error) {
	t := NewUtflyttDatoEndret()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUtflyttDatoEndretFromSchema(r io.Reader, schema string) (UtflyttDatoEndret, error) {
	t := NewUtflyttDatoEndret()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUtflyttDatoEndret(r UtflyttDatoEndret, w io.Writer) error {
	var err error
	err = vm.WriteString(r.AvtaleId, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.GammelSluttdato, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Hendelsestype, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.KundeGuid, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MaalepunktId, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.NySluttdato, w)
	if err != nil {
		return err
	}
	return err
}

func (r UtflyttDatoEndret) Serialize(w io.Writer) error {
	return writeUtflyttDatoEndret(r, w)
}

func (r UtflyttDatoEndret) Schema() string {
	return "{\"fields\":[{\"name\":\"AvtaleId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"GammelSluttdato\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"Hendelsestype\",\"type\":\"string\"},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"KundeGuid\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"MaalepunktId\",\"type\":\"string\"},{\"name\":\"NySluttdato\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Mmm.Schemas.NettleieAvtaleHendelser.V1.UtflyttDatoEndret\",\"type\":\"record\"}"
}

func (r UtflyttDatoEndret) SchemaName() string {
	return "Mmm.Schemas.NettleieAvtaleHendelser.V1.UtflyttDatoEndret"
}

func (_ UtflyttDatoEndret) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ UtflyttDatoEndret) SetInt(v int32)       { panic("Unsupported operation") }
func (_ UtflyttDatoEndret) SetLong(v int64)      { panic("Unsupported operation") }
func (_ UtflyttDatoEndret) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ UtflyttDatoEndret) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ UtflyttDatoEndret) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ UtflyttDatoEndret) SetString(v string)   { panic("Unsupported operation") }
func (_ UtflyttDatoEndret) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *UtflyttDatoEndret) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.AvtaleId}

		return w

	case 1:
		w := types.Long{Target: &r.GammelSluttdato}

		return w

	case 2:
		w := types.String{Target: &r.Hendelsestype}

		return w

	case 3:
		w := types.String{Target: &r.Id}

		return w

	case 4:
		w := types.String{Target: &r.KundeGuid}

		return w

	case 5:
		w := types.String{Target: &r.MaalepunktId}

		return w

	case 6:
		w := types.Long{Target: &r.NySluttdato}

		return w

	}
	panic("Unknown field index")
}

func (r *UtflyttDatoEndret) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *UtflyttDatoEndret) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ UtflyttDatoEndret) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ UtflyttDatoEndret) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ UtflyttDatoEndret) HintSize(int)                     { panic("Unsupported operation") }
func (_ UtflyttDatoEndret) Finalize()                        {}

func (_ UtflyttDatoEndret) AvroCRC64Fingerprint() []byte {
	return []byte(UtflyttDatoEndretAvroCRC64Fingerprint)
}

func (r UtflyttDatoEndret) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AvtaleId"], err = json.Marshal(r.AvtaleId)
	if err != nil {
		return nil, err
	}
	output["GammelSluttdato"], err = json.Marshal(r.GammelSluttdato)
	if err != nil {
		return nil, err
	}
	output["Hendelsestype"], err = json.Marshal(r.Hendelsestype)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["KundeGuid"], err = json.Marshal(r.KundeGuid)
	if err != nil {
		return nil, err
	}
	output["MaalepunktId"], err = json.Marshal(r.MaalepunktId)
	if err != nil {
		return nil, err
	}
	output["NySluttdato"], err = json.Marshal(r.NySluttdato)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *UtflyttDatoEndret) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AvtaleId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AvtaleId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AvtaleId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["GammelSluttdato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GammelSluttdato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for GammelSluttdato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Hendelsestype"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Hendelsestype); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Hendelsestype")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["KundeGuid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.KundeGuid); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for KundeGuid")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaalepunktId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaalepunktId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MaalepunktId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["NySluttdato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NySluttdato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NySluttdato")
	}
	return nil
}
