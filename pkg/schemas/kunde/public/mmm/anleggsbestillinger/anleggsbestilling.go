// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100349_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Anleggsbestilling struct {
	BestillingsId string `json:"BestillingsId"`

	BestillingsType string `json:"BestillingsType"`

	Innflyttingsdato int64 `json:"Innflyttingsdato"`

	MaalepunktId *UnionNullString `json:"MaalepunktId"`
}

const AnleggsbestillingAvroCRC64Fingerprint = "\"\xb3\xe5y\x1fTU\xe8"

func NewAnleggsbestilling() Anleggsbestilling {
	r := Anleggsbestilling{}
	r.MaalepunktId = nil
	return r
}

func DeserializeAnleggsbestilling(r io.Reader) (Anleggsbestilling, error) {
	t := NewAnleggsbestilling()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAnleggsbestillingFromSchema(r io.Reader, schema string) (Anleggsbestilling, error) {
	t := NewAnleggsbestilling()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAnleggsbestilling(r Anleggsbestilling, w io.Writer) error {
	var err error
	err = vm.WriteString(r.BestillingsId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.BestillingsType, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Innflyttingsdato, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MaalepunktId, w)
	if err != nil {
		return err
	}
	return err
}

func (r Anleggsbestilling) Serialize(w io.Writer) error {
	return writeAnleggsbestilling(r, w)
}

func (r Anleggsbestilling) Schema() string {
	return "{\"fields\":[{\"name\":\"BestillingsId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"BestillingsType\",\"type\":\"string\"},{\"name\":\"Innflyttingsdato\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"MaalepunktId\",\"type\":[\"null\",\"string\"]}],\"name\":\"Mmm.Schemas.Anleggsbestilling.V1.Anleggsbestilling\",\"type\":\"record\"}"
}

func (r Anleggsbestilling) SchemaName() string {
	return "Mmm.Schemas.Anleggsbestilling.V1.Anleggsbestilling"
}

func (_ Anleggsbestilling) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Anleggsbestilling) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Anleggsbestilling) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Anleggsbestilling) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Anleggsbestilling) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Anleggsbestilling) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Anleggsbestilling) SetString(v string)   { panic("Unsupported operation") }
func (_ Anleggsbestilling) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Anleggsbestilling) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.BestillingsId}

		return w

	case 1:
		w := types.String{Target: &r.BestillingsType}

		return w

	case 2:
		w := types.Long{Target: &r.Innflyttingsdato}

		return w

	case 3:
		r.MaalepunktId = NewUnionNullString()

		return r.MaalepunktId
	}
	panic("Unknown field index")
}

func (r *Anleggsbestilling) SetDefault(i int) {
	switch i {
	case 3:
		r.MaalepunktId = nil
		return
	}
	panic("Unknown field index")
}

func (r *Anleggsbestilling) NullField(i int) {
	switch i {
	case 3:
		r.MaalepunktId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Anleggsbestilling) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Anleggsbestilling) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Anleggsbestilling) HintSize(int)                     { panic("Unsupported operation") }
func (_ Anleggsbestilling) Finalize()                        {}

func (_ Anleggsbestilling) AvroCRC64Fingerprint() []byte {
	return []byte(AnleggsbestillingAvroCRC64Fingerprint)
}

func (r Anleggsbestilling) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["BestillingsId"], err = json.Marshal(r.BestillingsId)
	if err != nil {
		return nil, err
	}
	output["BestillingsType"], err = json.Marshal(r.BestillingsType)
	if err != nil {
		return nil, err
	}
	output["Innflyttingsdato"], err = json.Marshal(r.Innflyttingsdato)
	if err != nil {
		return nil, err
	}
	output["MaalepunktId"], err = json.Marshal(r.MaalepunktId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Anleggsbestilling) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["BestillingsId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BestillingsId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for BestillingsId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["BestillingsType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BestillingsType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for BestillingsType")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Innflyttingsdato"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Innflyttingsdato); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Innflyttingsdato")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaalepunktId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaalepunktId); err != nil {
			return err
		}
	} else {
		r.MaalepunktId = NewUnionNullString()

		r.MaalepunktId = nil
	}
	return nil
}
