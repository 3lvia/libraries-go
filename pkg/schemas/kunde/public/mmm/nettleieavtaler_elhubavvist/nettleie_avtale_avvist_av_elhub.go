// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100432_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NettleieAvtaleAvvistAvElhub struct {
	AvtaleId string `json:"AvtaleId"`

	AvvistMeldingId string `json:"AvvistMeldingId"`

	Bruker string `json:"Bruker"`

	ElhubFeil []string `json:"ElhubFeil"`

	Id string `json:"Id"`

	MaalepunktId string `json:"MaalepunktId"`
}

const NettleieAvtaleAvvistAvElhubAvroCRC64Fingerprint = "\xab{V\xd4\x00$M\xd5"

func NewNettleieAvtaleAvvistAvElhub() NettleieAvtaleAvvistAvElhub {
	r := NettleieAvtaleAvvistAvElhub{}
	r.ElhubFeil = make([]string, 0)

	return r
}

func DeserializeNettleieAvtaleAvvistAvElhub(r io.Reader) (NettleieAvtaleAvvistAvElhub, error) {
	t := NewNettleieAvtaleAvvistAvElhub()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNettleieAvtaleAvvistAvElhubFromSchema(r io.Reader, schema string) (NettleieAvtaleAvvistAvElhub, error) {
	t := NewNettleieAvtaleAvvistAvElhub()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNettleieAvtaleAvvistAvElhub(r NettleieAvtaleAvvistAvElhub, w io.Writer) error {
	var err error
	err = vm.WriteString(r.AvtaleId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.AvvistMeldingId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Bruker, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.ElhubFeil, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MaalepunktId, w)
	if err != nil {
		return err
	}
	return err
}

func (r NettleieAvtaleAvvistAvElhub) Serialize(w io.Writer) error {
	return writeNettleieAvtaleAvvistAvElhub(r, w)
}

func (r NettleieAvtaleAvvistAvElhub) Schema() string {
	return "{\"fields\":[{\"name\":\"AvtaleId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"AvvistMeldingId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"Bruker\",\"type\":\"string\"},{\"name\":\"ElhubFeil\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"MaalepunktId\",\"type\":\"string\"}],\"name\":\"Mmm.Schemas.NettleieAvtaleElhubAvvist.V1.NettleieAvtaleAvvistAvElhub\",\"type\":\"record\"}"
}

func (r NettleieAvtaleAvvistAvElhub) SchemaName() string {
	return "Mmm.Schemas.NettleieAvtaleElhubAvvist.V1.NettleieAvtaleAvvistAvElhub"
}

func (_ NettleieAvtaleAvvistAvElhub) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NettleieAvtaleAvvistAvElhub) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NettleieAvtaleAvvistAvElhub) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NettleieAvtaleAvvistAvElhub) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NettleieAvtaleAvvistAvElhub) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NettleieAvtaleAvvistAvElhub) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NettleieAvtaleAvvistAvElhub) SetString(v string)   { panic("Unsupported operation") }
func (_ NettleieAvtaleAvvistAvElhub) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NettleieAvtaleAvvistAvElhub) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.AvtaleId}

		return w

	case 1:
		w := types.String{Target: &r.AvvistMeldingId}

		return w

	case 2:
		w := types.String{Target: &r.Bruker}

		return w

	case 3:
		r.ElhubFeil = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.ElhubFeil}

		return w

	case 4:
		w := types.String{Target: &r.Id}

		return w

	case 5:
		w := types.String{Target: &r.MaalepunktId}

		return w

	}
	panic("Unknown field index")
}

func (r *NettleieAvtaleAvvistAvElhub) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *NettleieAvtaleAvvistAvElhub) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ NettleieAvtaleAvvistAvElhub) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ NettleieAvtaleAvvistAvElhub) AppendArray() types.Field { panic("Unsupported operation") }
func (_ NettleieAvtaleAvvistAvElhub) HintSize(int)             { panic("Unsupported operation") }
func (_ NettleieAvtaleAvvistAvElhub) Finalize()                {}

func (_ NettleieAvtaleAvvistAvElhub) AvroCRC64Fingerprint() []byte {
	return []byte(NettleieAvtaleAvvistAvElhubAvroCRC64Fingerprint)
}

func (r NettleieAvtaleAvvistAvElhub) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AvtaleId"], err = json.Marshal(r.AvtaleId)
	if err != nil {
		return nil, err
	}
	output["AvvistMeldingId"], err = json.Marshal(r.AvvistMeldingId)
	if err != nil {
		return nil, err
	}
	output["Bruker"], err = json.Marshal(r.Bruker)
	if err != nil {
		return nil, err
	}
	output["ElhubFeil"], err = json.Marshal(r.ElhubFeil)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["MaalepunktId"], err = json.Marshal(r.MaalepunktId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NettleieAvtaleAvvistAvElhub) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AvtaleId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AvtaleId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AvtaleId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AvvistMeldingId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AvvistMeldingId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AvvistMeldingId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Bruker"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Bruker); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Bruker")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ElhubFeil"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ElhubFeil); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ElhubFeil")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaalepunktId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaalepunktId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MaalepunktId")
	}
	return nil
}
