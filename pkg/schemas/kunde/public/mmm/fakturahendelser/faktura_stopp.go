// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100372_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type FakturaStopp struct {
	ElhubMeldingsId string `json:"ElhubMeldingsId"`

	Feilmeldinger []string `json:"Feilmeldinger"`

	Hendelsestype string `json:"Hendelsestype"`

	KundeId string `json:"KundeId"`

	MaalepunktId string `json:"MaalepunktId"`
}

const FakturaStoppAvroCRC64Fingerprint = "6\x1b\x8f\xa5E\xa5t\xfa"

func NewFakturaStopp() FakturaStopp {
	r := FakturaStopp{}
	r.Feilmeldinger = make([]string, 0)

	return r
}

func DeserializeFakturaStopp(r io.Reader) (FakturaStopp, error) {
	t := NewFakturaStopp()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFakturaStoppFromSchema(r io.Reader, schema string) (FakturaStopp, error) {
	t := NewFakturaStopp()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFakturaStopp(r FakturaStopp, w io.Writer) error {
	var err error
	err = vm.WriteString(r.ElhubMeldingsId, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.Feilmeldinger, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Hendelsestype, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.KundeId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MaalepunktId, w)
	if err != nil {
		return err
	}
	return err
}

func (r FakturaStopp) Serialize(w io.Writer) error {
	return writeFakturaStopp(r, w)
}

func (r FakturaStopp) Schema() string {
	return "{\"fields\":[{\"name\":\"ElhubMeldingsId\",\"type\":\"string\"},{\"name\":\"Feilmeldinger\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"Hendelsestype\",\"type\":\"string\"},{\"name\":\"KundeId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"MaalepunktId\",\"type\":\"string\"}],\"name\":\"Mmm.Schemas.FakturaHendelser.V1.FakturaStopp\",\"type\":\"record\"}"
}

func (r FakturaStopp) SchemaName() string {
	return "Mmm.Schemas.FakturaHendelser.V1.FakturaStopp"
}

func (_ FakturaStopp) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ FakturaStopp) SetInt(v int32)       { panic("Unsupported operation") }
func (_ FakturaStopp) SetLong(v int64)      { panic("Unsupported operation") }
func (_ FakturaStopp) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ FakturaStopp) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ FakturaStopp) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ FakturaStopp) SetString(v string)   { panic("Unsupported operation") }
func (_ FakturaStopp) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FakturaStopp) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.ElhubMeldingsId}

		return w

	case 1:
		r.Feilmeldinger = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Feilmeldinger}

		return w

	case 2:
		w := types.String{Target: &r.Hendelsestype}

		return w

	case 3:
		w := types.String{Target: &r.KundeId}

		return w

	case 4:
		w := types.String{Target: &r.MaalepunktId}

		return w

	}
	panic("Unknown field index")
}

func (r *FakturaStopp) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *FakturaStopp) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ FakturaStopp) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ FakturaStopp) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ FakturaStopp) HintSize(int)                     { panic("Unsupported operation") }
func (_ FakturaStopp) Finalize()                        {}

func (_ FakturaStopp) AvroCRC64Fingerprint() []byte {
	return []byte(FakturaStoppAvroCRC64Fingerprint)
}

func (r FakturaStopp) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ElhubMeldingsId"], err = json.Marshal(r.ElhubMeldingsId)
	if err != nil {
		return nil, err
	}
	output["Feilmeldinger"], err = json.Marshal(r.Feilmeldinger)
	if err != nil {
		return nil, err
	}
	output["Hendelsestype"], err = json.Marshal(r.Hendelsestype)
	if err != nil {
		return nil, err
	}
	output["KundeId"], err = json.Marshal(r.KundeId)
	if err != nil {
		return nil, err
	}
	output["MaalepunktId"], err = json.Marshal(r.MaalepunktId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *FakturaStopp) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ElhubMeldingsId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ElhubMeldingsId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ElhubMeldingsId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Feilmeldinger"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Feilmeldinger); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Feilmeldinger")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Hendelsestype"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Hendelsestype); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Hendelsestype")
	}
	val = func() json.RawMessage {
		if v, ok := fields["KundeId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.KundeId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for KundeId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaalepunktId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaalepunktId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MaalepunktId")
	}
	return nil
}
