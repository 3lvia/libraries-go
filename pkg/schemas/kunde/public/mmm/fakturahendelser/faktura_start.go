// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100372_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type FakturaStart struct {
	ElhubMeldingsId string `json:"ElhubMeldingsId"`

	Hendelsestype string `json:"Hendelsestype"`

	KundeId string `json:"KundeId"`

	MaalepunktId string `json:"MaalepunktId"`
}

const FakturaStartAvroCRC64Fingerprint = "\xbe\xb7\xe0\x87q\x03\xdf\x17"

func NewFakturaStart() FakturaStart {
	r := FakturaStart{}
	return r
}

func DeserializeFakturaStart(r io.Reader) (FakturaStart, error) {
	t := NewFakturaStart()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeFakturaStartFromSchema(r io.Reader, schema string) (FakturaStart, error) {
	t := NewFakturaStart()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeFakturaStart(r FakturaStart, w io.Writer) error {
	var err error
	err = vm.WriteString(r.ElhubMeldingsId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Hendelsestype, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.KundeId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MaalepunktId, w)
	if err != nil {
		return err
	}
	return err
}

func (r FakturaStart) Serialize(w io.Writer) error {
	return writeFakturaStart(r, w)
}

func (r FakturaStart) Schema() string {
	return "{\"fields\":[{\"name\":\"ElhubMeldingsId\",\"type\":\"string\"},{\"name\":\"Hendelsestype\",\"type\":\"string\"},{\"name\":\"KundeId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"MaalepunktId\",\"type\":\"string\"}],\"name\":\"Mmm.Schemas.FakturaHendelser.V1.FakturaStart\",\"type\":\"record\"}"
}

func (r FakturaStart) SchemaName() string {
	return "Mmm.Schemas.FakturaHendelser.V1.FakturaStart"
}

func (_ FakturaStart) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ FakturaStart) SetInt(v int32)       { panic("Unsupported operation") }
func (_ FakturaStart) SetLong(v int64)      { panic("Unsupported operation") }
func (_ FakturaStart) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ FakturaStart) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ FakturaStart) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ FakturaStart) SetString(v string)   { panic("Unsupported operation") }
func (_ FakturaStart) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *FakturaStart) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.ElhubMeldingsId}

		return w

	case 1:
		w := types.String{Target: &r.Hendelsestype}

		return w

	case 2:
		w := types.String{Target: &r.KundeId}

		return w

	case 3:
		w := types.String{Target: &r.MaalepunktId}

		return w

	}
	panic("Unknown field index")
}

func (r *FakturaStart) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *FakturaStart) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ FakturaStart) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ FakturaStart) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ FakturaStart) HintSize(int)                     { panic("Unsupported operation") }
func (_ FakturaStart) Finalize()                        {}

func (_ FakturaStart) AvroCRC64Fingerprint() []byte {
	return []byte(FakturaStartAvroCRC64Fingerprint)
}

func (r FakturaStart) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ElhubMeldingsId"], err = json.Marshal(r.ElhubMeldingsId)
	if err != nil {
		return nil, err
	}
	output["Hendelsestype"], err = json.Marshal(r.Hendelsestype)
	if err != nil {
		return nil, err
	}
	output["KundeId"], err = json.Marshal(r.KundeId)
	if err != nil {
		return nil, err
	}
	output["MaalepunktId"], err = json.Marshal(r.MaalepunktId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *FakturaStart) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ElhubMeldingsId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ElhubMeldingsId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ElhubMeldingsId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Hendelsestype"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Hendelsestype); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Hendelsestype")
	}
	val = func() json.RawMessage {
		if v, ok := fields["KundeId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.KundeId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for KundeId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MaalepunktId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaalepunktId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MaalepunktId")
	}
	return nil
}
