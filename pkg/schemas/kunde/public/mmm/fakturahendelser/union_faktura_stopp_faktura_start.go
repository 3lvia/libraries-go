// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100372_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionFakturaStoppFakturaStartTypeEnum int

const (
	UnionFakturaStoppFakturaStartTypeEnumFakturaStopp UnionFakturaStoppFakturaStartTypeEnum = 0

	UnionFakturaStoppFakturaStartTypeEnumFakturaStart UnionFakturaStoppFakturaStartTypeEnum = 1
)

type UnionFakturaStoppFakturaStart struct {
	FakturaStopp FakturaStopp
	FakturaStart FakturaStart
	UnionType    UnionFakturaStoppFakturaStartTypeEnum
}

func writeUnionFakturaStoppFakturaStart(r UnionFakturaStoppFakturaStart, w io.Writer) error {

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionFakturaStoppFakturaStartTypeEnumFakturaStopp:
		return writeFakturaStopp(r.FakturaStopp, w)
	case UnionFakturaStoppFakturaStartTypeEnumFakturaStart:
		return writeFakturaStart(r.FakturaStart, w)
	}
	return fmt.Errorf("invalid value for UnionFakturaStoppFakturaStart")
}

func NewUnionFakturaStoppFakturaStart() UnionFakturaStoppFakturaStart {
	return UnionFakturaStoppFakturaStart{}
}

func (r UnionFakturaStoppFakturaStart) Serialize(w io.Writer) error {
	return writeUnionFakturaStoppFakturaStart(r, w)
}

func DeserializeUnionFakturaStoppFakturaStart(r io.Reader) (UnionFakturaStoppFakturaStart, error) {
	t := NewUnionFakturaStoppFakturaStart()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionFakturaStoppFakturaStartFromSchema(r io.Reader, schema string) (UnionFakturaStoppFakturaStart, error) {
	t := NewUnionFakturaStoppFakturaStart()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r UnionFakturaStoppFakturaStart) Schema() string {
	return "[{\"fields\":[{\"name\":\"ElhubMeldingsId\",\"type\":\"string\"},{\"name\":\"Feilmeldinger\",\"type\":{\"items\":\"string\",\"type\":\"array\"}},{\"name\":\"Hendelsestype\",\"type\":\"string\"},{\"name\":\"KundeId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"MaalepunktId\",\"type\":\"string\"}],\"name\":\"FakturaStopp\",\"namespace\":\"Mmm.Schemas.FakturaHendelser.V1\",\"type\":\"record\"},{\"fields\":[{\"name\":\"ElhubMeldingsId\",\"type\":\"string\"},{\"name\":\"Hendelsestype\",\"type\":\"string\"},{\"name\":\"KundeId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"MaalepunktId\",\"type\":\"string\"}],\"name\":\"FakturaStart\",\"namespace\":\"Mmm.Schemas.FakturaHendelser.V1\",\"type\":\"record\"}]"
}

func (_ UnionFakturaStoppFakturaStart) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ UnionFakturaStoppFakturaStart) SetInt(v int32)      { panic("Unsupported operation") }
func (_ UnionFakturaStoppFakturaStart) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ UnionFakturaStoppFakturaStart) SetDouble(v float64) { panic("Unsupported operation") }
func (_ UnionFakturaStoppFakturaStart) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ UnionFakturaStoppFakturaStart) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionFakturaStoppFakturaStart) SetLong(v int64) {

	r.UnionType = (UnionFakturaStoppFakturaStartTypeEnum)(v)
}

func (r *UnionFakturaStoppFakturaStart) Get(i int) types.Field {

	switch i {
	case 0:
		r.FakturaStopp = NewFakturaStopp()
		return &types.Record{Target: (&r.FakturaStopp)}
	case 1:
		r.FakturaStart = NewFakturaStart()
		return &types.Record{Target: (&r.FakturaStart)}
	}
	panic("Unknown field index")
}
func (_ UnionFakturaStoppFakturaStart) NullField(i int)  { panic("Unsupported operation") }
func (_ UnionFakturaStoppFakturaStart) HintSize(i int)   { panic("Unsupported operation") }
func (_ UnionFakturaStoppFakturaStart) SetDefault(i int) { panic("Unsupported operation") }
func (_ UnionFakturaStoppFakturaStart) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ UnionFakturaStoppFakturaStart) AppendArray() types.Field { panic("Unsupported operation") }
func (_ UnionFakturaStoppFakturaStart) Finalize()                {}

func (r UnionFakturaStoppFakturaStart) MarshalJSON() ([]byte, error) {

	switch r.UnionType {
	case UnionFakturaStoppFakturaStartTypeEnumFakturaStopp:
		return json.Marshal(map[string]interface{}{"Mmm.Schemas.FakturaHendelser.V1.FakturaStopp": r.FakturaStopp})
	case UnionFakturaStoppFakturaStartTypeEnumFakturaStart:
		return json.Marshal(map[string]interface{}{"Mmm.Schemas.FakturaHendelser.V1.FakturaStart": r.FakturaStart})
	}
	return nil, fmt.Errorf("invalid value for UnionFakturaStoppFakturaStart")
}

func (r *UnionFakturaStoppFakturaStart) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Mmm.Schemas.FakturaHendelser.V1.FakturaStopp"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.FakturaStopp)
	}
	if value, ok := fields["Mmm.Schemas.FakturaHendelser.V1.FakturaStart"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.FakturaStart)
	}
	return fmt.Errorf("invalid value for UnionFakturaStoppFakturaStart")
}
