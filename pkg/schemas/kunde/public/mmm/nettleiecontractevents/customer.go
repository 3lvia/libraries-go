// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100251_9.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Customer struct {
	CustomerId string `json:"CustomerId"`

	FirstName *UnionNullString `json:"FirstName"`

	LastName *UnionNullString `json:"LastName"`

	Name *UnionNullString `json:"Name"`
}

const CustomerAvroCRC64Fingerprint = "\x02\x00\xda\x12Ýº\xb3\xf3"

func NewCustomer() Customer {
	r := Customer{}
	r.FirstName = nil
	r.LastName = nil
	r.Name = nil
	return r
}

func DeserializeCustomer(r io.Reader) (Customer, error) {
	t := NewCustomer()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCustomerFromSchema(r io.Reader, schema string) (Customer, error) {
	t := NewCustomer()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCustomer(r Customer, w io.Writer) error {
	var err error
	err = vm.WriteString(r.CustomerId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FirstName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LastName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	return err
}

func (r Customer) Serialize(w io.Writer) error {
	return writeCustomer(r, w)
}

func (r Customer) Schema() string {
	return "{\"fields\":[{\"name\":\"CustomerId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"FirstName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]}],\"name\":\"Mmm.Schemas.NettleieContractEvents.V1.Customer\",\"type\":\"record\"}"
}

func (r Customer) SchemaName() string {
	return "Mmm.Schemas.NettleieContractEvents.V1.Customer"
}

func (_ Customer) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Customer) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Customer) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Customer) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Customer) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Customer) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Customer) SetString(v string)   { panic("Unsupported operation") }
func (_ Customer) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Customer) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.CustomerId}

		return w

	case 1:
		r.FirstName = NewUnionNullString()

		return r.FirstName
	case 2:
		r.LastName = NewUnionNullString()

		return r.LastName
	case 3:
		r.Name = NewUnionNullString()

		return r.Name
	}
	panic("Unknown field index")
}

func (r *Customer) SetDefault(i int) {
	switch i {
	case 1:
		r.FirstName = nil
		return
	case 2:
		r.LastName = nil
		return
	case 3:
		r.Name = nil
		return
	}
	panic("Unknown field index")
}

func (r *Customer) NullField(i int) {
	switch i {
	case 1:
		r.FirstName = nil
		return
	case 2:
		r.LastName = nil
		return
	case 3:
		r.Name = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Customer) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Customer) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Customer) HintSize(int)                     { panic("Unsupported operation") }
func (_ Customer) Finalize()                        {}

func (_ Customer) AvroCRC64Fingerprint() []byte {
	return []byte(CustomerAvroCRC64Fingerprint)
}

func (r Customer) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CustomerId"], err = json.Marshal(r.CustomerId)
	if err != nil {
		return nil, err
	}
	output["FirstName"], err = json.Marshal(r.FirstName)
	if err != nil {
		return nil, err
	}
	output["LastName"], err = json.Marshal(r.LastName)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Customer) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CustomerId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CustomerId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CustomerId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FirstName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FirstName); err != nil {
			return err
		}
	} else {
		r.FirstName = NewUnionNullString()

		r.FirstName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastName); err != nil {
			return err
		}
	} else {
		r.LastName = NewUnionNullString()

		r.LastName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	return nil
}
