// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100251_9.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PowerSupplier struct {
	Gln string `json:"Gln"`

	StartTime int64 `json:"StartTime"`
}

const PowerSupplierAvroCRC64Fingerprint = "\x16X^Q\xa4\xf2\xce\x1c"

func NewPowerSupplier() PowerSupplier {
	r := PowerSupplier{}
	return r
}

func DeserializePowerSupplier(r io.Reader) (PowerSupplier, error) {
	t := NewPowerSupplier()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePowerSupplierFromSchema(r io.Reader, schema string) (PowerSupplier, error) {
	t := NewPowerSupplier()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePowerSupplier(r PowerSupplier, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Gln, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.StartTime, w)
	if err != nil {
		return err
	}
	return err
}

func (r PowerSupplier) Serialize(w io.Writer) error {
	return writePowerSupplier(r, w)
}

func (r PowerSupplier) Schema() string {
	return "{\"fields\":[{\"name\":\"Gln\",\"type\":\"string\"},{\"name\":\"StartTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Mmm.Schemas.NettleieContractEvents.V1.PowerSupplier\",\"type\":\"record\"}"
}

func (r PowerSupplier) SchemaName() string {
	return "Mmm.Schemas.NettleieContractEvents.V1.PowerSupplier"
}

func (_ PowerSupplier) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PowerSupplier) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PowerSupplier) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PowerSupplier) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PowerSupplier) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PowerSupplier) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PowerSupplier) SetString(v string)   { panic("Unsupported operation") }
func (_ PowerSupplier) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PowerSupplier) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Gln}

		return w

	case 1:
		w := types.Long{Target: &r.StartTime}

		return w

	}
	panic("Unknown field index")
}

func (r *PowerSupplier) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *PowerSupplier) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ PowerSupplier) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PowerSupplier) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PowerSupplier) HintSize(int)                     { panic("Unsupported operation") }
func (_ PowerSupplier) Finalize()                        {}

func (_ PowerSupplier) AvroCRC64Fingerprint() []byte {
	return []byte(PowerSupplierAvroCRC64Fingerprint)
}

func (r PowerSupplier) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Gln"], err = json.Marshal(r.Gln)
	if err != nil {
		return nil, err
	}
	output["StartTime"], err = json.Marshal(r.StartTime)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PowerSupplier) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Gln"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gln); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Gln")
	}
	val = func() json.RawMessage {
		if v, ok := fields["StartTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartTime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for StartTime")
	}
	return nil
}
