// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100251_9.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Communication struct {
	CommunicationType string `json:"CommunicationType"`

	Description *UnionNullString `json:"Description"`

	Value string `json:"Value"`
}

const CommunicationAvroCRC64Fingerprint = "R\xc4b\x16\xae\xee=v"

func NewCommunication() Communication {
	r := Communication{}
	r.Description = nil
	return r
}

func DeserializeCommunication(r io.Reader) (Communication, error) {
	t := NewCommunication()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCommunicationFromSchema(r io.Reader, schema string) (Communication, error) {
	t := NewCommunication()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCommunication(r Communication, w io.Writer) error {
	var err error
	err = vm.WriteString(r.CommunicationType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r Communication) Serialize(w io.Writer) error {
	return writeCommunication(r, w)
}

func (r Communication) Schema() string {
	return "{\"fields\":[{\"name\":\"CommunicationType\",\"type\":\"string\"},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"name\":\"Value\",\"type\":\"string\"}],\"name\":\"Mmm.Schemas.NettleieContractEvents.V1.Communication\",\"type\":\"record\"}"
}

func (r Communication) SchemaName() string {
	return "Mmm.Schemas.NettleieContractEvents.V1.Communication"
}

func (_ Communication) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Communication) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Communication) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Communication) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Communication) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Communication) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Communication) SetString(v string)   { panic("Unsupported operation") }
func (_ Communication) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Communication) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.CommunicationType}

		return w

	case 1:
		r.Description = NewUnionNullString()

		return r.Description
	case 2:
		w := types.String{Target: &r.Value}

		return w

	}
	panic("Unknown field index")
}

func (r *Communication) SetDefault(i int) {
	switch i {
	case 1:
		r.Description = nil
		return
	}
	panic("Unknown field index")
}

func (r *Communication) NullField(i int) {
	switch i {
	case 1:
		r.Description = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Communication) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Communication) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Communication) HintSize(int)                     { panic("Unsupported operation") }
func (_ Communication) Finalize()                        {}

func (_ Communication) AvroCRC64Fingerprint() []byte {
	return []byte(CommunicationAvroCRC64Fingerprint)
}

func (r Communication) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CommunicationType"], err = json.Marshal(r.CommunicationType)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["Value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Communication) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CommunicationType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CommunicationType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CommunicationType")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Value")
	}
	return nil
}
