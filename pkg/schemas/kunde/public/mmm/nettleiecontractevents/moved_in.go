// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100251_9.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MovedIn struct {
	Contract Contract `json:"Contract"`

	ContractId string `json:"ContractId"`

	EventType string `json:"EventType"`

	Id string `json:"Id"`

	MeteringPointId string `json:"MeteringPointId"`
}

const MovedInAvroCRC64Fingerprint = "\xf8\xfa\xf6B*.~\xc4"

func NewMovedIn() MovedIn {
	r := MovedIn{}
	r.Contract = NewContract()

	return r
}

func DeserializeMovedIn(r io.Reader) (MovedIn, error) {
	t := NewMovedIn()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMovedInFromSchema(r io.Reader, schema string) (MovedIn, error) {
	t := NewMovedIn()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMovedIn(r MovedIn, w io.Writer) error {
	var err error
	err = writeContract(r.Contract, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ContractId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EventType, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MeteringPointId, w)
	if err != nil {
		return err
	}
	return err
}

func (r MovedIn) Serialize(w io.Writer) error {
	return writeMovedIn(r, w)
}

func (r MovedIn) Schema() string {
	return "{\"fields\":[{\"name\":\"Contract\",\"type\":{\"fields\":[{\"name\":\"Communication\",\"type\":{\"items\":{\"fields\":[{\"name\":\"CommunicationType\",\"type\":\"string\"},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"name\":\"Value\",\"type\":\"string\"}],\"name\":\"Communication\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"ContractId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"Customer\",\"type\":{\"fields\":[{\"name\":\"CustomerId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"FirstName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]}],\"name\":\"Customer\",\"type\":\"record\"}},{\"default\":null,\"name\":\"EndTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"InvoiceAddress\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"AttentionOf\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"BuildingNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CareOf\",\"type\":[\"null\",\"string\"]},{\"name\":\"City\",\"type\":\"string\"},{\"default\":null,\"name\":\"CitySubDivisionName\",\"type\":[\"null\",\"string\"]},{\"name\":\"CountryCode\",\"type\":\"string\"},{\"default\":null,\"name\":\"Floor\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OnBehalf\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostBox\",\"type\":[\"null\",\"string\"]},{\"name\":\"PostCode\",\"type\":\"string\"},{\"default\":null,\"name\":\"Room\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetName\",\"type\":[\"null\",\"string\"]}],\"name\":\"Address\",\"type\":\"record\"}},{\"name\":\"MeteringPointId\",\"type\":\"string\"},{\"default\":null,\"name\":\"PostalAddress\",\"type\":[\"null\",\"Mmm.Schemas.NettleieContractEvents.V1.Address\"]},{\"name\":\"PowerSuppliers\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Gln\",\"type\":\"string\"},{\"name\":\"StartTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"PowerSupplier\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"StartTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Contract\",\"type\":\"record\"}},{\"name\":\"ContractId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"EventType\",\"type\":\"string\"},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"MeteringPointId\",\"type\":\"string\"}],\"name\":\"Mmm.Schemas.NettleieContractEvents.V1.MovedIn\",\"type\":\"record\"}"
}

func (r MovedIn) SchemaName() string {
	return "Mmm.Schemas.NettleieContractEvents.V1.MovedIn"
}

func (_ MovedIn) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MovedIn) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MovedIn) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MovedIn) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MovedIn) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MovedIn) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MovedIn) SetString(v string)   { panic("Unsupported operation") }
func (_ MovedIn) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MovedIn) Get(i int) types.Field {
	switch i {
	case 0:
		r.Contract = NewContract()

		w := types.Record{Target: &r.Contract}

		return w

	case 1:
		w := types.String{Target: &r.ContractId}

		return w

	case 2:
		w := types.String{Target: &r.EventType}

		return w

	case 3:
		w := types.String{Target: &r.Id}

		return w

	case 4:
		w := types.String{Target: &r.MeteringPointId}

		return w

	}
	panic("Unknown field index")
}

func (r *MovedIn) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *MovedIn) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ MovedIn) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MovedIn) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MovedIn) HintSize(int)                     { panic("Unsupported operation") }
func (_ MovedIn) Finalize()                        {}

func (_ MovedIn) AvroCRC64Fingerprint() []byte {
	return []byte(MovedInAvroCRC64Fingerprint)
}

func (r MovedIn) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Contract"], err = json.Marshal(r.Contract)
	if err != nil {
		return nil, err
	}
	output["ContractId"], err = json.Marshal(r.ContractId)
	if err != nil {
		return nil, err
	}
	output["EventType"], err = json.Marshal(r.EventType)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["MeteringPointId"], err = json.Marshal(r.MeteringPointId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MovedIn) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Contract"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Contract); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Contract")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContractId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContractId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ContractId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EventType")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeteringPointId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeteringPointId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MeteringPointId")
	}
	return nil
}
