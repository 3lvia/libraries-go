// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100251_9.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PowerSupplierChanged struct {
	ContractId string `json:"ContractId"`

	EventType string `json:"EventType"`

	Gln string `json:"Gln"`

	Id string `json:"Id"`

	MeteringPointId string `json:"MeteringPointId"`

	StartTime int64 `json:"StartTime"`
}

const PowerSupplierChangedAvroCRC64Fingerprint = "\"\xd38(\xb5\x91|\x97"

func NewPowerSupplierChanged() PowerSupplierChanged {
	r := PowerSupplierChanged{}
	return r
}

func DeserializePowerSupplierChanged(r io.Reader) (PowerSupplierChanged, error) {
	t := NewPowerSupplierChanged()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePowerSupplierChangedFromSchema(r io.Reader, schema string) (PowerSupplierChanged, error) {
	t := NewPowerSupplierChanged()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePowerSupplierChanged(r PowerSupplierChanged, w io.Writer) error {
	var err error
	err = vm.WriteString(r.ContractId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EventType, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Gln, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MeteringPointId, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.StartTime, w)
	if err != nil {
		return err
	}
	return err
}

func (r PowerSupplierChanged) Serialize(w io.Writer) error {
	return writePowerSupplierChanged(r, w)
}

func (r PowerSupplierChanged) Schema() string {
	return "{\"fields\":[{\"name\":\"ContractId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"EventType\",\"type\":\"string\"},{\"name\":\"Gln\",\"type\":\"string\"},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"MeteringPointId\",\"type\":\"string\"},{\"name\":\"StartTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Mmm.Schemas.NettleieContractEvents.V1.PowerSupplierChanged\",\"type\":\"record\"}"
}

func (r PowerSupplierChanged) SchemaName() string {
	return "Mmm.Schemas.NettleieContractEvents.V1.PowerSupplierChanged"
}

func (_ PowerSupplierChanged) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PowerSupplierChanged) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PowerSupplierChanged) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PowerSupplierChanged) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PowerSupplierChanged) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PowerSupplierChanged) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PowerSupplierChanged) SetString(v string)   { panic("Unsupported operation") }
func (_ PowerSupplierChanged) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PowerSupplierChanged) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.ContractId}

		return w

	case 1:
		w := types.String{Target: &r.EventType}

		return w

	case 2:
		w := types.String{Target: &r.Gln}

		return w

	case 3:
		w := types.String{Target: &r.Id}

		return w

	case 4:
		w := types.String{Target: &r.MeteringPointId}

		return w

	case 5:
		w := types.Long{Target: &r.StartTime}

		return w

	}
	panic("Unknown field index")
}

func (r *PowerSupplierChanged) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *PowerSupplierChanged) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ PowerSupplierChanged) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PowerSupplierChanged) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PowerSupplierChanged) HintSize(int)                     { panic("Unsupported operation") }
func (_ PowerSupplierChanged) Finalize()                        {}

func (_ PowerSupplierChanged) AvroCRC64Fingerprint() []byte {
	return []byte(PowerSupplierChangedAvroCRC64Fingerprint)
}

func (r PowerSupplierChanged) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ContractId"], err = json.Marshal(r.ContractId)
	if err != nil {
		return nil, err
	}
	output["EventType"], err = json.Marshal(r.EventType)
	if err != nil {
		return nil, err
	}
	output["Gln"], err = json.Marshal(r.Gln)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["MeteringPointId"], err = json.Marshal(r.MeteringPointId)
	if err != nil {
		return nil, err
	}
	output["StartTime"], err = json.Marshal(r.StartTime)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PowerSupplierChanged) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ContractId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContractId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ContractId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for EventType")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Gln"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gln); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Gln")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeteringPointId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeteringPointId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MeteringPointId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["StartTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartTime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for StartTime")
	}
	return nil
}
