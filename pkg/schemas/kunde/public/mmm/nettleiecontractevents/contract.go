// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100251_9.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Contract struct {
	Communication []Communication `json:"Communication"`

	ContractId string `json:"ContractId"`

	Customer Customer `json:"Customer"`

	EndTime *UnionNullLong `json:"EndTime"`

	InvoiceAddress Address `json:"InvoiceAddress"`

	MeteringPointId string `json:"MeteringPointId"`

	PostalAddress *UnionNullAddress `json:"PostalAddress"`

	PowerSuppliers []PowerSupplier `json:"PowerSuppliers"`

	StartTime int64 `json:"StartTime"`
}

const ContractAvroCRC64Fingerprint = "\xb9f\xbf_\xba\xa9\x8d\xf9"

func NewContract() Contract {
	r := Contract{}
	r.Communication = make([]Communication, 0)

	r.Customer = NewCustomer()

	r.EndTime = nil
	r.InvoiceAddress = NewAddress()

	r.PostalAddress = nil
	r.PowerSuppliers = make([]PowerSupplier, 0)

	return r
}

func DeserializeContract(r io.Reader) (Contract, error) {
	t := NewContract()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContractFromSchema(r io.Reader, schema string) (Contract, error) {
	t := NewContract()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContract(r Contract, w io.Writer) error {
	var err error
	err = writeArrayCommunication(r.Communication, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ContractId, w)
	if err != nil {
		return err
	}
	err = writeCustomer(r.Customer, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EndTime, w)
	if err != nil {
		return err
	}
	err = writeAddress(r.InvoiceAddress, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MeteringPointId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullAddress(r.PostalAddress, w)
	if err != nil {
		return err
	}
	err = writeArrayPowerSupplier(r.PowerSuppliers, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.StartTime, w)
	if err != nil {
		return err
	}
	return err
}

func (r Contract) Serialize(w io.Writer) error {
	return writeContract(r, w)
}

func (r Contract) Schema() string {
	return "{\"fields\":[{\"name\":\"Communication\",\"type\":{\"items\":{\"fields\":[{\"name\":\"CommunicationType\",\"type\":\"string\"},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"name\":\"Value\",\"type\":\"string\"}],\"name\":\"Communication\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"ContractId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"Customer\",\"type\":{\"fields\":[{\"name\":\"CustomerId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"FirstName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]}],\"name\":\"Customer\",\"type\":\"record\"}},{\"default\":null,\"name\":\"EndTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"InvoiceAddress\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"AttentionOf\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"BuildingNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CareOf\",\"type\":[\"null\",\"string\"]},{\"name\":\"City\",\"type\":\"string\"},{\"default\":null,\"name\":\"CitySubDivisionName\",\"type\":[\"null\",\"string\"]},{\"name\":\"CountryCode\",\"type\":\"string\"},{\"default\":null,\"name\":\"Floor\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OnBehalf\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostBox\",\"type\":[\"null\",\"string\"]},{\"name\":\"PostCode\",\"type\":\"string\"},{\"default\":null,\"name\":\"Room\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetName\",\"type\":[\"null\",\"string\"]}],\"name\":\"Address\",\"type\":\"record\"}},{\"name\":\"MeteringPointId\",\"type\":\"string\"},{\"default\":null,\"name\":\"PostalAddress\",\"type\":[\"null\",\"Mmm.Schemas.NettleieContractEvents.V1.Address\"]},{\"name\":\"PowerSuppliers\",\"type\":{\"items\":{\"fields\":[{\"name\":\"Gln\",\"type\":\"string\"},{\"name\":\"StartTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"PowerSupplier\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"StartTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Mmm.Schemas.NettleieContractEvents.V1.Contract\",\"type\":\"record\"}"
}

func (r Contract) SchemaName() string {
	return "Mmm.Schemas.NettleieContractEvents.V1.Contract"
}

func (_ Contract) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Contract) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Contract) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Contract) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Contract) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Contract) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Contract) SetString(v string)   { panic("Unsupported operation") }
func (_ Contract) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Contract) Get(i int) types.Field {
	switch i {
	case 0:
		r.Communication = make([]Communication, 0)

		w := ArrayCommunicationWrapper{Target: &r.Communication}

		return w

	case 1:
		w := types.String{Target: &r.ContractId}

		return w

	case 2:
		r.Customer = NewCustomer()

		w := types.Record{Target: &r.Customer}

		return w

	case 3:
		r.EndTime = NewUnionNullLong()

		return r.EndTime
	case 4:
		r.InvoiceAddress = NewAddress()

		w := types.Record{Target: &r.InvoiceAddress}

		return w

	case 5:
		w := types.String{Target: &r.MeteringPointId}

		return w

	case 6:
		r.PostalAddress = NewUnionNullAddress()

		return r.PostalAddress
	case 7:
		r.PowerSuppliers = make([]PowerSupplier, 0)

		w := ArrayPowerSupplierWrapper{Target: &r.PowerSuppliers}

		return w

	case 8:
		w := types.Long{Target: &r.StartTime}

		return w

	}
	panic("Unknown field index")
}

func (r *Contract) SetDefault(i int) {
	switch i {
	case 3:
		r.EndTime = nil
		return
	case 6:
		r.PostalAddress = nil
		return
	}
	panic("Unknown field index")
}

func (r *Contract) NullField(i int) {
	switch i {
	case 3:
		r.EndTime = nil
		return
	case 6:
		r.PostalAddress = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Contract) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Contract) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Contract) HintSize(int)                     { panic("Unsupported operation") }
func (_ Contract) Finalize()                        {}

func (_ Contract) AvroCRC64Fingerprint() []byte {
	return []byte(ContractAvroCRC64Fingerprint)
}

func (r Contract) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Communication"], err = json.Marshal(r.Communication)
	if err != nil {
		return nil, err
	}
	output["ContractId"], err = json.Marshal(r.ContractId)
	if err != nil {
		return nil, err
	}
	output["Customer"], err = json.Marshal(r.Customer)
	if err != nil {
		return nil, err
	}
	output["EndTime"], err = json.Marshal(r.EndTime)
	if err != nil {
		return nil, err
	}
	output["InvoiceAddress"], err = json.Marshal(r.InvoiceAddress)
	if err != nil {
		return nil, err
	}
	output["MeteringPointId"], err = json.Marshal(r.MeteringPointId)
	if err != nil {
		return nil, err
	}
	output["PostalAddress"], err = json.Marshal(r.PostalAddress)
	if err != nil {
		return nil, err
	}
	output["PowerSuppliers"], err = json.Marshal(r.PowerSuppliers)
	if err != nil {
		return nil, err
	}
	output["StartTime"], err = json.Marshal(r.StartTime)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Contract) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Communication"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Communication); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Communication")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContractId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContractId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ContractId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Customer"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Customer); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Customer")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EndTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndTime); err != nil {
			return err
		}
	} else {
		r.EndTime = NewUnionNullLong()

		r.EndTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceAddress); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for InvoiceAddress")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeteringPointId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeteringPointId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MeteringPointId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PostalAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostalAddress); err != nil {
			return err
		}
	} else {
		r.PostalAddress = NewUnionNullAddress()

		r.PostalAddress = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PowerSuppliers"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PowerSuppliers); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PowerSuppliers")
	}
	val = func() json.RawMessage {
		if v, ok := fields["StartTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartTime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for StartTime")
	}
	return nil
}
