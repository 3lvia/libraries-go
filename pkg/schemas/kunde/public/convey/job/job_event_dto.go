// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100093_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type JobEventDto struct {
	BroadcastId *UnionNullString `json:"BroadcastId"`

	JobId *UnionNullString `json:"JobId"`

	Status JobEventStatus `json:"Status"`
}

const JobEventDtoAvroCRC64Fingerprint = "\xf2,\xe5Û·p\r4"

func NewJobEventDto() JobEventDto {
	r := JobEventDto{}
	r.BroadcastId = nil
	r.JobId = nil
	return r
}

func DeserializeJobEventDto(r io.Reader) (JobEventDto, error) {
	t := NewJobEventDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeJobEventDtoFromSchema(r io.Reader, schema string) (JobEventDto, error) {
	t := NewJobEventDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeJobEventDto(r JobEventDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.BroadcastId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.JobId, w)
	if err != nil {
		return err
	}
	err = writeJobEventStatus(r.Status, w)
	if err != nil {
		return err
	}
	return err
}

func (r JobEventDto) Serialize(w io.Writer) error {
	return writeJobEventDto(r, w)
}

func (r JobEventDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"BroadcastId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"JobId\",\"type\":[\"null\",\"string\"]},{\"name\":\"Status\",\"type\":{\"name\":\"JobEventStatus\",\"namespace\":\"Application.Common.Enums\",\"symbols\":[\"Received\",\"Modified\",\"Started\",\"Canceled\",\"Finished\"],\"type\":\"enum\"}}],\"name\":\"Application.Job.Dto.JobEventDto\",\"type\":\"record\"}"
}

func (r JobEventDto) SchemaName() string {
	return "Application.Job.Dto.JobEventDto"
}

func (_ JobEventDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ JobEventDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ JobEventDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ JobEventDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ JobEventDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ JobEventDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ JobEventDto) SetString(v string)   { panic("Unsupported operation") }
func (_ JobEventDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *JobEventDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.BroadcastId = NewUnionNullString()

		return r.BroadcastId
	case 1:
		r.JobId = NewUnionNullString()

		return r.JobId
	case 2:
		w := JobEventStatusWrapper{Target: &r.Status}

		return w

	}
	panic("Unknown field index")
}

func (r *JobEventDto) SetDefault(i int) {
	switch i {
	case 0:
		r.BroadcastId = nil
		return
	case 1:
		r.JobId = nil
		return
	}
	panic("Unknown field index")
}

func (r *JobEventDto) NullField(i int) {
	switch i {
	case 0:
		r.BroadcastId = nil
		return
	case 1:
		r.JobId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ JobEventDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ JobEventDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ JobEventDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ JobEventDto) Finalize()                        {}

func (_ JobEventDto) AvroCRC64Fingerprint() []byte {
	return []byte(JobEventDtoAvroCRC64Fingerprint)
}

func (r JobEventDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["BroadcastId"], err = json.Marshal(r.BroadcastId)
	if err != nil {
		return nil, err
	}
	output["JobId"], err = json.Marshal(r.JobId)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *JobEventDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["BroadcastId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BroadcastId); err != nil {
			return err
		}
	} else {
		r.BroadcastId = NewUnionNullString()

		r.BroadcastId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["JobId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.JobId); err != nil {
			return err
		}
	} else {
		r.JobId = NewUnionNullString()

		r.JobId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Status")
	}
	return nil
}
