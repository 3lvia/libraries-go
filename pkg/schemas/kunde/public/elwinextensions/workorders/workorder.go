// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100236_8.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Workorder struct {
	CaseNumber int32 `json:"CaseNumber"`

	ContractNumber *UnionNullInt `json:"ContractNumber"`

	CreatedDate *UnionNullLong `json:"CreatedDate"`

	CustomerNumber *UnionNullInt `json:"CustomerNumber"`

	HasChecklist *UnionNullBool `json:"HasChecklist"`

	HasExternalDialogue *UnionNullBool `json:"HasExternalDialogue"`

	HasInternalDialogue *UnionNullBool `json:"HasInternalDialogue"`

	LastModified *UnionNullLong `json:"LastModified"`

	MeteringPoint *UnionNullString `json:"MeteringPoint"`

	ReceiverGroup *UnionNullString `json:"ReceiverGroup"`

	ReceiverUsername *UnionNullString `json:"ReceiverUsername"`

	SalesForceCaseId *UnionNullString `json:"SalesForceCaseId"`

	Status *UnionNullString `json:"Status"`

	Title *UnionNullString `json:"Title"`
}

const WorkorderAvroCRC64Fingerprint = "~\xa0\x88J\xff\x89\x8b\x1f"

func NewWorkorder() Workorder {
	r := Workorder{}
	r.ContractNumber = nil
	r.CreatedDate = nil
	r.CustomerNumber = nil
	r.HasChecklist = nil
	r.HasExternalDialogue = nil
	r.HasInternalDialogue = nil
	r.LastModified = nil
	r.MeteringPoint = nil
	r.ReceiverGroup = nil
	r.ReceiverUsername = nil
	r.SalesForceCaseId = nil
	r.Status = nil
	r.Title = nil
	return r
}

func DeserializeWorkorder(r io.Reader) (Workorder, error) {
	t := NewWorkorder()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeWorkorderFromSchema(r io.Reader, schema string) (Workorder, error) {
	t := NewWorkorder()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeWorkorder(r Workorder, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.CaseNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.ContractNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.CreatedDate, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.CustomerNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.HasChecklist, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.HasExternalDialogue, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.HasInternalDialogue, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.LastModified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MeteringPoint, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ReceiverGroup, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ReceiverUsername, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SalesForceCaseId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Status, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Title, w)
	if err != nil {
		return err
	}
	return err
}

func (r Workorder) Serialize(w io.Writer) error {
	return writeWorkorder(r, w)
}

func (r Workorder) Schema() string {
	return "{\"fields\":[{\"name\":\"CaseNumber\",\"type\":\"int\"},{\"default\":null,\"name\":\"ContractNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"CreatedDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"CustomerNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"HasChecklist\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"HasExternalDialogue\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"HasInternalDialogue\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"LastModified\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"MeteringPoint\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ReceiverGroup\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ReceiverUsername\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SalesForceCaseId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Status\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Title\",\"type\":[\"null\",\"string\"]}],\"name\":\"Elwin.Workorders.Model.Workorder\",\"type\":\"record\"}"
}

func (r Workorder) SchemaName() string {
	return "Elwin.Workorders.Model.Workorder"
}

func (_ Workorder) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Workorder) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Workorder) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Workorder) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Workorder) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Workorder) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Workorder) SetString(v string)   { panic("Unsupported operation") }
func (_ Workorder) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Workorder) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.CaseNumber}

		return w

	case 1:
		r.ContractNumber = NewUnionNullInt()

		return r.ContractNumber
	case 2:
		r.CreatedDate = NewUnionNullLong()

		return r.CreatedDate
	case 3:
		r.CustomerNumber = NewUnionNullInt()

		return r.CustomerNumber
	case 4:
		r.HasChecklist = NewUnionNullBool()

		return r.HasChecklist
	case 5:
		r.HasExternalDialogue = NewUnionNullBool()

		return r.HasExternalDialogue
	case 6:
		r.HasInternalDialogue = NewUnionNullBool()

		return r.HasInternalDialogue
	case 7:
		r.LastModified = NewUnionNullLong()

		return r.LastModified
	case 8:
		r.MeteringPoint = NewUnionNullString()

		return r.MeteringPoint
	case 9:
		r.ReceiverGroup = NewUnionNullString()

		return r.ReceiverGroup
	case 10:
		r.ReceiverUsername = NewUnionNullString()

		return r.ReceiverUsername
	case 11:
		r.SalesForceCaseId = NewUnionNullString()

		return r.SalesForceCaseId
	case 12:
		r.Status = NewUnionNullString()

		return r.Status
	case 13:
		r.Title = NewUnionNullString()

		return r.Title
	}
	panic("Unknown field index")
}

func (r *Workorder) SetDefault(i int) {
	switch i {
	case 1:
		r.ContractNumber = nil
		return
	case 2:
		r.CreatedDate = nil
		return
	case 3:
		r.CustomerNumber = nil
		return
	case 4:
		r.HasChecklist = nil
		return
	case 5:
		r.HasExternalDialogue = nil
		return
	case 6:
		r.HasInternalDialogue = nil
		return
	case 7:
		r.LastModified = nil
		return
	case 8:
		r.MeteringPoint = nil
		return
	case 9:
		r.ReceiverGroup = nil
		return
	case 10:
		r.ReceiverUsername = nil
		return
	case 11:
		r.SalesForceCaseId = nil
		return
	case 12:
		r.Status = nil
		return
	case 13:
		r.Title = nil
		return
	}
	panic("Unknown field index")
}

func (r *Workorder) NullField(i int) {
	switch i {
	case 1:
		r.ContractNumber = nil
		return
	case 2:
		r.CreatedDate = nil
		return
	case 3:
		r.CustomerNumber = nil
		return
	case 4:
		r.HasChecklist = nil
		return
	case 5:
		r.HasExternalDialogue = nil
		return
	case 6:
		r.HasInternalDialogue = nil
		return
	case 7:
		r.LastModified = nil
		return
	case 8:
		r.MeteringPoint = nil
		return
	case 9:
		r.ReceiverGroup = nil
		return
	case 10:
		r.ReceiverUsername = nil
		return
	case 11:
		r.SalesForceCaseId = nil
		return
	case 12:
		r.Status = nil
		return
	case 13:
		r.Title = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Workorder) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Workorder) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Workorder) HintSize(int)                     { panic("Unsupported operation") }
func (_ Workorder) Finalize()                        {}

func (_ Workorder) AvroCRC64Fingerprint() []byte {
	return []byte(WorkorderAvroCRC64Fingerprint)
}

func (r Workorder) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CaseNumber"], err = json.Marshal(r.CaseNumber)
	if err != nil {
		return nil, err
	}
	output["ContractNumber"], err = json.Marshal(r.ContractNumber)
	if err != nil {
		return nil, err
	}
	output["CreatedDate"], err = json.Marshal(r.CreatedDate)
	if err != nil {
		return nil, err
	}
	output["CustomerNumber"], err = json.Marshal(r.CustomerNumber)
	if err != nil {
		return nil, err
	}
	output["HasChecklist"], err = json.Marshal(r.HasChecklist)
	if err != nil {
		return nil, err
	}
	output["HasExternalDialogue"], err = json.Marshal(r.HasExternalDialogue)
	if err != nil {
		return nil, err
	}
	output["HasInternalDialogue"], err = json.Marshal(r.HasInternalDialogue)
	if err != nil {
		return nil, err
	}
	output["LastModified"], err = json.Marshal(r.LastModified)
	if err != nil {
		return nil, err
	}
	output["MeteringPoint"], err = json.Marshal(r.MeteringPoint)
	if err != nil {
		return nil, err
	}
	output["ReceiverGroup"], err = json.Marshal(r.ReceiverGroup)
	if err != nil {
		return nil, err
	}
	output["ReceiverUsername"], err = json.Marshal(r.ReceiverUsername)
	if err != nil {
		return nil, err
	}
	output["SalesForceCaseId"], err = json.Marshal(r.SalesForceCaseId)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["Title"], err = json.Marshal(r.Title)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Workorder) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CaseNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CaseNumber); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CaseNumber")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ContractNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContractNumber); err != nil {
			return err
		}
	} else {
		r.ContractNumber = NewUnionNullInt()

		r.ContractNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CreatedDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedDate); err != nil {
			return err
		}
	} else {
		r.CreatedDate = NewUnionNullLong()

		r.CreatedDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CustomerNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CustomerNumber); err != nil {
			return err
		}
	} else {
		r.CustomerNumber = NewUnionNullInt()

		r.CustomerNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HasChecklist"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HasChecklist); err != nil {
			return err
		}
	} else {
		r.HasChecklist = NewUnionNullBool()

		r.HasChecklist = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HasExternalDialogue"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HasExternalDialogue); err != nil {
			return err
		}
	} else {
		r.HasExternalDialogue = NewUnionNullBool()

		r.HasExternalDialogue = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HasInternalDialogue"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HasInternalDialogue); err != nil {
			return err
		}
	} else {
		r.HasInternalDialogue = NewUnionNullBool()

		r.HasInternalDialogue = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastModified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModified); err != nil {
			return err
		}
	} else {
		r.LastModified = NewUnionNullLong()

		r.LastModified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeteringPoint"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeteringPoint); err != nil {
			return err
		}
	} else {
		r.MeteringPoint = NewUnionNullString()

		r.MeteringPoint = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReceiverGroup"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReceiverGroup); err != nil {
			return err
		}
	} else {
		r.ReceiverGroup = NewUnionNullString()

		r.ReceiverGroup = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReceiverUsername"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReceiverUsername); err != nil {
			return err
		}
	} else {
		r.ReceiverUsername = NewUnionNullString()

		r.ReceiverUsername = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SalesForceCaseId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SalesForceCaseId); err != nil {
			return err
		}
	} else {
		r.SalesForceCaseId = NewUnionNullString()

		r.SalesForceCaseId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		r.Status = NewUnionNullString()

		r.Status = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Title"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Title); err != nil {
			return err
		}
	} else {
		r.Title = NewUnionNullString()

		r.Title = nil
	}
	return nil
}
