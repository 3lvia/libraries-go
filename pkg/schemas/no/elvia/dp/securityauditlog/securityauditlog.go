// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100020_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// Audit logs as produced by Hashicorp Vault
type Securityauditlog struct {
	// Indicates when the audit log was received
	Receive_timestamp string `json:"receive_timestamp"`
	// The display name of the authenticated party
	Auth_display_name string `json:"auth_display_name"`
	// Indicates when the audit log was produced
	Timestamp string `json:"timestamp"`
	// The Kubernetes service account that made the request
	K8s_service_account string `json:"k8s_service_account"`
	// The Kubernetes namespace of the service account that made the request
	K8s_namespace string `json:"k8s_namespace"`
	// The GitHub organization of the person that made the request
	Github_org string `json:"github_org"`
	// The GitHub user ID of the person that made the request
	Github_user string `json:"github_user"`
	// The requested operation
	Operation string `json:"operation"`
	// The path to the requested secret
	Path string `json:"path"`
	// The remote address of the secret
	Remote_addr string `json:"remote_addr"`
}

const SecurityauditlogAvroCRC64Fingerprint = "\xfe\xe2\xf4\x93{\x1c\x83\xc7"

func NewSecurityauditlog() Securityauditlog {
	r := Securityauditlog{}
	return r
}

func DeserializeSecurityauditlog(r io.Reader) (Securityauditlog, error) {
	t := NewSecurityauditlog()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSecurityauditlogFromSchema(r io.Reader, schema string) (Securityauditlog, error) {
	t := NewSecurityauditlog()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSecurityauditlog(r Securityauditlog, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Receive_timestamp, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Auth_display_name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Timestamp, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.K8s_service_account, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.K8s_namespace, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Github_org, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Github_user, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Operation, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Path, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Remote_addr, w)
	if err != nil {
		return err
	}
	return err
}

func (r Securityauditlog) Serialize(w io.Writer) error {
	return writeSecurityauditlog(r, w)
}

func (r Securityauditlog) Schema() string {
	return "{\"doc\":\"Audit logs as produced by Hashicorp Vault\",\"fields\":[{\"doc\":\"Indicates when the audit log was received\",\"name\":\"receive_timestamp\",\"type\":\"string\"},{\"doc\":\"The display name of the authenticated party\",\"name\":\"auth_display_name\",\"type\":\"string\"},{\"doc\":\"Indicates when the audit log was produced\",\"name\":\"timestamp\",\"type\":\"string\"},{\"doc\":\"The Kubernetes service account that made the request\",\"name\":\"k8s_service_account\",\"type\":\"string\"},{\"doc\":\"The Kubernetes namespace of the service account that made the request\",\"name\":\"k8s_namespace\",\"type\":\"string\"},{\"doc\":\"The GitHub organization of the person that made the request\",\"name\":\"github_org\",\"type\":\"string\"},{\"doc\":\"The GitHub user ID of the person that made the request\",\"name\":\"github_user\",\"type\":\"string\"},{\"doc\":\"The requested operation\",\"name\":\"operation\",\"type\":\"string\"},{\"doc\":\"The path to the requested secret\",\"name\":\"path\",\"type\":\"string\"},{\"doc\":\"The remote address of the secret\",\"name\":\"remote_addr\",\"type\":\"string\"}],\"name\":\"no.elvia.dp.securityauditlog\",\"type\":\"record\"}"
}

func (r Securityauditlog) SchemaName() string {
	return "no.elvia.dp.securityauditlog"
}

func (_ Securityauditlog) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Securityauditlog) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Securityauditlog) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Securityauditlog) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Securityauditlog) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Securityauditlog) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Securityauditlog) SetString(v string)   { panic("Unsupported operation") }
func (_ Securityauditlog) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Securityauditlog) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Receive_timestamp}

		return w

	case 1:
		w := types.String{Target: &r.Auth_display_name}

		return w

	case 2:
		w := types.String{Target: &r.Timestamp}

		return w

	case 3:
		w := types.String{Target: &r.K8s_service_account}

		return w

	case 4:
		w := types.String{Target: &r.K8s_namespace}

		return w

	case 5:
		w := types.String{Target: &r.Github_org}

		return w

	case 6:
		w := types.String{Target: &r.Github_user}

		return w

	case 7:
		w := types.String{Target: &r.Operation}

		return w

	case 8:
		w := types.String{Target: &r.Path}

		return w

	case 9:
		w := types.String{Target: &r.Remote_addr}

		return w

	}
	panic("Unknown field index")
}

func (r *Securityauditlog) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Securityauditlog) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Securityauditlog) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Securityauditlog) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Securityauditlog) HintSize(int)                     { panic("Unsupported operation") }
func (_ Securityauditlog) Finalize()                        {}

func (_ Securityauditlog) AvroCRC64Fingerprint() []byte {
	return []byte(SecurityauditlogAvroCRC64Fingerprint)
}

func (r Securityauditlog) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["receive_timestamp"], err = json.Marshal(r.Receive_timestamp)
	if err != nil {
		return nil, err
	}
	output["auth_display_name"], err = json.Marshal(r.Auth_display_name)
	if err != nil {
		return nil, err
	}
	output["timestamp"], err = json.Marshal(r.Timestamp)
	if err != nil {
		return nil, err
	}
	output["k8s_service_account"], err = json.Marshal(r.K8s_service_account)
	if err != nil {
		return nil, err
	}
	output["k8s_namespace"], err = json.Marshal(r.K8s_namespace)
	if err != nil {
		return nil, err
	}
	output["github_org"], err = json.Marshal(r.Github_org)
	if err != nil {
		return nil, err
	}
	output["github_user"], err = json.Marshal(r.Github_user)
	if err != nil {
		return nil, err
	}
	output["operation"], err = json.Marshal(r.Operation)
	if err != nil {
		return nil, err
	}
	output["path"], err = json.Marshal(r.Path)
	if err != nil {
		return nil, err
	}
	output["remote_addr"], err = json.Marshal(r.Remote_addr)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Securityauditlog) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["receive_timestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Receive_timestamp); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for receive_timestamp")
	}
	val = func() json.RawMessage {
		if v, ok := fields["auth_display_name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Auth_display_name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for auth_display_name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["timestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Timestamp); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for timestamp")
	}
	val = func() json.RawMessage {
		if v, ok := fields["k8s_service_account"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.K8s_service_account); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for k8s_service_account")
	}
	val = func() json.RawMessage {
		if v, ok := fields["k8s_namespace"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.K8s_namespace); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for k8s_namespace")
	}
	val = func() json.RawMessage {
		if v, ok := fields["github_org"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Github_org); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for github_org")
	}
	val = func() json.RawMessage {
		if v, ok := fields["github_user"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Github_user); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for github_user")
	}
	val = func() json.RawMessage {
		if v, ok := fields["operation"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Operation); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for operation")
	}
	val = func() json.RawMessage {
		if v, ok := fields["path"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Path); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for path")
	}
	val = func() json.RawMessage {
		if v, ok := fields["remote_addr"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Remote_addr); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for remote_addr")
	}
	return nil
}
