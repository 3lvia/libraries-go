// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100492_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Operation struct {
	CorrelationId *UnionNullString `json:"CorrelationId"`

	MessageType *UnionNullString `json:"MessageType"`

	Type *UnionNullString `json:"Type"`
}

const OperationAvroCRC64Fingerprint = "×j|ɘ\x95\xb1"

func NewOperation() Operation {
	r := Operation{}
	r.CorrelationId = nil
	r.MessageType = nil
	r.Type = nil
	return r
}

func DeserializeOperation(r io.Reader) (Operation, error) {
	t := NewOperation()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOperationFromSchema(r io.Reader, schema string) (Operation, error) {
	t := NewOperation()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOperation(r Operation, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CorrelationId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MessageType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Type, w)
	if err != nil {
		return err
	}
	return err
}

func (r Operation) Serialize(w io.Writer) error {
	return writeOperation(r, w)
}

func (r Operation) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CorrelationId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MessageType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Type\",\"type\":[\"null\",\"string\"]}],\"name\":\"SmokeTests.Kafka.Dto.TelemetryScada.Operation\",\"type\":\"record\"}"
}

func (r Operation) SchemaName() string {
	return "SmokeTests.Kafka.Dto.TelemetryScada.Operation"
}

func (_ Operation) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Operation) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Operation) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Operation) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Operation) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Operation) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Operation) SetString(v string)   { panic("Unsupported operation") }
func (_ Operation) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Operation) Get(i int) types.Field {
	switch i {
	case 0:
		r.CorrelationId = NewUnionNullString()

		return r.CorrelationId
	case 1:
		r.MessageType = NewUnionNullString()

		return r.MessageType
	case 2:
		r.Type = NewUnionNullString()

		return r.Type
	}
	panic("Unknown field index")
}

func (r *Operation) SetDefault(i int) {
	switch i {
	case 0:
		r.CorrelationId = nil
		return
	case 1:
		r.MessageType = nil
		return
	case 2:
		r.Type = nil
		return
	}
	panic("Unknown field index")
}

func (r *Operation) NullField(i int) {
	switch i {
	case 0:
		r.CorrelationId = nil
		return
	case 1:
		r.MessageType = nil
		return
	case 2:
		r.Type = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Operation) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Operation) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Operation) HintSize(int)                     { panic("Unsupported operation") }
func (_ Operation) Finalize()                        {}

func (_ Operation) AvroCRC64Fingerprint() []byte {
	return []byte(OperationAvroCRC64Fingerprint)
}

func (r Operation) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CorrelationId"], err = json.Marshal(r.CorrelationId)
	if err != nil {
		return nil, err
	}
	output["MessageType"], err = json.Marshal(r.MessageType)
	if err != nil {
		return nil, err
	}
	output["Type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Operation) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CorrelationId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CorrelationId); err != nil {
			return err
		}
	} else {
		r.CorrelationId = NewUnionNullString()

		r.CorrelationId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MessageType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MessageType); err != nil {
			return err
		}
	} else {
		r.MessageType = NewUnionNullString()

		r.MessageType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		r.Type = NewUnionNullString()

		r.Type = nil
	}
	return nil
}
