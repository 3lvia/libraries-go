// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100492_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Result struct {
	ResultCode *UnionNullString `json:"ResultCode"`

	StatusCode *UnionNullString `json:"StatusCode"`
}

const ResultAvroCRC64Fingerprint = "v/?\xf6Ð³\xbe\xd9"

func NewResult() Result {
	r := Result{}
	r.ResultCode = nil
	r.StatusCode = nil
	return r
}

func DeserializeResult(r io.Reader) (Result, error) {
	t := NewResult()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeResultFromSchema(r io.Reader, schema string) (Result, error) {
	t := NewResult()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeResult(r Result, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ResultCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.StatusCode, w)
	if err != nil {
		return err
	}
	return err
}

func (r Result) Serialize(w io.Writer) error {
	return writeResult(r, w)
}

func (r Result) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ResultCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StatusCode\",\"type\":[\"null\",\"string\"]}],\"name\":\"SmokeTests.Kafka.Dto.TelemetryScada.Result\",\"type\":\"record\"}"
}

func (r Result) SchemaName() string {
	return "SmokeTests.Kafka.Dto.TelemetryScada.Result"
}

func (_ Result) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Result) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Result) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Result) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Result) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Result) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Result) SetString(v string)   { panic("Unsupported operation") }
func (_ Result) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Result) Get(i int) types.Field {
	switch i {
	case 0:
		r.ResultCode = NewUnionNullString()

		return r.ResultCode
	case 1:
		r.StatusCode = NewUnionNullString()

		return r.StatusCode
	}
	panic("Unknown field index")
}

func (r *Result) SetDefault(i int) {
	switch i {
	case 0:
		r.ResultCode = nil
		return
	case 1:
		r.StatusCode = nil
		return
	}
	panic("Unknown field index")
}

func (r *Result) NullField(i int) {
	switch i {
	case 0:
		r.ResultCode = nil
		return
	case 1:
		r.StatusCode = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Result) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Result) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Result) HintSize(int)                     { panic("Unsupported operation") }
func (_ Result) Finalize()                        {}

func (_ Result) AvroCRC64Fingerprint() []byte {
	return []byte(ResultAvroCRC64Fingerprint)
}

func (r Result) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ResultCode"], err = json.Marshal(r.ResultCode)
	if err != nil {
		return nil, err
	}
	output["StatusCode"], err = json.Marshal(r.StatusCode)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Result) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ResultCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ResultCode); err != nil {
			return err
		}
	} else {
		r.ResultCode = NewUnionNullString()

		r.ResultCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StatusCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StatusCode); err != nil {
			return err
		}
	} else {
		r.StatusCode = NewUnionNullString()

		r.StatusCode = nil
	}
	return nil
}
