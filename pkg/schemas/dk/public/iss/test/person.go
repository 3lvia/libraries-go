// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100112_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Person struct {
	Cars *UnionNullArrayUnionNullCar `json:"Cars"`

	Houses *UnionNullArrayUnionNullHouse `json:"Houses"`

	Id *UnionNullString `json:"Id"`

	Name *UnionNullString `json:"Name"`

	Updated *UnionNullString `json:"Updated"`
}

const PersonAvroCRC64Fingerprint = "mz\xd01\x01\xa6W\xb5"

func NewPerson() Person {
	r := Person{}
	r.Cars = nil
	r.Houses = nil
	r.Id = nil
	r.Name = nil
	r.Updated = nil
	return r
}

func DeserializePerson(r io.Reader) (Person, error) {
	t := NewPerson()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePersonFromSchema(r io.Reader, schema string) (Person, error) {
	t := NewPerson()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePerson(r Person, w io.Writer) error {
	var err error
	err = writeUnionNullArrayUnionNullCar(r.Cars, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullHouse(r.Houses, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Updated, w)
	if err != nil {
		return err
	}
	return err
}

func (r Person) Serialize(w io.Writer) error {
	return writePerson(r, w)
}

func (r Person) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Cars\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Color\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Gearbox\",\"type\":[\"null\",{\"name\":\"Gearbox\",\"symbols\":[\"Automatic\",\"Manual\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"model\",\"type\":[\"null\",\"string\"]}],\"name\":\"Car\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"Houses\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Address\",\"type\":[\"null\",\"string\"]},{\"name\":\"Buildingtype\",\"type\":{\"name\":\"Buildingtype\",\"symbols\":[\"House\",\"Apartment\",\"Cabin\",\"Other\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"Color\",\"type\":[\"null\",\"string\"]}],\"name\":\"House\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]}],\"name\":\"dp.demoapp.Person\",\"type\":\"record\"}"
}

func (r Person) SchemaName() string {
	return "dp.demoapp.Person"
}

func (_ Person) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Person) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Person) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Person) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Person) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Person) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Person) SetString(v string)   { panic("Unsupported operation") }
func (_ Person) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Person) Get(i int) types.Field {
	switch i {
	case 0:
		r.Cars = NewUnionNullArrayUnionNullCar()

		return r.Cars
	case 1:
		r.Houses = NewUnionNullArrayUnionNullHouse()

		return r.Houses
	case 2:
		r.Id = NewUnionNullString()

		return r.Id
	case 3:
		r.Name = NewUnionNullString()

		return r.Name
	case 4:
		r.Updated = NewUnionNullString()

		return r.Updated
	}
	panic("Unknown field index")
}

func (r *Person) SetDefault(i int) {
	switch i {
	case 0:
		r.Cars = nil
		return
	case 1:
		r.Houses = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.Name = nil
		return
	case 4:
		r.Updated = nil
		return
	}
	panic("Unknown field index")
}

func (r *Person) NullField(i int) {
	switch i {
	case 0:
		r.Cars = nil
		return
	case 1:
		r.Houses = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.Name = nil
		return
	case 4:
		r.Updated = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Person) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Person) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Person) HintSize(int)                     { panic("Unsupported operation") }
func (_ Person) Finalize()                        {}

func (_ Person) AvroCRC64Fingerprint() []byte {
	return []byte(PersonAvroCRC64Fingerprint)
}

func (r Person) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Cars"], err = json.Marshal(r.Cars)
	if err != nil {
		return nil, err
	}
	output["Houses"], err = json.Marshal(r.Houses)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Updated"], err = json.Marshal(r.Updated)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Person) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Cars"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cars); err != nil {
			return err
		}
	} else {
		r.Cars = NewUnionNullArrayUnionNullCar()

		r.Cars = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Houses"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Houses); err != nil {
			return err
		}
	} else {
		r.Houses = NewUnionNullArrayUnionNullHouse()

		r.Houses = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Updated"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Updated); err != nil {
			return err
		}
	} else {
		r.Updated = NewUnionNullString()

		r.Updated = nil
	}
	return nil
}
