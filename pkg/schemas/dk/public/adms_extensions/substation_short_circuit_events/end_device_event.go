// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100471_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EndDeviceEvent struct {
	CreatedDateTime int64 `json:"createdDateTime"`

	EndDevice *UnionNullIdentifiedObject `json:"EndDevice"`

	EndDeviceEventDetails *UnionNullArrayUnionNullEndDeviceEventDetail `json:"EndDeviceEventDetails"`

	EndDeviceEventType *UnionNullEndDeviceEventType `json:"EndDeviceEventType"`

	MeterReading *UnionNullMeterReading `json:"MeterReading"`

	UsagePoint *UnionNullIdentifiedObject `json:"UsagePoint"`
}

const EndDeviceEventAvroCRC64Fingerprint = "\x86\xa4\xeeg‹Å\x1d\xf8"

func NewEndDeviceEvent() EndDeviceEvent {
	r := EndDeviceEvent{}
	r.EndDevice = nil
	r.EndDeviceEventDetails = nil
	r.EndDeviceEventType = nil
	r.MeterReading = nil
	r.UsagePoint = nil
	return r
}

func DeserializeEndDeviceEvent(r io.Reader) (EndDeviceEvent, error) {
	t := NewEndDeviceEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEndDeviceEventFromSchema(r io.Reader, schema string) (EndDeviceEvent, error) {
	t := NewEndDeviceEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEndDeviceEvent(r EndDeviceEvent, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.CreatedDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullIdentifiedObject(r.EndDevice, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullEndDeviceEventDetail(r.EndDeviceEventDetails, w)
	if err != nil {
		return err
	}
	err = writeUnionNullEndDeviceEventType(r.EndDeviceEventType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeterReading(r.MeterReading, w)
	if err != nil {
		return err
	}
	err = writeUnionNullIdentifiedObject(r.UsagePoint, w)
	if err != nil {
		return err
	}
	return err
}

func (r EndDeviceEvent) Serialize(w io.Writer) error {
	return writeEndDeviceEvent(r, w)
}

func (r EndDeviceEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"createdDateTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"EndDevice\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"identifiedObject\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"EndDeviceEventDetails\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"value\",\"type\":[\"null\",\"string\"]}],\"name\":\"EndDeviceEventDetail\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"EndDeviceEventType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"domain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"eventOrAction\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"subDomain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"type\",\"type\":[\"null\",\"string\"]}],\"name\":\"EndDeviceEventType\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"MeterReading\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Readings\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ReadingType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ref\",\"type\":[\"null\",\"string\"]}],\"name\":\"ReadingReadingType\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"value\",\"type\":[\"null\",\"string\"]}],\"name\":\"Reading\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"MeterReading\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"UsagePoint\",\"type\":[\"null\",\"MeteringeventsMsiToAdms.Eventhub.Aidon.identifiedObject\"]}],\"name\":\"MeteringeventsMsiToAdms.Eventhub.Aidon.EndDeviceEvent\",\"type\":\"record\"}"
}

func (r EndDeviceEvent) SchemaName() string {
	return "MeteringeventsMsiToAdms.Eventhub.Aidon.EndDeviceEvent"
}

func (_ EndDeviceEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EndDeviceEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EndDeviceEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EndDeviceEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EndDeviceEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EndDeviceEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EndDeviceEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ EndDeviceEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EndDeviceEvent) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Long{Target: &r.CreatedDateTime}

		return w

	case 1:
		r.EndDevice = NewUnionNullIdentifiedObject()

		return r.EndDevice
	case 2:
		r.EndDeviceEventDetails = NewUnionNullArrayUnionNullEndDeviceEventDetail()

		return r.EndDeviceEventDetails
	case 3:
		r.EndDeviceEventType = NewUnionNullEndDeviceEventType()

		return r.EndDeviceEventType
	case 4:
		r.MeterReading = NewUnionNullMeterReading()

		return r.MeterReading
	case 5:
		r.UsagePoint = NewUnionNullIdentifiedObject()

		return r.UsagePoint
	}
	panic("Unknown field index")
}

func (r *EndDeviceEvent) SetDefault(i int) {
	switch i {
	case 1:
		r.EndDevice = nil
		return
	case 2:
		r.EndDeviceEventDetails = nil
		return
	case 3:
		r.EndDeviceEventType = nil
		return
	case 4:
		r.MeterReading = nil
		return
	case 5:
		r.UsagePoint = nil
		return
	}
	panic("Unknown field index")
}

func (r *EndDeviceEvent) NullField(i int) {
	switch i {
	case 1:
		r.EndDevice = nil
		return
	case 2:
		r.EndDeviceEventDetails = nil
		return
	case 3:
		r.EndDeviceEventType = nil
		return
	case 4:
		r.MeterReading = nil
		return
	case 5:
		r.UsagePoint = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EndDeviceEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EndDeviceEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EndDeviceEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ EndDeviceEvent) Finalize()                        {}

func (_ EndDeviceEvent) AvroCRC64Fingerprint() []byte {
	return []byte(EndDeviceEventAvroCRC64Fingerprint)
}

func (r EndDeviceEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["createdDateTime"], err = json.Marshal(r.CreatedDateTime)
	if err != nil {
		return nil, err
	}
	output["EndDevice"], err = json.Marshal(r.EndDevice)
	if err != nil {
		return nil, err
	}
	output["EndDeviceEventDetails"], err = json.Marshal(r.EndDeviceEventDetails)
	if err != nil {
		return nil, err
	}
	output["EndDeviceEventType"], err = json.Marshal(r.EndDeviceEventType)
	if err != nil {
		return nil, err
	}
	output["MeterReading"], err = json.Marshal(r.MeterReading)
	if err != nil {
		return nil, err
	}
	output["UsagePoint"], err = json.Marshal(r.UsagePoint)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EndDeviceEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["createdDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedDateTime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for createdDateTime")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EndDevice"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndDevice); err != nil {
			return err
		}
	} else {
		r.EndDevice = NewUnionNullIdentifiedObject()

		r.EndDevice = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EndDeviceEventDetails"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndDeviceEventDetails); err != nil {
			return err
		}
	} else {
		r.EndDeviceEventDetails = NewUnionNullArrayUnionNullEndDeviceEventDetail()

		r.EndDeviceEventDetails = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EndDeviceEventType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndDeviceEventType); err != nil {
			return err
		}
	} else {
		r.EndDeviceEventType = NewUnionNullEndDeviceEventType()

		r.EndDeviceEventType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeterReading"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeterReading); err != nil {
			return err
		}
	} else {
		r.MeterReading = NewUnionNullMeterReading()

		r.MeterReading = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UsagePoint"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsagePoint); err != nil {
			return err
		}
	} else {
		r.UsagePoint = NewUnionNullIdentifiedObject()

		r.UsagePoint = nil
	}
	return nil
}
