// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100471_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullEndDeviceEventTypeEnum int

const (
	UnionNullEndDeviceEventTypeEnumEndDeviceEvent UnionNullEndDeviceEventTypeEnum = 1
)

type UnionNullEndDeviceEvent struct {
	Null           *types.NullVal
	EndDeviceEvent EndDeviceEvent
	UnionType      UnionNullEndDeviceEventTypeEnum
}

func writeUnionNullEndDeviceEvent(r *UnionNullEndDeviceEvent, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullEndDeviceEventTypeEnumEndDeviceEvent:
		return writeEndDeviceEvent(r.EndDeviceEvent, w)
	}
	return fmt.Errorf("invalid value for *UnionNullEndDeviceEvent")
}

func NewUnionNullEndDeviceEvent() *UnionNullEndDeviceEvent {
	return &UnionNullEndDeviceEvent{}
}

func (r *UnionNullEndDeviceEvent) Serialize(w io.Writer) error {
	return writeUnionNullEndDeviceEvent(r, w)
}

func DeserializeUnionNullEndDeviceEvent(r io.Reader) (*UnionNullEndDeviceEvent, error) {
	t := NewUnionNullEndDeviceEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullEndDeviceEventFromSchema(r io.Reader, schema string) (*UnionNullEndDeviceEvent, error) {
	t := NewUnionNullEndDeviceEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullEndDeviceEvent) Schema() string {
	return "[\"null\",{\"fields\":[{\"name\":\"createdDateTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"EndDevice\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"identifiedObject\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"EndDeviceEventDetails\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"value\",\"type\":[\"null\",\"string\"]}],\"name\":\"EndDeviceEventDetail\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"EndDeviceEventType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"domain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"eventOrAction\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"subDomain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"type\",\"type\":[\"null\",\"string\"]}],\"name\":\"EndDeviceEventType\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"MeterReading\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Readings\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ReadingType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ref\",\"type\":[\"null\",\"string\"]}],\"name\":\"ReadingReadingType\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"value\",\"type\":[\"null\",\"string\"]}],\"name\":\"Reading\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"MeterReading\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"UsagePoint\",\"type\":[\"null\",\"MeteringeventsMsiToAdms.Eventhub.Aidon.identifiedObject\"]}],\"name\":\"EndDeviceEvent\",\"namespace\":\"MeteringeventsMsiToAdms.Eventhub.Aidon\",\"type\":\"record\"}]"
}

func (_ *UnionNullEndDeviceEvent) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullEndDeviceEvent) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullEndDeviceEvent) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullEndDeviceEvent) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullEndDeviceEvent) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullEndDeviceEvent) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullEndDeviceEvent) SetLong(v int64) {

	r.UnionType = (UnionNullEndDeviceEventTypeEnum)(v)
}

func (r *UnionNullEndDeviceEvent) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.EndDeviceEvent = NewEndDeviceEvent()
		return &types.Record{Target: (&r.EndDeviceEvent)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullEndDeviceEvent) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullEndDeviceEvent) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullEndDeviceEvent) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullEndDeviceEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullEndDeviceEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullEndDeviceEvent) Finalize()                        {}

func (r *UnionNullEndDeviceEvent) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullEndDeviceEventTypeEnumEndDeviceEvent:
		return json.Marshal(map[string]interface{}{"MeteringeventsMsiToAdms.Eventhub.Aidon.EndDeviceEvent": r.EndDeviceEvent})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullEndDeviceEvent")
}

func (r *UnionNullEndDeviceEvent) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["MeteringeventsMsiToAdms.Eventhub.Aidon.EndDeviceEvent"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.EndDeviceEvent)
	}
	return fmt.Errorf("invalid value for *UnionNullEndDeviceEvent")
}
