// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100471_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayUnionNullEventDataTypeEnum int

const (
	UnionNullArrayUnionNullEventDataTypeEnumArrayUnionNullEventData UnionNullArrayUnionNullEventDataTypeEnum = 1
)

type UnionNullArrayUnionNullEventData struct {
	Null                    *types.NullVal
	ArrayUnionNullEventData []*UnionNullEventData
	UnionType               UnionNullArrayUnionNullEventDataTypeEnum
}

func writeUnionNullArrayUnionNullEventData(r *UnionNullArrayUnionNullEventData, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayUnionNullEventDataTypeEnumArrayUnionNullEventData:
		return writeArrayUnionNullEventData(r.ArrayUnionNullEventData, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullEventData")
}

func NewUnionNullArrayUnionNullEventData() *UnionNullArrayUnionNullEventData {
	return &UnionNullArrayUnionNullEventData{}
}

func (r *UnionNullArrayUnionNullEventData) Serialize(w io.Writer) error {
	return writeUnionNullArrayUnionNullEventData(r, w)
}

func DeserializeUnionNullArrayUnionNullEventData(r io.Reader) (*UnionNullArrayUnionNullEventData, error) {
	t := NewUnionNullArrayUnionNullEventData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayUnionNullEventDataFromSchema(r io.Reader, schema string) (*UnionNullArrayUnionNullEventData, error) {
	t := NewUnionNullArrayUnionNullEventData()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayUnionNullEventData) Schema() string {
	return "[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Key\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"EventData\",\"type\":\"record\"}],\"type\":\"array\"}]"
}

func (_ *UnionNullArrayUnionNullEventData) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEventData) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEventData) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEventData) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEventData) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEventData) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayUnionNullEventData) SetLong(v int64) {

	r.UnionType = (UnionNullArrayUnionNullEventDataTypeEnum)(v)
}

func (r *UnionNullArrayUnionNullEventData) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayUnionNullEventData = make([]*UnionNullEventData, 0)
		return &ArrayUnionNullEventDataWrapper{Target: (&r.ArrayUnionNullEventData)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayUnionNullEventData) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEventData) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEventData) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEventData) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullEventData) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEventData) Finalize()                {}

func (r *UnionNullArrayUnionNullEventData) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayUnionNullEventDataTypeEnumArrayUnionNullEventData:
		return json.Marshal(map[string]interface{}{"array": r.ArrayUnionNullEventData})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayUnionNullEventData")
}

func (r *UnionNullArrayUnionNullEventData) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayUnionNullEventData)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullEventData")
}
