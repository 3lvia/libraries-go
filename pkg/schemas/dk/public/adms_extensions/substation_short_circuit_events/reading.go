// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100471_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Reading struct {
	ReadingType *UnionNullReadingReadingType `json:"ReadingType"`

	Value *UnionNullString `json:"value"`
}

const ReadingAvroCRC64Fingerprint = "\xcbD.\xe5\x0f\x84\xfcX"

func NewReading() Reading {
	r := Reading{}
	r.ReadingType = nil
	r.Value = nil
	return r
}

func DeserializeReading(r io.Reader) (Reading, error) {
	t := NewReading()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeReadingFromSchema(r io.Reader, schema string) (Reading, error) {
	t := NewReading()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeReading(r Reading, w io.Writer) error {
	var err error
	err = writeUnionNullReadingReadingType(r.ReadingType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r Reading) Serialize(w io.Writer) error {
	return writeReading(r, w)
}

func (r Reading) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ReadingType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ref\",\"type\":[\"null\",\"string\"]}],\"name\":\"ReadingReadingType\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"value\",\"type\":[\"null\",\"string\"]}],\"name\":\"MeteringeventsMsiToAdms.Eventhub.Aidon.Reading\",\"type\":\"record\"}"
}

func (r Reading) SchemaName() string {
	return "MeteringeventsMsiToAdms.Eventhub.Aidon.Reading"
}

func (_ Reading) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Reading) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Reading) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Reading) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Reading) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Reading) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Reading) SetString(v string)   { panic("Unsupported operation") }
func (_ Reading) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Reading) Get(i int) types.Field {
	switch i {
	case 0:
		r.ReadingType = NewUnionNullReadingReadingType()

		return r.ReadingType
	case 1:
		r.Value = NewUnionNullString()

		return r.Value
	}
	panic("Unknown field index")
}

func (r *Reading) SetDefault(i int) {
	switch i {
	case 0:
		r.ReadingType = nil
		return
	case 1:
		r.Value = nil
		return
	}
	panic("Unknown field index")
}

func (r *Reading) NullField(i int) {
	switch i {
	case 0:
		r.ReadingType = nil
		return
	case 1:
		r.Value = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Reading) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Reading) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Reading) HintSize(int)                     { panic("Unsupported operation") }
func (_ Reading) Finalize()                        {}

func (_ Reading) AvroCRC64Fingerprint() []byte {
	return []byte(ReadingAvroCRC64Fingerprint)
}

func (r Reading) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ReadingType"], err = json.Marshal(r.ReadingType)
	if err != nil {
		return nil, err
	}
	output["value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Reading) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ReadingType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReadingType); err != nil {
			return err
		}
	} else {
		r.ReadingType = NewUnionNullReadingReadingType()

		r.ReadingType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		r.Value = NewUnionNullString()

		r.Value = nil
	}
	return nil
}
