// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100471_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SubStationShortCircuitDto struct {
	EndDeviceEvent *UnionNullEndDeviceEvent `json:"EndDeviceEvent"`

	EventDatas *UnionNullArrayUnionNullEventData `json:"EventDatas"`

	SubstationId *UnionNullString `json:"SubstationId"`
}

const SubStationShortCircuitDtoAvroCRC64Fingerprint = "\x86R\xc9h\xc0\x1e\x9fc"

func NewSubStationShortCircuitDto() SubStationShortCircuitDto {
	r := SubStationShortCircuitDto{}
	r.EndDeviceEvent = nil
	r.EventDatas = nil
	r.SubstationId = nil
	return r
}

func DeserializeSubStationShortCircuitDto(r io.Reader) (SubStationShortCircuitDto, error) {
	t := NewSubStationShortCircuitDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSubStationShortCircuitDtoFromSchema(r io.Reader, schema string) (SubStationShortCircuitDto, error) {
	t := NewSubStationShortCircuitDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSubStationShortCircuitDto(r SubStationShortCircuitDto, w io.Writer) error {
	var err error
	err = writeUnionNullEndDeviceEvent(r.EndDeviceEvent, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullEventData(r.EventDatas, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SubstationId, w)
	if err != nil {
		return err
	}
	return err
}

func (r SubStationShortCircuitDto) Serialize(w io.Writer) error {
	return writeSubStationShortCircuitDto(r, w)
}

func (r SubStationShortCircuitDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"EndDeviceEvent\",\"type\":[\"null\",{\"fields\":[{\"name\":\"createdDateTime\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"default\":null,\"name\":\"EndDevice\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"identifiedObject\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"EndDeviceEventDetails\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"value\",\"type\":[\"null\",\"string\"]}],\"name\":\"EndDeviceEventDetail\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"EndDeviceEventType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"domain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"eventOrAction\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"subDomain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"type\",\"type\":[\"null\",\"string\"]}],\"name\":\"EndDeviceEventType\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"MeterReading\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Readings\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ReadingType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ref\",\"type\":[\"null\",\"string\"]}],\"name\":\"ReadingReadingType\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"value\",\"type\":[\"null\",\"string\"]}],\"name\":\"Reading\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"MeterReading\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"UsagePoint\",\"type\":[\"null\",\"MeteringeventsMsiToAdms.Eventhub.Aidon.identifiedObject\"]}],\"name\":\"EndDeviceEvent\",\"namespace\":\"MeteringeventsMsiToAdms.Eventhub.Aidon\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"EventDatas\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Key\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"EventData\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"SubstationId\",\"type\":[\"null\",\"string\"]}],\"name\":\"MeteringeventsMsiToAdms.Adms.DigitalSignalN.Dto.SubStationShortCircuitDto\",\"type\":\"record\"}"
}

func (r SubStationShortCircuitDto) SchemaName() string {
	return "MeteringeventsMsiToAdms.Adms.DigitalSignalN.Dto.SubStationShortCircuitDto"
}

func (_ SubStationShortCircuitDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SubStationShortCircuitDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SubStationShortCircuitDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SubStationShortCircuitDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SubStationShortCircuitDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SubStationShortCircuitDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SubStationShortCircuitDto) SetString(v string)   { panic("Unsupported operation") }
func (_ SubStationShortCircuitDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SubStationShortCircuitDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.EndDeviceEvent = NewUnionNullEndDeviceEvent()

		return r.EndDeviceEvent
	case 1:
		r.EventDatas = NewUnionNullArrayUnionNullEventData()

		return r.EventDatas
	case 2:
		r.SubstationId = NewUnionNullString()

		return r.SubstationId
	}
	panic("Unknown field index")
}

func (r *SubStationShortCircuitDto) SetDefault(i int) {
	switch i {
	case 0:
		r.EndDeviceEvent = nil
		return
	case 1:
		r.EventDatas = nil
		return
	case 2:
		r.SubstationId = nil
		return
	}
	panic("Unknown field index")
}

func (r *SubStationShortCircuitDto) NullField(i int) {
	switch i {
	case 0:
		r.EndDeviceEvent = nil
		return
	case 1:
		r.EventDatas = nil
		return
	case 2:
		r.SubstationId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SubStationShortCircuitDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SubStationShortCircuitDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SubStationShortCircuitDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ SubStationShortCircuitDto) Finalize()                        {}

func (_ SubStationShortCircuitDto) AvroCRC64Fingerprint() []byte {
	return []byte(SubStationShortCircuitDtoAvroCRC64Fingerprint)
}

func (r SubStationShortCircuitDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EndDeviceEvent"], err = json.Marshal(r.EndDeviceEvent)
	if err != nil {
		return nil, err
	}
	output["EventDatas"], err = json.Marshal(r.EventDatas)
	if err != nil {
		return nil, err
	}
	output["SubstationId"], err = json.Marshal(r.SubstationId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SubStationShortCircuitDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EndDeviceEvent"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndDeviceEvent); err != nil {
			return err
		}
	} else {
		r.EndDeviceEvent = NewUnionNullEndDeviceEvent()

		r.EndDeviceEvent = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventDatas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventDatas); err != nil {
			return err
		}
	} else {
		r.EventDatas = NewUnionNullArrayUnionNullEventData()

		r.EventDatas = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SubstationId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SubstationId); err != nil {
			return err
		}
	} else {
		r.SubstationId = NewUnionNullString()

		r.SubstationId = nil
	}
	return nil
}
