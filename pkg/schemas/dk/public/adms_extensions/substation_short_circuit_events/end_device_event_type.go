// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100471_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EndDeviceEventType struct {
	Domain *UnionNullString `json:"domain"`

	EventOrAction *UnionNullString `json:"eventOrAction"`

	SubDomain *UnionNullString `json:"subDomain"`

	Type *UnionNullString `json:"type"`
}

const EndDeviceEventTypeAvroCRC64Fingerprint = "\xdcl\x1a/\xca&\xea\xae"

func NewEndDeviceEventType() EndDeviceEventType {
	r := EndDeviceEventType{}
	r.Domain = nil
	r.EventOrAction = nil
	r.SubDomain = nil
	r.Type = nil
	return r
}

func DeserializeEndDeviceEventType(r io.Reader) (EndDeviceEventType, error) {
	t := NewEndDeviceEventType()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEndDeviceEventTypeFromSchema(r io.Reader, schema string) (EndDeviceEventType, error) {
	t := NewEndDeviceEventType()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEndDeviceEventType(r EndDeviceEventType, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Domain, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EventOrAction, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SubDomain, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Type, w)
	if err != nil {
		return err
	}
	return err
}

func (r EndDeviceEventType) Serialize(w io.Writer) error {
	return writeEndDeviceEventType(r, w)
}

func (r EndDeviceEventType) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"domain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"eventOrAction\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"subDomain\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"type\",\"type\":[\"null\",\"string\"]}],\"name\":\"MeteringeventsMsiToAdms.Eventhub.Aidon.EndDeviceEventType\",\"type\":\"record\"}"
}

func (r EndDeviceEventType) SchemaName() string {
	return "MeteringeventsMsiToAdms.Eventhub.Aidon.EndDeviceEventType"
}

func (_ EndDeviceEventType) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EndDeviceEventType) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EndDeviceEventType) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EndDeviceEventType) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EndDeviceEventType) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EndDeviceEventType) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EndDeviceEventType) SetString(v string)   { panic("Unsupported operation") }
func (_ EndDeviceEventType) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EndDeviceEventType) Get(i int) types.Field {
	switch i {
	case 0:
		r.Domain = NewUnionNullString()

		return r.Domain
	case 1:
		r.EventOrAction = NewUnionNullString()

		return r.EventOrAction
	case 2:
		r.SubDomain = NewUnionNullString()

		return r.SubDomain
	case 3:
		r.Type = NewUnionNullString()

		return r.Type
	}
	panic("Unknown field index")
}

func (r *EndDeviceEventType) SetDefault(i int) {
	switch i {
	case 0:
		r.Domain = nil
		return
	case 1:
		r.EventOrAction = nil
		return
	case 2:
		r.SubDomain = nil
		return
	case 3:
		r.Type = nil
		return
	}
	panic("Unknown field index")
}

func (r *EndDeviceEventType) NullField(i int) {
	switch i {
	case 0:
		r.Domain = nil
		return
	case 1:
		r.EventOrAction = nil
		return
	case 2:
		r.SubDomain = nil
		return
	case 3:
		r.Type = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EndDeviceEventType) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EndDeviceEventType) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EndDeviceEventType) HintSize(int)                     { panic("Unsupported operation") }
func (_ EndDeviceEventType) Finalize()                        {}

func (_ EndDeviceEventType) AvroCRC64Fingerprint() []byte {
	return []byte(EndDeviceEventTypeAvroCRC64Fingerprint)
}

func (r EndDeviceEventType) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["domain"], err = json.Marshal(r.Domain)
	if err != nil {
		return nil, err
	}
	output["eventOrAction"], err = json.Marshal(r.EventOrAction)
	if err != nil {
		return nil, err
	}
	output["subDomain"], err = json.Marshal(r.SubDomain)
	if err != nil {
		return nil, err
	}
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EndDeviceEventType) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["domain"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Domain); err != nil {
			return err
		}
	} else {
		r.Domain = NewUnionNullString()

		r.Domain = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["eventOrAction"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventOrAction); err != nil {
			return err
		}
	} else {
		r.EventOrAction = NewUnionNullString()

		r.EventOrAction = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["subDomain"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SubDomain); err != nil {
			return err
		}
	} else {
		r.SubDomain = NewUnionNullString()

		r.SubDomain = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		r.Type = NewUnionNullString()

		r.Type = nil
	}
	return nil
}
