// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100471_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EventData struct {
	Key *UnionNullString `json:"Key"`

	Value *UnionNullString `json:"Value"`
}

const EventDataAvroCRC64Fingerprint = "n\xe7sX\a\xedt\xea"

func NewEventData() EventData {
	r := EventData{}
	r.Key = nil
	r.Value = nil
	return r
}

func DeserializeEventData(r io.Reader) (EventData, error) {
	t := NewEventData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEventDataFromSchema(r io.Reader, schema string) (EventData, error) {
	t := NewEventData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEventData(r EventData, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Key, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r EventData) Serialize(w io.Writer) error {
	return writeEventData(r, w)
}

func (r EventData) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Key\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"MeteringeventsMsiToAdms.Adms.DigitalSignalN.Dto.EventData\",\"type\":\"record\"}"
}

func (r EventData) SchemaName() string {
	return "MeteringeventsMsiToAdms.Adms.DigitalSignalN.Dto.EventData"
}

func (_ EventData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EventData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EventData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EventData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EventData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EventData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EventData) SetString(v string)   { panic("Unsupported operation") }
func (_ EventData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EventData) Get(i int) types.Field {
	switch i {
	case 0:
		r.Key = NewUnionNullString()

		return r.Key
	case 1:
		r.Value = NewUnionNullString()

		return r.Value
	}
	panic("Unknown field index")
}

func (r *EventData) SetDefault(i int) {
	switch i {
	case 0:
		r.Key = nil
		return
	case 1:
		r.Value = nil
		return
	}
	panic("Unknown field index")
}

func (r *EventData) NullField(i int) {
	switch i {
	case 0:
		r.Key = nil
		return
	case 1:
		r.Value = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EventData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EventData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EventData) HintSize(int)                     { panic("Unsupported operation") }
func (_ EventData) Finalize()                        {}

func (_ EventData) AvroCRC64Fingerprint() []byte {
	return []byte(EventDataAvroCRC64Fingerprint)
}

func (r EventData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Key"], err = json.Marshal(r.Key)
	if err != nil {
		return nil, err
	}
	output["Value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EventData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Key"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Key); err != nil {
			return err
		}
	} else {
		r.Key = NewUnionNullString()

		r.Key = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		r.Value = NewUnionNullString()

		r.Value = nil
	}
	return nil
}
