// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100487_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type WorkLocationPositionPointsDto struct {
	SequenceNumber *UnionNullString `json:"sequenceNumber"`

	XPosition *UnionNullString `json:"xPosition"`

	YPosition *UnionNullString `json:"yPosition"`

	ZPosition *UnionNullString `json:"zPosition"`
}

const WorkLocationPositionPointsDtoAvroCRC64Fingerprint = "\xb0\xc4|])$:!"

func NewWorkLocationPositionPointsDto() WorkLocationPositionPointsDto {
	r := WorkLocationPositionPointsDto{}
	r.SequenceNumber = nil
	r.XPosition = nil
	r.YPosition = nil
	r.ZPosition = nil
	return r
}

func DeserializeWorkLocationPositionPointsDto(r io.Reader) (WorkLocationPositionPointsDto, error) {
	t := NewWorkLocationPositionPointsDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeWorkLocationPositionPointsDtoFromSchema(r io.Reader, schema string) (WorkLocationPositionPointsDto, error) {
	t := NewWorkLocationPositionPointsDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeWorkLocationPositionPointsDto(r WorkLocationPositionPointsDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.SequenceNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.XPosition, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.YPosition, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ZPosition, w)
	if err != nil {
		return err
	}
	return err
}

func (r WorkLocationPositionPointsDto) Serialize(w io.Writer) error {
	return writeWorkLocationPositionPointsDto(r, w)
}

func (r WorkLocationPositionPointsDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"sequenceNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"xPosition\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"yPosition\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"zPosition\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.WorkLocationPositionPointsDto\",\"type\":\"record\"}"
}

func (r WorkLocationPositionPointsDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.WorkLocationPositionPointsDto"
}

func (_ WorkLocationPositionPointsDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ WorkLocationPositionPointsDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ WorkLocationPositionPointsDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ WorkLocationPositionPointsDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ WorkLocationPositionPointsDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ WorkLocationPositionPointsDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ WorkLocationPositionPointsDto) SetString(v string)   { panic("Unsupported operation") }
func (_ WorkLocationPositionPointsDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *WorkLocationPositionPointsDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.SequenceNumber = NewUnionNullString()

		return r.SequenceNumber
	case 1:
		r.XPosition = NewUnionNullString()

		return r.XPosition
	case 2:
		r.YPosition = NewUnionNullString()

		return r.YPosition
	case 3:
		r.ZPosition = NewUnionNullString()

		return r.ZPosition
	}
	panic("Unknown field index")
}

func (r *WorkLocationPositionPointsDto) SetDefault(i int) {
	switch i {
	case 0:
		r.SequenceNumber = nil
		return
	case 1:
		r.XPosition = nil
		return
	case 2:
		r.YPosition = nil
		return
	case 3:
		r.ZPosition = nil
		return
	}
	panic("Unknown field index")
}

func (r *WorkLocationPositionPointsDto) NullField(i int) {
	switch i {
	case 0:
		r.SequenceNumber = nil
		return
	case 1:
		r.XPosition = nil
		return
	case 2:
		r.YPosition = nil
		return
	case 3:
		r.ZPosition = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ WorkLocationPositionPointsDto) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ WorkLocationPositionPointsDto) AppendArray() types.Field { panic("Unsupported operation") }
func (_ WorkLocationPositionPointsDto) HintSize(int)             { panic("Unsupported operation") }
func (_ WorkLocationPositionPointsDto) Finalize()                {}

func (_ WorkLocationPositionPointsDto) AvroCRC64Fingerprint() []byte {
	return []byte(WorkLocationPositionPointsDtoAvroCRC64Fingerprint)
}

func (r WorkLocationPositionPointsDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["sequenceNumber"], err = json.Marshal(r.SequenceNumber)
	if err != nil {
		return nil, err
	}
	output["xPosition"], err = json.Marshal(r.XPosition)
	if err != nil {
		return nil, err
	}
	output["yPosition"], err = json.Marshal(r.YPosition)
	if err != nil {
		return nil, err
	}
	output["zPosition"], err = json.Marshal(r.ZPosition)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *WorkLocationPositionPointsDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["sequenceNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SequenceNumber); err != nil {
			return err
		}
	} else {
		r.SequenceNumber = NewUnionNullString()

		r.SequenceNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["xPosition"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.XPosition); err != nil {
			return err
		}
	} else {
		r.XPosition = NewUnionNullString()

		r.XPosition = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["yPosition"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.YPosition); err != nil {
			return err
		}
	} else {
		r.YPosition = NewUnionNullString()

		r.YPosition = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["zPosition"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ZPosition); err != nil {
			return err
		}
	} else {
		r.ZPosition = NewUnionNullString()

		r.ZPosition = nil
	}
	return nil
}
