// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100487_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayUnionNullAssetDtoTypeEnum int

const (
	UnionNullArrayUnionNullAssetDtoTypeEnumArrayUnionNullAssetDto UnionNullArrayUnionNullAssetDtoTypeEnum = 1
)

type UnionNullArrayUnionNullAssetDto struct {
	Null                   *types.NullVal
	ArrayUnionNullAssetDto []*UnionNullAssetDto
	UnionType              UnionNullArrayUnionNullAssetDtoTypeEnum
}

func writeUnionNullArrayUnionNullAssetDto(r *UnionNullArrayUnionNullAssetDto, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayUnionNullAssetDtoTypeEnumArrayUnionNullAssetDto:
		return writeArrayUnionNullAssetDto(r.ArrayUnionNullAssetDto, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullAssetDto")
}

func NewUnionNullArrayUnionNullAssetDto() *UnionNullArrayUnionNullAssetDto {
	return &UnionNullArrayUnionNullAssetDto{}
}

func (r *UnionNullArrayUnionNullAssetDto) Serialize(w io.Writer) error {
	return writeUnionNullArrayUnionNullAssetDto(r, w)
}

func DeserializeUnionNullArrayUnionNullAssetDto(r io.Reader) (*UnionNullArrayUnionNullAssetDto, error) {
	t := NewUnionNullArrayUnionNullAssetDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayUnionNullAssetDtoFromSchema(r io.Reader, schema string) (*UnionNullArrayUnionNullAssetDto, error) {
	t := NewUnionNullArrayUnionNullAssetDto()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayUnionNullAssetDto) Schema() string {
	return "[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Location\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CoordinateSystem\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"crsUrn\",\"type\":[\"null\",\"string\"]}],\"name\":\"WorkLocationCoordinateSystemDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"PositionPoints\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"sequenceNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"xPosition\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"yPosition\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"zPosition\",\"type\":[\"null\",\"string\"]}],\"name\":\"WorkLocationPositionPointsDto\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"WorkLocationDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Names\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]}],\"name\":\"AssetNamesDto\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"critical\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"lastModifiedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"lastModifiedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"status\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"dateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"value\",\"type\":[\"null\",\"string\"]}],\"name\":\"StatusDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"type\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"utcNumber\",\"type\":[\"null\",\"string\"]}],\"name\":\"AssetDto\",\"type\":\"record\"}],\"type\":\"array\"}]"
}

func (_ *UnionNullArrayUnionNullAssetDto) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullAssetDto) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullAssetDto) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullAssetDto) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullAssetDto) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullAssetDto) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayUnionNullAssetDto) SetLong(v int64) {

	r.UnionType = (UnionNullArrayUnionNullAssetDtoTypeEnum)(v)
}

func (r *UnionNullArrayUnionNullAssetDto) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayUnionNullAssetDto = make([]*UnionNullAssetDto, 0)
		return &ArrayUnionNullAssetDtoWrapper{Target: (&r.ArrayUnionNullAssetDto)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayUnionNullAssetDto) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullAssetDto) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullAssetDto) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullAssetDto) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullAssetDto) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullAssetDto) Finalize()                {}

func (r *UnionNullArrayUnionNullAssetDto) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayUnionNullAssetDtoTypeEnumArrayUnionNullAssetDto:
		return json.Marshal(map[string]interface{}{"array": r.ArrayUnionNullAssetDto})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayUnionNullAssetDto")
}

func (r *UnionNullArrayUnionNullAssetDto) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayUnionNullAssetDto)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullAssetDto")
}
