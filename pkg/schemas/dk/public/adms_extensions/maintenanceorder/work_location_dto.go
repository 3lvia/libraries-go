// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100487_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type WorkLocationDto struct {
	CoordinateSystem *UnionNullWorkLocationCoordinateSystemDto `json:"CoordinateSystem"`

	PositionPoints *UnionNullArrayUnionNullWorkLocationPositionPointsDto `json:"PositionPoints"`

	MRID *UnionNullString `json:"mRID"`
}

const WorkLocationDtoAvroCRC64Fingerprint = "\"\xe0\x11B/\x8d\xb2\xc7"

func NewWorkLocationDto() WorkLocationDto {
	r := WorkLocationDto{}
	r.CoordinateSystem = nil
	r.PositionPoints = nil
	r.MRID = nil
	return r
}

func DeserializeWorkLocationDto(r io.Reader) (WorkLocationDto, error) {
	t := NewWorkLocationDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeWorkLocationDtoFromSchema(r io.Reader, schema string) (WorkLocationDto, error) {
	t := NewWorkLocationDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeWorkLocationDto(r WorkLocationDto, w io.Writer) error {
	var err error
	err = writeUnionNullWorkLocationCoordinateSystemDto(r.CoordinateSystem, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullWorkLocationPositionPointsDto(r.PositionPoints, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MRID, w)
	if err != nil {
		return err
	}
	return err
}

func (r WorkLocationDto) Serialize(w io.Writer) error {
	return writeWorkLocationDto(r, w)
}

func (r WorkLocationDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CoordinateSystem\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"crsUrn\",\"type\":[\"null\",\"string\"]}],\"name\":\"WorkLocationCoordinateSystemDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"PositionPoints\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"sequenceNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"xPosition\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"yPosition\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"zPosition\",\"type\":[\"null\",\"string\"]}],\"name\":\"WorkLocationPositionPointsDto\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.WorkLocationDto\",\"type\":\"record\"}"
}

func (r WorkLocationDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.WorkLocationDto"
}

func (_ WorkLocationDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ WorkLocationDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ WorkLocationDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ WorkLocationDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ WorkLocationDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ WorkLocationDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ WorkLocationDto) SetString(v string)   { panic("Unsupported operation") }
func (_ WorkLocationDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *WorkLocationDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.CoordinateSystem = NewUnionNullWorkLocationCoordinateSystemDto()

		return r.CoordinateSystem
	case 1:
		r.PositionPoints = NewUnionNullArrayUnionNullWorkLocationPositionPointsDto()

		return r.PositionPoints
	case 2:
		r.MRID = NewUnionNullString()

		return r.MRID
	}
	panic("Unknown field index")
}

func (r *WorkLocationDto) SetDefault(i int) {
	switch i {
	case 0:
		r.CoordinateSystem = nil
		return
	case 1:
		r.PositionPoints = nil
		return
	case 2:
		r.MRID = nil
		return
	}
	panic("Unknown field index")
}

func (r *WorkLocationDto) NullField(i int) {
	switch i {
	case 0:
		r.CoordinateSystem = nil
		return
	case 1:
		r.PositionPoints = nil
		return
	case 2:
		r.MRID = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ WorkLocationDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ WorkLocationDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ WorkLocationDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ WorkLocationDto) Finalize()                        {}

func (_ WorkLocationDto) AvroCRC64Fingerprint() []byte {
	return []byte(WorkLocationDtoAvroCRC64Fingerprint)
}

func (r WorkLocationDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CoordinateSystem"], err = json.Marshal(r.CoordinateSystem)
	if err != nil {
		return nil, err
	}
	output["PositionPoints"], err = json.Marshal(r.PositionPoints)
	if err != nil {
		return nil, err
	}
	output["mRID"], err = json.Marshal(r.MRID)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *WorkLocationDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CoordinateSystem"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CoordinateSystem); err != nil {
			return err
		}
	} else {
		r.CoordinateSystem = NewUnionNullWorkLocationCoordinateSystemDto()

		r.CoordinateSystem = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PositionPoints"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PositionPoints); err != nil {
			return err
		}
	} else {
		r.PositionPoints = NewUnionNullArrayUnionNullWorkLocationPositionPointsDto()

		r.PositionPoints = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["mRID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MRID); err != nil {
			return err
		}
	} else {
		r.MRID = NewUnionNullString()

		r.MRID = nil
	}
	return nil
}
