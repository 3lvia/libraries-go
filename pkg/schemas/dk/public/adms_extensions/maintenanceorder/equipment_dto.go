// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100487_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EquipmentDto struct {
	B1TEXT *UnionNullString `json:"B1TEXT"`

	B2TEXT *UnionNullString `json:"B2TEXT"`

	B3TEXT *UnionNullString `json:"B3TEXT"`

	ELTEXT *UnionNullString `json:"ELTEXT"`

	FeederLV *UnionNullString `json:"FeederLV"`

	Feedername *UnionNullString `json:"Feedername"`

	Names *UnionNullArrayUnionNullEquipmentNamesDto `json:"Names"`

	VoltageLevelNum *UnionNullString `json:"VoltageLevelNum"`

	MRID *UnionNullString `json:"mRID"`

	Type *UnionNullString `json:"type"`
}

const EquipmentDtoAvroCRC64Fingerprint = " &È—>\x88~\xc3"

func NewEquipmentDto() EquipmentDto {
	r := EquipmentDto{}
	r.B1TEXT = nil
	r.B2TEXT = nil
	r.B3TEXT = nil
	r.ELTEXT = nil
	r.FeederLV = nil
	r.Feedername = nil
	r.Names = nil
	r.VoltageLevelNum = nil
	r.MRID = nil
	r.Type = nil
	return r
}

func DeserializeEquipmentDto(r io.Reader) (EquipmentDto, error) {
	t := NewEquipmentDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEquipmentDtoFromSchema(r io.Reader, schema string) (EquipmentDto, error) {
	t := NewEquipmentDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEquipmentDto(r EquipmentDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.B1TEXT, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.B2TEXT, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.B3TEXT, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ELTEXT, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FeederLV, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Feedername, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullEquipmentNamesDto(r.Names, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.VoltageLevelNum, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MRID, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Type, w)
	if err != nil {
		return err
	}
	return err
}

func (r EquipmentDto) Serialize(w io.Writer) error {
	return writeEquipmentDto(r, w)
}

func (r EquipmentDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"B1TEXT\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B2TEXT\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B3TEXT\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ELTEXT\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FeederLV\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Feedername\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Names\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]}],\"name\":\"EquipmentNamesDto\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"VoltageLevelNum\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"type\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.EquipmentDto\",\"type\":\"record\"}"
}

func (r EquipmentDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.EquipmentDto"
}

func (_ EquipmentDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EquipmentDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EquipmentDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EquipmentDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EquipmentDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EquipmentDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EquipmentDto) SetString(v string)   { panic("Unsupported operation") }
func (_ EquipmentDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EquipmentDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.B1TEXT = NewUnionNullString()

		return r.B1TEXT
	case 1:
		r.B2TEXT = NewUnionNullString()

		return r.B2TEXT
	case 2:
		r.B3TEXT = NewUnionNullString()

		return r.B3TEXT
	case 3:
		r.ELTEXT = NewUnionNullString()

		return r.ELTEXT
	case 4:
		r.FeederLV = NewUnionNullString()

		return r.FeederLV
	case 5:
		r.Feedername = NewUnionNullString()

		return r.Feedername
	case 6:
		r.Names = NewUnionNullArrayUnionNullEquipmentNamesDto()

		return r.Names
	case 7:
		r.VoltageLevelNum = NewUnionNullString()

		return r.VoltageLevelNum
	case 8:
		r.MRID = NewUnionNullString()

		return r.MRID
	case 9:
		r.Type = NewUnionNullString()

		return r.Type
	}
	panic("Unknown field index")
}

func (r *EquipmentDto) SetDefault(i int) {
	switch i {
	case 0:
		r.B1TEXT = nil
		return
	case 1:
		r.B2TEXT = nil
		return
	case 2:
		r.B3TEXT = nil
		return
	case 3:
		r.ELTEXT = nil
		return
	case 4:
		r.FeederLV = nil
		return
	case 5:
		r.Feedername = nil
		return
	case 6:
		r.Names = nil
		return
	case 7:
		r.VoltageLevelNum = nil
		return
	case 8:
		r.MRID = nil
		return
	case 9:
		r.Type = nil
		return
	}
	panic("Unknown field index")
}

func (r *EquipmentDto) NullField(i int) {
	switch i {
	case 0:
		r.B1TEXT = nil
		return
	case 1:
		r.B2TEXT = nil
		return
	case 2:
		r.B3TEXT = nil
		return
	case 3:
		r.ELTEXT = nil
		return
	case 4:
		r.FeederLV = nil
		return
	case 5:
		r.Feedername = nil
		return
	case 6:
		r.Names = nil
		return
	case 7:
		r.VoltageLevelNum = nil
		return
	case 8:
		r.MRID = nil
		return
	case 9:
		r.Type = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EquipmentDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EquipmentDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EquipmentDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ EquipmentDto) Finalize()                        {}

func (_ EquipmentDto) AvroCRC64Fingerprint() []byte {
	return []byte(EquipmentDtoAvroCRC64Fingerprint)
}

func (r EquipmentDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["B1TEXT"], err = json.Marshal(r.B1TEXT)
	if err != nil {
		return nil, err
	}
	output["B2TEXT"], err = json.Marshal(r.B2TEXT)
	if err != nil {
		return nil, err
	}
	output["B3TEXT"], err = json.Marshal(r.B3TEXT)
	if err != nil {
		return nil, err
	}
	output["ELTEXT"], err = json.Marshal(r.ELTEXT)
	if err != nil {
		return nil, err
	}
	output["FeederLV"], err = json.Marshal(r.FeederLV)
	if err != nil {
		return nil, err
	}
	output["Feedername"], err = json.Marshal(r.Feedername)
	if err != nil {
		return nil, err
	}
	output["Names"], err = json.Marshal(r.Names)
	if err != nil {
		return nil, err
	}
	output["VoltageLevelNum"], err = json.Marshal(r.VoltageLevelNum)
	if err != nil {
		return nil, err
	}
	output["mRID"], err = json.Marshal(r.MRID)
	if err != nil {
		return nil, err
	}
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EquipmentDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["B1TEXT"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B1TEXT); err != nil {
			return err
		}
	} else {
		r.B1TEXT = NewUnionNullString()

		r.B1TEXT = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["B2TEXT"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B2TEXT); err != nil {
			return err
		}
	} else {
		r.B2TEXT = NewUnionNullString()

		r.B2TEXT = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["B3TEXT"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B3TEXT); err != nil {
			return err
		}
	} else {
		r.B3TEXT = NewUnionNullString()

		r.B3TEXT = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ELTEXT"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ELTEXT); err != nil {
			return err
		}
	} else {
		r.ELTEXT = NewUnionNullString()

		r.ELTEXT = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FeederLV"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FeederLV); err != nil {
			return err
		}
	} else {
		r.FeederLV = NewUnionNullString()

		r.FeederLV = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Feedername"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Feedername); err != nil {
			return err
		}
	} else {
		r.Feedername = NewUnionNullString()

		r.Feedername = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Names"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Names); err != nil {
			return err
		}
	} else {
		r.Names = NewUnionNullArrayUnionNullEquipmentNamesDto()

		r.Names = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["VoltageLevelNum"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.VoltageLevelNum); err != nil {
			return err
		}
	} else {
		r.VoltageLevelNum = NewUnionNullString()

		r.VoltageLevelNum = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["mRID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MRID); err != nil {
			return err
		}
	} else {
		r.MRID = NewUnionNullString()

		r.MRID = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		r.Type = NewUnionNullString()

		r.Type = nil
	}
	return nil
}
