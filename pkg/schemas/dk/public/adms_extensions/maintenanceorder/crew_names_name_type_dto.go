// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100487_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CrewNamesNameTypeDto struct {
	NameTypeAuthority *UnionNullCrewNamesNameTypeNameTypeAuthorityDto `json:"NameTypeAuthority"`

	Description *UnionNullString `json:"description"`

	Name *UnionNullString `json:"name"`
}

const CrewNamesNameTypeDtoAvroCRC64Fingerprint = "\x9a\x7f\r\x95\xea\t\xcbd"

func NewCrewNamesNameTypeDto() CrewNamesNameTypeDto {
	r := CrewNamesNameTypeDto{}
	r.NameTypeAuthority = nil
	r.Description = nil
	r.Name = nil
	return r
}

func DeserializeCrewNamesNameTypeDto(r io.Reader) (CrewNamesNameTypeDto, error) {
	t := NewCrewNamesNameTypeDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCrewNamesNameTypeDtoFromSchema(r io.Reader, schema string) (CrewNamesNameTypeDto, error) {
	t := NewCrewNamesNameTypeDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCrewNamesNameTypeDto(r CrewNamesNameTypeDto, w io.Writer) error {
	var err error
	err = writeUnionNullCrewNamesNameTypeNameTypeAuthorityDto(r.NameTypeAuthority, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	return err
}

func (r CrewNamesNameTypeDto) Serialize(w io.Writer) error {
	return writeCrewNamesNameTypeDto(r, w)
}

func (r CrewNamesNameTypeDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"NameTypeAuthority\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]}],\"name\":\"CrewNamesNameTypeNameTypeAuthorityDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.CrewNamesNameTypeDto\",\"type\":\"record\"}"
}

func (r CrewNamesNameTypeDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.CrewNamesNameTypeDto"
}

func (_ CrewNamesNameTypeDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CrewNamesNameTypeDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CrewNamesNameTypeDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CrewNamesNameTypeDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CrewNamesNameTypeDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CrewNamesNameTypeDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CrewNamesNameTypeDto) SetString(v string)   { panic("Unsupported operation") }
func (_ CrewNamesNameTypeDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CrewNamesNameTypeDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.NameTypeAuthority = NewUnionNullCrewNamesNameTypeNameTypeAuthorityDto()

		return r.NameTypeAuthority
	case 1:
		r.Description = NewUnionNullString()

		return r.Description
	case 2:
		r.Name = NewUnionNullString()

		return r.Name
	}
	panic("Unknown field index")
}

func (r *CrewNamesNameTypeDto) SetDefault(i int) {
	switch i {
	case 0:
		r.NameTypeAuthority = nil
		return
	case 1:
		r.Description = nil
		return
	case 2:
		r.Name = nil
		return
	}
	panic("Unknown field index")
}

func (r *CrewNamesNameTypeDto) NullField(i int) {
	switch i {
	case 0:
		r.NameTypeAuthority = nil
		return
	case 1:
		r.Description = nil
		return
	case 2:
		r.Name = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CrewNamesNameTypeDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CrewNamesNameTypeDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CrewNamesNameTypeDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ CrewNamesNameTypeDto) Finalize()                        {}

func (_ CrewNamesNameTypeDto) AvroCRC64Fingerprint() []byte {
	return []byte(CrewNamesNameTypeDtoAvroCRC64Fingerprint)
}

func (r CrewNamesNameTypeDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NameTypeAuthority"], err = json.Marshal(r.NameTypeAuthority)
	if err != nil {
		return nil, err
	}
	output["description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CrewNamesNameTypeDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NameTypeAuthority"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NameTypeAuthority); err != nil {
			return err
		}
	} else {
		r.NameTypeAuthority = NewUnionNullCrewNamesNameTypeNameTypeAuthorityDto()

		r.NameTypeAuthority = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	return nil
}
