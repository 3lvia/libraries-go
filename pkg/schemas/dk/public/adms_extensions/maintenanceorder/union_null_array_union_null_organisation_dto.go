// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100487_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayUnionNullOrganisationDtoTypeEnum int

const (
	UnionNullArrayUnionNullOrganisationDtoTypeEnumArrayUnionNullOrganisationDto UnionNullArrayUnionNullOrganisationDtoTypeEnum = 1
)

type UnionNullArrayUnionNullOrganisationDto struct {
	Null                          *types.NullVal
	ArrayUnionNullOrganisationDto []*UnionNullOrganisationDto
	UnionType                     UnionNullArrayUnionNullOrganisationDtoTypeEnum
}

func writeUnionNullArrayUnionNullOrganisationDto(r *UnionNullArrayUnionNullOrganisationDto, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayUnionNullOrganisationDtoTypeEnumArrayUnionNullOrganisationDto:
		return writeArrayUnionNullOrganisationDto(r.ArrayUnionNullOrganisationDto, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullOrganisationDto")
}

func NewUnionNullArrayUnionNullOrganisationDto() *UnionNullArrayUnionNullOrganisationDto {
	return &UnionNullArrayUnionNullOrganisationDto{}
}

func (r *UnionNullArrayUnionNullOrganisationDto) Serialize(w io.Writer) error {
	return writeUnionNullArrayUnionNullOrganisationDto(r, w)
}

func DeserializeUnionNullArrayUnionNullOrganisationDto(r io.Reader) (*UnionNullArrayUnionNullOrganisationDto, error) {
	t := NewUnionNullArrayUnionNullOrganisationDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayUnionNullOrganisationDtoFromSchema(r io.Reader, schema string) (*UnionNullArrayUnionNullOrganisationDto, error) {
	t := NewUnionNullArrayUnionNullOrganisationDto()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayUnionNullOrganisationDto) Schema() string {
	return "[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"OrganisationDto\",\"type\":\"record\"}],\"type\":\"array\"}]"
}

func (_ *UnionNullArrayUnionNullOrganisationDto) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullOrganisationDto) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullOrganisationDto) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullOrganisationDto) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullOrganisationDto) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullOrganisationDto) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullArrayUnionNullOrganisationDto) SetLong(v int64) {

	r.UnionType = (UnionNullArrayUnionNullOrganisationDtoTypeEnum)(v)
}

func (r *UnionNullArrayUnionNullOrganisationDto) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayUnionNullOrganisationDto = make([]*UnionNullOrganisationDto, 0)
		return &ArrayUnionNullOrganisationDtoWrapper{Target: (&r.ArrayUnionNullOrganisationDto)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayUnionNullOrganisationDto) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullOrganisationDto) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullOrganisationDto) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullOrganisationDto) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullOrganisationDto) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullOrganisationDto) Finalize() {}

func (r *UnionNullArrayUnionNullOrganisationDto) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayUnionNullOrganisationDtoTypeEnumArrayUnionNullOrganisationDto:
		return json.Marshal(map[string]interface{}{"array": r.ArrayUnionNullOrganisationDto})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayUnionNullOrganisationDto")
}

func (r *UnionNullArrayUnionNullOrganisationDto) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayUnionNullOrganisationDto)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullOrganisationDto")
}
