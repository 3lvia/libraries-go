// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100487_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type WorkTimeScheduleScheduleIntervalDto struct {
	End *UnionNullString `json:"end"`

	EndSpecified *UnionNullBool `json:"endSpecified"`

	Start *UnionNullString `json:"start"`

	StartSpecified *UnionNullBool `json:"startSpecified"`
}

const WorkTimeScheduleScheduleIntervalDtoAvroCRC64Fingerprint = "Ì•DiO\x04\xb7x"

func NewWorkTimeScheduleScheduleIntervalDto() WorkTimeScheduleScheduleIntervalDto {
	r := WorkTimeScheduleScheduleIntervalDto{}
	r.End = nil
	r.EndSpecified = nil
	r.Start = nil
	r.StartSpecified = nil
	return r
}

func DeserializeWorkTimeScheduleScheduleIntervalDto(r io.Reader) (WorkTimeScheduleScheduleIntervalDto, error) {
	t := NewWorkTimeScheduleScheduleIntervalDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeWorkTimeScheduleScheduleIntervalDtoFromSchema(r io.Reader, schema string) (WorkTimeScheduleScheduleIntervalDto, error) {
	t := NewWorkTimeScheduleScheduleIntervalDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeWorkTimeScheduleScheduleIntervalDto(r WorkTimeScheduleScheduleIntervalDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.End, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.EndSpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Start, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.StartSpecified, w)
	if err != nil {
		return err
	}
	return err
}

func (r WorkTimeScheduleScheduleIntervalDto) Serialize(w io.Writer) error {
	return writeWorkTimeScheduleScheduleIntervalDto(r, w)
}

func (r WorkTimeScheduleScheduleIntervalDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"end\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"endSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"start\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"startSpecified\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.WorkTimeScheduleScheduleIntervalDto\",\"type\":\"record\"}"
}

func (r WorkTimeScheduleScheduleIntervalDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.WorkTimeScheduleScheduleIntervalDto"
}

func (_ WorkTimeScheduleScheduleIntervalDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ WorkTimeScheduleScheduleIntervalDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ WorkTimeScheduleScheduleIntervalDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ WorkTimeScheduleScheduleIntervalDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ WorkTimeScheduleScheduleIntervalDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ WorkTimeScheduleScheduleIntervalDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ WorkTimeScheduleScheduleIntervalDto) SetString(v string)   { panic("Unsupported operation") }
func (_ WorkTimeScheduleScheduleIntervalDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *WorkTimeScheduleScheduleIntervalDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.End = NewUnionNullString()

		return r.End
	case 1:
		r.EndSpecified = NewUnionNullBool()

		return r.EndSpecified
	case 2:
		r.Start = NewUnionNullString()

		return r.Start
	case 3:
		r.StartSpecified = NewUnionNullBool()

		return r.StartSpecified
	}
	panic("Unknown field index")
}

func (r *WorkTimeScheduleScheduleIntervalDto) SetDefault(i int) {
	switch i {
	case 0:
		r.End = nil
		return
	case 1:
		r.EndSpecified = nil
		return
	case 2:
		r.Start = nil
		return
	case 3:
		r.StartSpecified = nil
		return
	}
	panic("Unknown field index")
}

func (r *WorkTimeScheduleScheduleIntervalDto) NullField(i int) {
	switch i {
	case 0:
		r.End = nil
		return
	case 1:
		r.EndSpecified = nil
		return
	case 2:
		r.Start = nil
		return
	case 3:
		r.StartSpecified = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ WorkTimeScheduleScheduleIntervalDto) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ WorkTimeScheduleScheduleIntervalDto) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ WorkTimeScheduleScheduleIntervalDto) HintSize(int) { panic("Unsupported operation") }
func (_ WorkTimeScheduleScheduleIntervalDto) Finalize()    {}

func (_ WorkTimeScheduleScheduleIntervalDto) AvroCRC64Fingerprint() []byte {
	return []byte(WorkTimeScheduleScheduleIntervalDtoAvroCRC64Fingerprint)
}

func (r WorkTimeScheduleScheduleIntervalDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["end"], err = json.Marshal(r.End)
	if err != nil {
		return nil, err
	}
	output["endSpecified"], err = json.Marshal(r.EndSpecified)
	if err != nil {
		return nil, err
	}
	output["start"], err = json.Marshal(r.Start)
	if err != nil {
		return nil, err
	}
	output["startSpecified"], err = json.Marshal(r.StartSpecified)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *WorkTimeScheduleScheduleIntervalDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["end"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.End); err != nil {
			return err
		}
	} else {
		r.End = NewUnionNullString()

		r.End = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["endSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndSpecified); err != nil {
			return err
		}
	} else {
		r.EndSpecified = NewUnionNullBool()

		r.EndSpecified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["start"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Start); err != nil {
			return err
		}
	} else {
		r.Start = NewUnionNullString()

		r.Start = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["startSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartSpecified); err != nil {
			return err
		}
	} else {
		r.StartSpecified = NewUnionNullBool()

		r.StartSpecified = nil
	}
	return nil
}
