// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100487_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CrewNamesDto struct {
	NameType *UnionNullCrewNamesNameTypeDto `json:"NameType"`

	Name *UnionNullString `json:"name"`
}

const CrewNamesDtoAvroCRC64Fingerprint = "\x7f\x81AÙ rh\xc0"

func NewCrewNamesDto() CrewNamesDto {
	r := CrewNamesDto{}
	r.NameType = nil
	r.Name = nil
	return r
}

func DeserializeCrewNamesDto(r io.Reader) (CrewNamesDto, error) {
	t := NewCrewNamesDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCrewNamesDtoFromSchema(r io.Reader, schema string) (CrewNamesDto, error) {
	t := NewCrewNamesDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCrewNamesDto(r CrewNamesDto, w io.Writer) error {
	var err error
	err = writeUnionNullCrewNamesNameTypeDto(r.NameType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	return err
}

func (r CrewNamesDto) Serialize(w io.Writer) error {
	return writeCrewNamesDto(r, w)
}

func (r CrewNamesDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"NameType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"NameTypeAuthority\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]}],\"name\":\"CrewNamesNameTypeNameTypeAuthorityDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]}],\"name\":\"CrewNamesNameTypeDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.CrewNamesDto\",\"type\":\"record\"}"
}

func (r CrewNamesDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.CrewNamesDto"
}

func (_ CrewNamesDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CrewNamesDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CrewNamesDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CrewNamesDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CrewNamesDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CrewNamesDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CrewNamesDto) SetString(v string)   { panic("Unsupported operation") }
func (_ CrewNamesDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CrewNamesDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.NameType = NewUnionNullCrewNamesNameTypeDto()

		return r.NameType
	case 1:
		r.Name = NewUnionNullString()

		return r.Name
	}
	panic("Unknown field index")
}

func (r *CrewNamesDto) SetDefault(i int) {
	switch i {
	case 0:
		r.NameType = nil
		return
	case 1:
		r.Name = nil
		return
	}
	panic("Unknown field index")
}

func (r *CrewNamesDto) NullField(i int) {
	switch i {
	case 0:
		r.NameType = nil
		return
	case 1:
		r.Name = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CrewNamesDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CrewNamesDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CrewNamesDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ CrewNamesDto) Finalize()                        {}

func (_ CrewNamesDto) AvroCRC64Fingerprint() []byte {
	return []byte(CrewNamesDtoAvroCRC64Fingerprint)
}

func (r CrewNamesDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["NameType"], err = json.Marshal(r.NameType)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CrewNamesDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["NameType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NameType); err != nil {
			return err
		}
	} else {
		r.NameType = NewUnionNullCrewNamesNameTypeDto()

		r.NameType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	return nil
}
