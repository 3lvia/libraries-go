// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100487_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type WorkAssetDto struct {
	Location *UnionNullWorkLocationDto `json:"Location"`

	Names *UnionNullArrayUnionNullAssetNamesDto `json:"Names"`

	Critical *UnionNullBool `json:"critical"`

	LastModifiedDateTime *UnionNullString `json:"lastModifiedDateTime"`

	LastModifiedDateTimeSpecified *UnionNullBool `json:"lastModifiedDateTimeSpecified"`

	MRID *UnionNullString `json:"mRID"`

	Status *UnionNullStatusDto `json:"status"`

	Type *UnionNullString `json:"type"`

	UsageKind *UnionNullString `json:"usageKind"`

	UtcNumber *UnionNullString `json:"utcNumber"`
}

const WorkAssetDtoAvroCRC64Fingerprint = "\xb7w\xded[\x13\xf6\x86"

func NewWorkAssetDto() WorkAssetDto {
	r := WorkAssetDto{}
	r.Location = nil
	r.Names = nil
	r.Critical = nil
	r.LastModifiedDateTime = nil
	r.LastModifiedDateTimeSpecified = nil
	r.MRID = nil
	r.Status = nil
	r.Type = nil
	r.UsageKind = nil
	r.UtcNumber = nil
	return r
}

func DeserializeWorkAssetDto(r io.Reader) (WorkAssetDto, error) {
	t := NewWorkAssetDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeWorkAssetDtoFromSchema(r io.Reader, schema string) (WorkAssetDto, error) {
	t := NewWorkAssetDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeWorkAssetDto(r WorkAssetDto, w io.Writer) error {
	var err error
	err = writeUnionNullWorkLocationDto(r.Location, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullAssetNamesDto(r.Names, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.Critical, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LastModifiedDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.LastModifiedDateTimeSpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MRID, w)
	if err != nil {
		return err
	}
	err = writeUnionNullStatusDto(r.Status, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Type, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UsageKind, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UtcNumber, w)
	if err != nil {
		return err
	}
	return err
}

func (r WorkAssetDto) Serialize(w io.Writer) error {
	return writeWorkAssetDto(r, w)
}

func (r WorkAssetDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Location\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CoordinateSystem\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"crsUrn\",\"type\":[\"null\",\"string\"]}],\"name\":\"WorkLocationCoordinateSystemDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"PositionPoints\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"sequenceNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"xPosition\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"yPosition\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"zPosition\",\"type\":[\"null\",\"string\"]}],\"name\":\"WorkLocationPositionPointsDto\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"WorkLocationDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Names\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]}],\"name\":\"AssetNamesDto\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"critical\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"lastModifiedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"lastModifiedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"status\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"dateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"value\",\"type\":[\"null\",\"string\"]}],\"name\":\"StatusDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"type\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"usageKind\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"utcNumber\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.WorkAssetDto\",\"type\":\"record\"}"
}

func (r WorkAssetDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.WorkAssetDto"
}

func (_ WorkAssetDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ WorkAssetDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ WorkAssetDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ WorkAssetDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ WorkAssetDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ WorkAssetDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ WorkAssetDto) SetString(v string)   { panic("Unsupported operation") }
func (_ WorkAssetDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *WorkAssetDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.Location = NewUnionNullWorkLocationDto()

		return r.Location
	case 1:
		r.Names = NewUnionNullArrayUnionNullAssetNamesDto()

		return r.Names
	case 2:
		r.Critical = NewUnionNullBool()

		return r.Critical
	case 3:
		r.LastModifiedDateTime = NewUnionNullString()

		return r.LastModifiedDateTime
	case 4:
		r.LastModifiedDateTimeSpecified = NewUnionNullBool()

		return r.LastModifiedDateTimeSpecified
	case 5:
		r.MRID = NewUnionNullString()

		return r.MRID
	case 6:
		r.Status = NewUnionNullStatusDto()

		return r.Status
	case 7:
		r.Type = NewUnionNullString()

		return r.Type
	case 8:
		r.UsageKind = NewUnionNullString()

		return r.UsageKind
	case 9:
		r.UtcNumber = NewUnionNullString()

		return r.UtcNumber
	}
	panic("Unknown field index")
}

func (r *WorkAssetDto) SetDefault(i int) {
	switch i {
	case 0:
		r.Location = nil
		return
	case 1:
		r.Names = nil
		return
	case 2:
		r.Critical = nil
		return
	case 3:
		r.LastModifiedDateTime = nil
		return
	case 4:
		r.LastModifiedDateTimeSpecified = nil
		return
	case 5:
		r.MRID = nil
		return
	case 6:
		r.Status = nil
		return
	case 7:
		r.Type = nil
		return
	case 8:
		r.UsageKind = nil
		return
	case 9:
		r.UtcNumber = nil
		return
	}
	panic("Unknown field index")
}

func (r *WorkAssetDto) NullField(i int) {
	switch i {
	case 0:
		r.Location = nil
		return
	case 1:
		r.Names = nil
		return
	case 2:
		r.Critical = nil
		return
	case 3:
		r.LastModifiedDateTime = nil
		return
	case 4:
		r.LastModifiedDateTimeSpecified = nil
		return
	case 5:
		r.MRID = nil
		return
	case 6:
		r.Status = nil
		return
	case 7:
		r.Type = nil
		return
	case 8:
		r.UsageKind = nil
		return
	case 9:
		r.UtcNumber = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ WorkAssetDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ WorkAssetDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ WorkAssetDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ WorkAssetDto) Finalize()                        {}

func (_ WorkAssetDto) AvroCRC64Fingerprint() []byte {
	return []byte(WorkAssetDtoAvroCRC64Fingerprint)
}

func (r WorkAssetDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Location"], err = json.Marshal(r.Location)
	if err != nil {
		return nil, err
	}
	output["Names"], err = json.Marshal(r.Names)
	if err != nil {
		return nil, err
	}
	output["critical"], err = json.Marshal(r.Critical)
	if err != nil {
		return nil, err
	}
	output["lastModifiedDateTime"], err = json.Marshal(r.LastModifiedDateTime)
	if err != nil {
		return nil, err
	}
	output["lastModifiedDateTimeSpecified"], err = json.Marshal(r.LastModifiedDateTimeSpecified)
	if err != nil {
		return nil, err
	}
	output["mRID"], err = json.Marshal(r.MRID)
	if err != nil {
		return nil, err
	}
	output["status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	output["usageKind"], err = json.Marshal(r.UsageKind)
	if err != nil {
		return nil, err
	}
	output["utcNumber"], err = json.Marshal(r.UtcNumber)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *WorkAssetDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Location"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Location); err != nil {
			return err
		}
	} else {
		r.Location = NewUnionNullWorkLocationDto()

		r.Location = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Names"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Names); err != nil {
			return err
		}
	} else {
		r.Names = NewUnionNullArrayUnionNullAssetNamesDto()

		r.Names = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["critical"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Critical); err != nil {
			return err
		}
	} else {
		r.Critical = NewUnionNullBool()

		r.Critical = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["lastModifiedDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModifiedDateTime); err != nil {
			return err
		}
	} else {
		r.LastModifiedDateTime = NewUnionNullString()

		r.LastModifiedDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["lastModifiedDateTimeSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModifiedDateTimeSpecified); err != nil {
			return err
		}
	} else {
		r.LastModifiedDateTimeSpecified = NewUnionNullBool()

		r.LastModifiedDateTimeSpecified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["mRID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MRID); err != nil {
			return err
		}
	} else {
		r.MRID = NewUnionNullString()

		r.MRID = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		r.Status = NewUnionNullStatusDto()

		r.Status = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		r.Type = NewUnionNullString()

		r.Type = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["usageKind"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UsageKind); err != nil {
			return err
		}
	} else {
		r.UsageKind = NewUnionNullString()

		r.UsageKind = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["utcNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UtcNumber); err != nil {
			return err
		}
	} else {
		r.UtcNumber = NewUnionNullString()

		r.UtcNumber = nil
	}
	return nil
}
