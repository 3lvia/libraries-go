// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100487_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CrewMemberPersonDto struct {
	ElectronicAddress *UnionNullElectronicAddressDto `json:"electronicAddress"`

	EmployeeId *UnionNullString `json:"employeeId"`

	FirstName *UnionNullString `json:"firstName"`

	LastModifiedDateTime *UnionNullString `json:"lastModifiedDateTime"`

	LastModifiedDateTimeSpecified *UnionNullBool `json:"lastModifiedDateTimeSpecified"`

	LastName *UnionNullString `json:"lastName"`

	MRID *UnionNullString `json:"mRID"`

	MobilePhone *UnionNullTelephoneNumberDto `json:"mobilePhone"`

	Prefix *UnionNullString `json:"prefix"`
}

const CrewMemberPersonDtoAvroCRC64Fingerprint = "I\xe1(\x11\xfb\x12G`"

func NewCrewMemberPersonDto() CrewMemberPersonDto {
	r := CrewMemberPersonDto{}
	r.ElectronicAddress = nil
	r.EmployeeId = nil
	r.FirstName = nil
	r.LastModifiedDateTime = nil
	r.LastModifiedDateTimeSpecified = nil
	r.LastName = nil
	r.MRID = nil
	r.MobilePhone = nil
	r.Prefix = nil
	return r
}

func DeserializeCrewMemberPersonDto(r io.Reader) (CrewMemberPersonDto, error) {
	t := NewCrewMemberPersonDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCrewMemberPersonDtoFromSchema(r io.Reader, schema string) (CrewMemberPersonDto, error) {
	t := NewCrewMemberPersonDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCrewMemberPersonDto(r CrewMemberPersonDto, w io.Writer) error {
	var err error
	err = writeUnionNullElectronicAddressDto(r.ElectronicAddress, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EmployeeId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FirstName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LastModifiedDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.LastModifiedDateTimeSpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LastName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MRID, w)
	if err != nil {
		return err
	}
	err = writeUnionNullTelephoneNumberDto(r.MobilePhone, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Prefix, w)
	if err != nil {
		return err
	}
	return err
}

func (r CrewMemberPersonDto) Serialize(w io.Writer) error {
	return writeCrewMemberPersonDto(r, w)
}

func (r CrewMemberPersonDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"electronicAddress\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"email1\",\"type\":[\"null\",\"string\"]}],\"name\":\"ElectronicAddressDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"employeeId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"firstName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"lastModifiedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"lastModifiedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"lastName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"mRID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"mobilePhone\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"localNumber\",\"type\":[\"null\",\"string\"]}],\"name\":\"TelephoneNumberDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"prefix\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.CrewMemberPersonDto\",\"type\":\"record\"}"
}

func (r CrewMemberPersonDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.CrewMemberPersonDto"
}

func (_ CrewMemberPersonDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CrewMemberPersonDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CrewMemberPersonDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CrewMemberPersonDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CrewMemberPersonDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CrewMemberPersonDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CrewMemberPersonDto) SetString(v string)   { panic("Unsupported operation") }
func (_ CrewMemberPersonDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CrewMemberPersonDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.ElectronicAddress = NewUnionNullElectronicAddressDto()

		return r.ElectronicAddress
	case 1:
		r.EmployeeId = NewUnionNullString()

		return r.EmployeeId
	case 2:
		r.FirstName = NewUnionNullString()

		return r.FirstName
	case 3:
		r.LastModifiedDateTime = NewUnionNullString()

		return r.LastModifiedDateTime
	case 4:
		r.LastModifiedDateTimeSpecified = NewUnionNullBool()

		return r.LastModifiedDateTimeSpecified
	case 5:
		r.LastName = NewUnionNullString()

		return r.LastName
	case 6:
		r.MRID = NewUnionNullString()

		return r.MRID
	case 7:
		r.MobilePhone = NewUnionNullTelephoneNumberDto()

		return r.MobilePhone
	case 8:
		r.Prefix = NewUnionNullString()

		return r.Prefix
	}
	panic("Unknown field index")
}

func (r *CrewMemberPersonDto) SetDefault(i int) {
	switch i {
	case 0:
		r.ElectronicAddress = nil
		return
	case 1:
		r.EmployeeId = nil
		return
	case 2:
		r.FirstName = nil
		return
	case 3:
		r.LastModifiedDateTime = nil
		return
	case 4:
		r.LastModifiedDateTimeSpecified = nil
		return
	case 5:
		r.LastName = nil
		return
	case 6:
		r.MRID = nil
		return
	case 7:
		r.MobilePhone = nil
		return
	case 8:
		r.Prefix = nil
		return
	}
	panic("Unknown field index")
}

func (r *CrewMemberPersonDto) NullField(i int) {
	switch i {
	case 0:
		r.ElectronicAddress = nil
		return
	case 1:
		r.EmployeeId = nil
		return
	case 2:
		r.FirstName = nil
		return
	case 3:
		r.LastModifiedDateTime = nil
		return
	case 4:
		r.LastModifiedDateTimeSpecified = nil
		return
	case 5:
		r.LastName = nil
		return
	case 6:
		r.MRID = nil
		return
	case 7:
		r.MobilePhone = nil
		return
	case 8:
		r.Prefix = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CrewMemberPersonDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CrewMemberPersonDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CrewMemberPersonDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ CrewMemberPersonDto) Finalize()                        {}

func (_ CrewMemberPersonDto) AvroCRC64Fingerprint() []byte {
	return []byte(CrewMemberPersonDtoAvroCRC64Fingerprint)
}

func (r CrewMemberPersonDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["electronicAddress"], err = json.Marshal(r.ElectronicAddress)
	if err != nil {
		return nil, err
	}
	output["employeeId"], err = json.Marshal(r.EmployeeId)
	if err != nil {
		return nil, err
	}
	output["firstName"], err = json.Marshal(r.FirstName)
	if err != nil {
		return nil, err
	}
	output["lastModifiedDateTime"], err = json.Marshal(r.LastModifiedDateTime)
	if err != nil {
		return nil, err
	}
	output["lastModifiedDateTimeSpecified"], err = json.Marshal(r.LastModifiedDateTimeSpecified)
	if err != nil {
		return nil, err
	}
	output["lastName"], err = json.Marshal(r.LastName)
	if err != nil {
		return nil, err
	}
	output["mRID"], err = json.Marshal(r.MRID)
	if err != nil {
		return nil, err
	}
	output["mobilePhone"], err = json.Marshal(r.MobilePhone)
	if err != nil {
		return nil, err
	}
	output["prefix"], err = json.Marshal(r.Prefix)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CrewMemberPersonDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["electronicAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ElectronicAddress); err != nil {
			return err
		}
	} else {
		r.ElectronicAddress = NewUnionNullElectronicAddressDto()

		r.ElectronicAddress = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["employeeId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EmployeeId); err != nil {
			return err
		}
	} else {
		r.EmployeeId = NewUnionNullString()

		r.EmployeeId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["firstName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FirstName); err != nil {
			return err
		}
	} else {
		r.FirstName = NewUnionNullString()

		r.FirstName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["lastModifiedDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModifiedDateTime); err != nil {
			return err
		}
	} else {
		r.LastModifiedDateTime = NewUnionNullString()

		r.LastModifiedDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["lastModifiedDateTimeSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModifiedDateTimeSpecified); err != nil {
			return err
		}
	} else {
		r.LastModifiedDateTimeSpecified = NewUnionNullBool()

		r.LastModifiedDateTimeSpecified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["lastName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastName); err != nil {
			return err
		}
	} else {
		r.LastName = NewUnionNullString()

		r.LastName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["mRID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MRID); err != nil {
			return err
		}
	} else {
		r.MRID = NewUnionNullString()

		r.MRID = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["mobilePhone"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MobilePhone); err != nil {
			return err
		}
	} else {
		r.MobilePhone = NewUnionNullTelephoneNumberDto()

		r.MobilePhone = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["prefix"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Prefix); err != nil {
			return err
		}
	} else {
		r.Prefix = NewUnionNullString()

		r.Prefix = nil
	}
	return nil
}
