// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100375_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NotificationDataDto struct {
	CancelMessage *UnionNullString `json:"CancelMessage"`

	NotificationID *UnionNullString `json:"NotificationID"`

	NotificationType *UnionNullString `json:"NotificationType"`
}

const NotificationDataDtoAvroCRC64Fingerprint = "\x988\xe0\xfd\xfe\x8d\x18\x97"

func NewNotificationDataDto() NotificationDataDto {
	r := NotificationDataDto{}
	r.CancelMessage = nil
	r.NotificationID = nil
	r.NotificationType = nil
	return r
}

func DeserializeNotificationDataDto(r io.Reader) (NotificationDataDto, error) {
	t := NewNotificationDataDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNotificationDataDtoFromSchema(r io.Reader, schema string) (NotificationDataDto, error) {
	t := NewNotificationDataDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNotificationDataDto(r NotificationDataDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CancelMessage, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NotificationID, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NotificationType, w)
	if err != nil {
		return err
	}
	return err
}

func (r NotificationDataDto) Serialize(w io.Writer) error {
	return writeNotificationDataDto(r, w)
}

func (r NotificationDataDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CancelMessage\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NotificationID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NotificationType\",\"type\":[\"null\",\"string\"]}],\"name\":\"CustomerNotificationSafConsumer.NotificationDataDto\",\"type\":\"record\"}"
}

func (r NotificationDataDto) SchemaName() string {
	return "CustomerNotificationSafConsumer.NotificationDataDto"
}

func (_ NotificationDataDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NotificationDataDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NotificationDataDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NotificationDataDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NotificationDataDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NotificationDataDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NotificationDataDto) SetString(v string)   { panic("Unsupported operation") }
func (_ NotificationDataDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NotificationDataDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.CancelMessage = NewUnionNullString()

		return r.CancelMessage
	case 1:
		r.NotificationID = NewUnionNullString()

		return r.NotificationID
	case 2:
		r.NotificationType = NewUnionNullString()

		return r.NotificationType
	}
	panic("Unknown field index")
}

func (r *NotificationDataDto) SetDefault(i int) {
	switch i {
	case 0:
		r.CancelMessage = nil
		return
	case 1:
		r.NotificationID = nil
		return
	case 2:
		r.NotificationType = nil
		return
	}
	panic("Unknown field index")
}

func (r *NotificationDataDto) NullField(i int) {
	switch i {
	case 0:
		r.CancelMessage = nil
		return
	case 1:
		r.NotificationID = nil
		return
	case 2:
		r.NotificationType = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ NotificationDataDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NotificationDataDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NotificationDataDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ NotificationDataDto) Finalize()                        {}

func (_ NotificationDataDto) AvroCRC64Fingerprint() []byte {
	return []byte(NotificationDataDtoAvroCRC64Fingerprint)
}

func (r NotificationDataDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CancelMessage"], err = json.Marshal(r.CancelMessage)
	if err != nil {
		return nil, err
	}
	output["NotificationID"], err = json.Marshal(r.NotificationID)
	if err != nil {
		return nil, err
	}
	output["NotificationType"], err = json.Marshal(r.NotificationType)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NotificationDataDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CancelMessage"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CancelMessage); err != nil {
			return err
		}
	} else {
		r.CancelMessage = NewUnionNullString()

		r.CancelMessage = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NotificationID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NotificationID); err != nil {
			return err
		}
	} else {
		r.NotificationID = NewUnionNullString()

		r.NotificationID = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NotificationType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NotificationType); err != nil {
			return err
		}
	} else {
		r.NotificationType = NewUnionNullString()

		r.NotificationType = nil
	}
	return nil
}
