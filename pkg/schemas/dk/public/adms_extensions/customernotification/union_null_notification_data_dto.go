// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100375_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullNotificationDataDtoTypeEnum int

const (
	UnionNullNotificationDataDtoTypeEnumNotificationDataDto UnionNullNotificationDataDtoTypeEnum = 1
)

type UnionNullNotificationDataDto struct {
	Null                *types.NullVal
	NotificationDataDto NotificationDataDto
	UnionType           UnionNullNotificationDataDtoTypeEnum
}

func writeUnionNullNotificationDataDto(r *UnionNullNotificationDataDto, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullNotificationDataDtoTypeEnumNotificationDataDto:
		return writeNotificationDataDto(r.NotificationDataDto, w)
	}
	return fmt.Errorf("invalid value for *UnionNullNotificationDataDto")
}

func NewUnionNullNotificationDataDto() *UnionNullNotificationDataDto {
	return &UnionNullNotificationDataDto{}
}

func (r *UnionNullNotificationDataDto) Serialize(w io.Writer) error {
	return writeUnionNullNotificationDataDto(r, w)
}

func DeserializeUnionNullNotificationDataDto(r io.Reader) (*UnionNullNotificationDataDto, error) {
	t := NewUnionNullNotificationDataDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullNotificationDataDtoFromSchema(r io.Reader, schema string) (*UnionNullNotificationDataDto, error) {
	t := NewUnionNullNotificationDataDto()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullNotificationDataDto) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CancelMessage\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NotificationID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NotificationType\",\"type\":[\"null\",\"string\"]}],\"name\":\"NotificationDataDto\",\"type\":\"record\"}]"
}

func (_ *UnionNullNotificationDataDto) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullNotificationDataDto) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullNotificationDataDto) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullNotificationDataDto) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullNotificationDataDto) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullNotificationDataDto) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullNotificationDataDto) SetLong(v int64) {

	r.UnionType = (UnionNullNotificationDataDtoTypeEnum)(v)
}

func (r *UnionNullNotificationDataDto) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.NotificationDataDto = NewNotificationDataDto()
		return &types.Record{Target: (&r.NotificationDataDto)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullNotificationDataDto) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullNotificationDataDto) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullNotificationDataDto) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullNotificationDataDto) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullNotificationDataDto) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullNotificationDataDto) Finalize()                {}

func (r *UnionNullNotificationDataDto) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullNotificationDataDtoTypeEnumNotificationDataDto:
		return json.Marshal(map[string]interface{}{"CustomerNotificationSafConsumer.NotificationDataDto": r.NotificationDataDto})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullNotificationDataDto")
}

func (r *UnionNullNotificationDataDto) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["CustomerNotificationSafConsumer.NotificationDataDto"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.NotificationDataDto)
	}
	return fmt.Errorf("invalid value for *UnionNullNotificationDataDto")
}
