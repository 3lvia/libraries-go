// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100375_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TechnicalAssetDto struct {
	B1 *UnionNullString `json:"B1"`

	B2 *UnionNullString `json:"B2"`

	B3 *UnionNullString `json:"B3"`
}

const TechnicalAssetDtoAvroCRC64Fingerprint = "j&\"\x19Ì¦$\xee"

func NewTechnicalAssetDto() TechnicalAssetDto {
	r := TechnicalAssetDto{}
	r.B1 = nil
	r.B2 = nil
	r.B3 = nil
	return r
}

func DeserializeTechnicalAssetDto(r io.Reader) (TechnicalAssetDto, error) {
	t := NewTechnicalAssetDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTechnicalAssetDtoFromSchema(r io.Reader, schema string) (TechnicalAssetDto, error) {
	t := NewTechnicalAssetDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTechnicalAssetDto(r TechnicalAssetDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.B1, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.B2, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.B3, w)
	if err != nil {
		return err
	}
	return err
}

func (r TechnicalAssetDto) Serialize(w io.Writer) error {
	return writeTechnicalAssetDto(r, w)
}

func (r TechnicalAssetDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"B1\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B2\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B3\",\"type\":[\"null\",\"string\"]}],\"name\":\"CustomerNotificationSafConsumer.TechnicalAssetDto\",\"type\":\"record\"}"
}

func (r TechnicalAssetDto) SchemaName() string {
	return "CustomerNotificationSafConsumer.TechnicalAssetDto"
}

func (_ TechnicalAssetDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TechnicalAssetDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TechnicalAssetDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TechnicalAssetDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TechnicalAssetDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TechnicalAssetDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TechnicalAssetDto) SetString(v string)   { panic("Unsupported operation") }
func (_ TechnicalAssetDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TechnicalAssetDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.B1 = NewUnionNullString()

		return r.B1
	case 1:
		r.B2 = NewUnionNullString()

		return r.B2
	case 2:
		r.B3 = NewUnionNullString()

		return r.B3
	}
	panic("Unknown field index")
}

func (r *TechnicalAssetDto) SetDefault(i int) {
	switch i {
	case 0:
		r.B1 = nil
		return
	case 1:
		r.B2 = nil
		return
	case 2:
		r.B3 = nil
		return
	}
	panic("Unknown field index")
}

func (r *TechnicalAssetDto) NullField(i int) {
	switch i {
	case 0:
		r.B1 = nil
		return
	case 1:
		r.B2 = nil
		return
	case 2:
		r.B3 = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TechnicalAssetDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TechnicalAssetDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TechnicalAssetDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ TechnicalAssetDto) Finalize()                        {}

func (_ TechnicalAssetDto) AvroCRC64Fingerprint() []byte {
	return []byte(TechnicalAssetDtoAvroCRC64Fingerprint)
}

func (r TechnicalAssetDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["B1"], err = json.Marshal(r.B1)
	if err != nil {
		return nil, err
	}
	output["B2"], err = json.Marshal(r.B2)
	if err != nil {
		return nil, err
	}
	output["B3"], err = json.Marshal(r.B3)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TechnicalAssetDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["B1"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B1); err != nil {
			return err
		}
	} else {
		r.B1 = NewUnionNullString()

		r.B1 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["B2"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B2); err != nil {
			return err
		}
	} else {
		r.B2 = NewUnionNullString()

		r.B2 = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["B3"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B3); err != nil {
			return err
		}
	} else {
		r.B3 = NewUnionNullString()

		r.B3 = nil
	}
	return nil
}
