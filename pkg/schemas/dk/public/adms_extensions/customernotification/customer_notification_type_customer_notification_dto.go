// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100375_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CustomerNotificationTypeCustomerNotificationDto struct {
	MessageText *UnionNullString `json:"MessageText"`

	NotificationData *UnionNullNotificationDataDto `json:"NotificationData"`

	OutageEnd string `json:"OutageEnd"`

	OutageEndSpecified bool `json:"OutageEndSpecified"`

	OutageStart string `json:"OutageStart"`

	OutageStartSpecified bool `json:"OutageStartSpecified"`

	RecordNumber *UnionNullString `json:"RecordNumber"`

	TechnicalAsset *UnionNullArrayUnionNullTechnicalAssetDto `json:"TechnicalAsset"`
}

const CustomerNotificationTypeCustomerNotificationDtoAvroCRC64Fingerprint = "U^\xc7\x12G!\x8a\xc8"

func NewCustomerNotificationTypeCustomerNotificationDto() CustomerNotificationTypeCustomerNotificationDto {
	r := CustomerNotificationTypeCustomerNotificationDto{}
	r.MessageText = nil
	r.NotificationData = nil
	r.RecordNumber = nil
	r.TechnicalAsset = nil
	return r
}

func DeserializeCustomerNotificationTypeCustomerNotificationDto(r io.Reader) (CustomerNotificationTypeCustomerNotificationDto, error) {
	t := NewCustomerNotificationTypeCustomerNotificationDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCustomerNotificationTypeCustomerNotificationDtoFromSchema(r io.Reader, schema string) (CustomerNotificationTypeCustomerNotificationDto, error) {
	t := NewCustomerNotificationTypeCustomerNotificationDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCustomerNotificationTypeCustomerNotificationDto(r CustomerNotificationTypeCustomerNotificationDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.MessageText, w)
	if err != nil {
		return err
	}
	err = writeUnionNullNotificationDataDto(r.NotificationData, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OutageEnd, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.OutageEndSpecified, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OutageStart, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.OutageStartSpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RecordNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullTechnicalAssetDto(r.TechnicalAsset, w)
	if err != nil {
		return err
	}
	return err
}

func (r CustomerNotificationTypeCustomerNotificationDto) Serialize(w io.Writer) error {
	return writeCustomerNotificationTypeCustomerNotificationDto(r, w)
}

func (r CustomerNotificationTypeCustomerNotificationDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"MessageText\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NotificationData\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CancelMessage\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NotificationID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NotificationType\",\"type\":[\"null\",\"string\"]}],\"name\":\"NotificationDataDto\",\"type\":\"record\"}]},{\"name\":\"OutageEnd\",\"type\":\"string\"},{\"name\":\"OutageEndSpecified\",\"type\":\"boolean\"},{\"name\":\"OutageStart\",\"type\":\"string\"},{\"name\":\"OutageStartSpecified\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"RecordNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TechnicalAsset\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"B1\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B2\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B3\",\"type\":[\"null\",\"string\"]}],\"name\":\"TechnicalAssetDto\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"CustomerNotificationSafConsumer.CustomerNotificationTypeCustomerNotificationDto\",\"type\":\"record\"}"
}

func (r CustomerNotificationTypeCustomerNotificationDto) SchemaName() string {
	return "CustomerNotificationSafConsumer.CustomerNotificationTypeCustomerNotificationDto"
}

func (_ CustomerNotificationTypeCustomerNotificationDto) SetBoolean(v bool) {
	panic("Unsupported operation")
}
func (_ CustomerNotificationTypeCustomerNotificationDto) SetInt(v int32) {
	panic("Unsupported operation")
}
func (_ CustomerNotificationTypeCustomerNotificationDto) SetLong(v int64) {
	panic("Unsupported operation")
}
func (_ CustomerNotificationTypeCustomerNotificationDto) SetFloat(v float32) {
	panic("Unsupported operation")
}
func (_ CustomerNotificationTypeCustomerNotificationDto) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ CustomerNotificationTypeCustomerNotificationDto) SetBytes(v []byte) {
	panic("Unsupported operation")
}
func (_ CustomerNotificationTypeCustomerNotificationDto) SetString(v string) {
	panic("Unsupported operation")
}
func (_ CustomerNotificationTypeCustomerNotificationDto) SetUnionElem(v int64) {
	panic("Unsupported operation")
}

func (r *CustomerNotificationTypeCustomerNotificationDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.MessageText = NewUnionNullString()

		return r.MessageText
	case 1:
		r.NotificationData = NewUnionNullNotificationDataDto()

		return r.NotificationData
	case 2:
		w := types.String{Target: &r.OutageEnd}

		return w

	case 3:
		w := types.Boolean{Target: &r.OutageEndSpecified}

		return w

	case 4:
		w := types.String{Target: &r.OutageStart}

		return w

	case 5:
		w := types.Boolean{Target: &r.OutageStartSpecified}

		return w

	case 6:
		r.RecordNumber = NewUnionNullString()

		return r.RecordNumber
	case 7:
		r.TechnicalAsset = NewUnionNullArrayUnionNullTechnicalAssetDto()

		return r.TechnicalAsset
	}
	panic("Unknown field index")
}

func (r *CustomerNotificationTypeCustomerNotificationDto) SetDefault(i int) {
	switch i {
	case 0:
		r.MessageText = nil
		return
	case 1:
		r.NotificationData = nil
		return
	case 6:
		r.RecordNumber = nil
		return
	case 7:
		r.TechnicalAsset = nil
		return
	}
	panic("Unknown field index")
}

func (r *CustomerNotificationTypeCustomerNotificationDto) NullField(i int) {
	switch i {
	case 0:
		r.MessageText = nil
		return
	case 1:
		r.NotificationData = nil
		return
	case 6:
		r.RecordNumber = nil
		return
	case 7:
		r.TechnicalAsset = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CustomerNotificationTypeCustomerNotificationDto) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ CustomerNotificationTypeCustomerNotificationDto) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ CustomerNotificationTypeCustomerNotificationDto) HintSize(int) {
	panic("Unsupported operation")
}
func (_ CustomerNotificationTypeCustomerNotificationDto) Finalize() {}

func (_ CustomerNotificationTypeCustomerNotificationDto) AvroCRC64Fingerprint() []byte {
	return []byte(CustomerNotificationTypeCustomerNotificationDtoAvroCRC64Fingerprint)
}

func (r CustomerNotificationTypeCustomerNotificationDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["MessageText"], err = json.Marshal(r.MessageText)
	if err != nil {
		return nil, err
	}
	output["NotificationData"], err = json.Marshal(r.NotificationData)
	if err != nil {
		return nil, err
	}
	output["OutageEnd"], err = json.Marshal(r.OutageEnd)
	if err != nil {
		return nil, err
	}
	output["OutageEndSpecified"], err = json.Marshal(r.OutageEndSpecified)
	if err != nil {
		return nil, err
	}
	output["OutageStart"], err = json.Marshal(r.OutageStart)
	if err != nil {
		return nil, err
	}
	output["OutageStartSpecified"], err = json.Marshal(r.OutageStartSpecified)
	if err != nil {
		return nil, err
	}
	output["RecordNumber"], err = json.Marshal(r.RecordNumber)
	if err != nil {
		return nil, err
	}
	output["TechnicalAsset"], err = json.Marshal(r.TechnicalAsset)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CustomerNotificationTypeCustomerNotificationDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["MessageText"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MessageText); err != nil {
			return err
		}
	} else {
		r.MessageText = NewUnionNullString()

		r.MessageText = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NotificationData"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NotificationData); err != nil {
			return err
		}
	} else {
		r.NotificationData = NewUnionNullNotificationDataDto()

		r.NotificationData = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OutageEnd"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OutageEnd); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OutageEnd")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OutageEndSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OutageEndSpecified); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OutageEndSpecified")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OutageStart"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OutageStart); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OutageStart")
	}
	val = func() json.RawMessage {
		if v, ok := fields["OutageStartSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OutageStartSpecified); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for OutageStartSpecified")
	}
	val = func() json.RawMessage {
		if v, ok := fields["RecordNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecordNumber); err != nil {
			return err
		}
	} else {
		r.RecordNumber = NewUnionNullString()

		r.RecordNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TechnicalAsset"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TechnicalAsset); err != nil {
			return err
		}
	} else {
		r.TechnicalAsset = NewUnionNullArrayUnionNullTechnicalAssetDto()

		r.TechnicalAsset = nil
	}
	return nil
}
