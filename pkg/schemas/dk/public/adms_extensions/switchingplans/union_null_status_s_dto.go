// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100486_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullStatusSDtoTypeEnum int

const (
	UnionNullStatusSDtoTypeEnumStatusSDto UnionNullStatusSDtoTypeEnum = 1
)

type UnionNullStatusSDto struct {
	Null       *types.NullVal
	StatusSDto StatusSDto
	UnionType  UnionNullStatusSDtoTypeEnum
}

func writeUnionNullStatusSDto(r *UnionNullStatusSDto, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullStatusSDtoTypeEnumStatusSDto:
		return writeStatusSDto(r.StatusSDto, w)
	}
	return fmt.Errorf("invalid value for *UnionNullStatusSDto")
}

func NewUnionNullStatusSDto() *UnionNullStatusSDto {
	return &UnionNullStatusSDto{}
}

func (r *UnionNullStatusSDto) Serialize(w io.Writer) error {
	return writeUnionNullStatusSDto(r, w)
}

func DeserializeUnionNullStatusSDto(r io.Reader) (*UnionNullStatusSDto, error) {
	t := NewUnionNullStatusSDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullStatusSDtoFromSchema(r io.Reader, schema string) (*UnionNullStatusSDto, error) {
	t := NewUnionNullStatusSDto()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullStatusSDto) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"DateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"StatusSDto\",\"type\":\"record\"}]"
}

func (_ *UnionNullStatusSDto) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullStatusSDto) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullStatusSDto) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullStatusSDto) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullStatusSDto) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullStatusSDto) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullStatusSDto) SetLong(v int64) {

	r.UnionType = (UnionNullStatusSDtoTypeEnum)(v)
}

func (r *UnionNullStatusSDto) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.StatusSDto = NewStatusSDto()
		return &types.Record{Target: (&r.StatusSDto)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullStatusSDto) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullStatusSDto) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullStatusSDto) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullStatusSDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullStatusSDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullStatusSDto) Finalize()                        {}

func (r *UnionNullStatusSDto) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullStatusSDtoTypeEnumStatusSDto:
		return json.Marshal(map[string]interface{}{"SesamResponseServices.SesamDomainObjects.StatusSDto": r.StatusSDto})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullStatusSDto")
}

func (r *UnionNullStatusSDto) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["SesamResponseServices.SesamDomainObjects.StatusSDto"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.StatusSDto)
	}
	return fmt.Errorf("invalid value for *UnionNullStatusSDto")
}
