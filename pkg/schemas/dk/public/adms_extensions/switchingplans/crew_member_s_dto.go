// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100486_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CrewMemberSDto struct {
	Person *UnionNullPersonDto `json:"Person"`
}

const CrewMemberSDtoAvroCRC64Fingerprint = "\x82\t\x8fP\xaa\xac\v\xa1"

func NewCrewMemberSDto() CrewMemberSDto {
	r := CrewMemberSDto{}
	r.Person = nil
	return r
}

func DeserializeCrewMemberSDto(r io.Reader) (CrewMemberSDto, error) {
	t := NewCrewMemberSDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCrewMemberSDtoFromSchema(r io.Reader, schema string) (CrewMemberSDto, error) {
	t := NewCrewMemberSDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCrewMemberSDto(r CrewMemberSDto, w io.Writer) error {
	var err error
	err = writeUnionNullPersonDto(r.Person, w)
	if err != nil {
		return err
	}
	return err
}

func (r CrewMemberSDto) Serialize(w io.Writer) error {
	return writeCrewMemberSDto(r, w)
}

func (r CrewMemberSDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Person\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"MRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"PersonDto\",\"type\":\"record\"}]}],\"name\":\"SesamResponseServices.SesamDomainObjects.CrewMemberSDto\",\"type\":\"record\"}"
}

func (r CrewMemberSDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.CrewMemberSDto"
}

func (_ CrewMemberSDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CrewMemberSDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CrewMemberSDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CrewMemberSDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CrewMemberSDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CrewMemberSDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CrewMemberSDto) SetString(v string)   { panic("Unsupported operation") }
func (_ CrewMemberSDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CrewMemberSDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.Person = NewUnionNullPersonDto()

		return r.Person
	}
	panic("Unknown field index")
}

func (r *CrewMemberSDto) SetDefault(i int) {
	switch i {
	case 0:
		r.Person = nil
		return
	}
	panic("Unknown field index")
}

func (r *CrewMemberSDto) NullField(i int) {
	switch i {
	case 0:
		r.Person = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CrewMemberSDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CrewMemberSDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CrewMemberSDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ CrewMemberSDto) Finalize()                        {}

func (_ CrewMemberSDto) AvroCRC64Fingerprint() []byte {
	return []byte(CrewMemberSDtoAvroCRC64Fingerprint)
}

func (r CrewMemberSDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Person"], err = json.Marshal(r.Person)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CrewMemberSDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Person"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Person); err != nil {
			return err
		}
	} else {
		r.Person = NewUnionNullPersonDto()

		r.Person = nil
	}
	return nil
}
