// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100486_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PersonDto struct {
	MRID *UnionNullString `json:"MRID"`
}

const PersonDtoAvroCRC64Fingerprint = "\xbbb\xa7\"C\x95JH"

func NewPersonDto() PersonDto {
	r := PersonDto{}
	r.MRID = nil
	return r
}

func DeserializePersonDto(r io.Reader) (PersonDto, error) {
	t := NewPersonDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePersonDtoFromSchema(r io.Reader, schema string) (PersonDto, error) {
	t := NewPersonDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePersonDto(r PersonDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.MRID, w)
	if err != nil {
		return err
	}
	return err
}

func (r PersonDto) Serialize(w io.Writer) error {
	return writePersonDto(r, w)
}

func (r PersonDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"MRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.PersonDto\",\"type\":\"record\"}"
}

func (r PersonDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.PersonDto"
}

func (_ PersonDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PersonDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PersonDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PersonDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PersonDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PersonDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PersonDto) SetString(v string)   { panic("Unsupported operation") }
func (_ PersonDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PersonDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.MRID = NewUnionNullString()

		return r.MRID
	}
	panic("Unknown field index")
}

func (r *PersonDto) SetDefault(i int) {
	switch i {
	case 0:
		r.MRID = nil
		return
	}
	panic("Unknown field index")
}

func (r *PersonDto) NullField(i int) {
	switch i {
	case 0:
		r.MRID = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ PersonDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PersonDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PersonDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ PersonDto) Finalize()                        {}

func (_ PersonDto) AvroCRC64Fingerprint() []byte {
	return []byte(PersonDtoAvroCRC64Fingerprint)
}

func (r PersonDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["MRID"], err = json.Marshal(r.MRID)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PersonDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["MRID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MRID); err != nil {
			return err
		}
	} else {
		r.MRID = NewUnionNullString()

		r.MRID = nil
	}
	return nil
}
