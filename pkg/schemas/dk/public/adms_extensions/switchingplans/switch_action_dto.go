// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100486_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SwitchActionDto struct {
	CrewMember *UnionNullCrewMemberSDto `json:"CrewMember"`

	Description *UnionNullString `json:"Description"`

	ExecutedDateTime *UnionNullString `json:"ExecutedDateTime"`

	ExecutedDateTimeSpecified *UnionNullBool `json:"ExecutedDateTimeSpecified"`

	IsFreeSequence *UnionNullString `json:"IsFreeSequence"`

	IssuedDateTime *UnionNullString `json:"IssuedDateTime"`

	IssuedDateTimeSpecified *UnionNullBool `json:"IssuedDateTimeSpecified"`

	Kind *UnionNullString `json:"Kind"`

	LastModifiedDateTime *UnionNullString `json:"LastModifiedDateTime"`

	LastModifiedDateTimeSpecified *UnionNullBool `json:"LastModifiedDateTimeSpecified"`

	OperatedSwitch *UnionNullSwitchDto `json:"OperatedSwitch"`

	Operator *UnionNullOperatorDto `json:"Operator"`

	PlannedDateTime *UnionNullString `json:"PlannedDateTime"`

	PlannedDateTimeSpecified *UnionNullBool `json:"PlannedDateTimeSpecified"`

	SequenceNumber *UnionNullString `json:"SequenceNumber"`

	Status *UnionNullStatusSDto `json:"Status"`
}

const SwitchActionDtoAvroCRC64Fingerprint = "3\x8b'\xd5\xf7\x0e\x99\xa7"

func NewSwitchActionDto() SwitchActionDto {
	r := SwitchActionDto{}
	r.CrewMember = nil
	r.Description = nil
	r.ExecutedDateTime = nil
	r.ExecutedDateTimeSpecified = nil
	r.IsFreeSequence = nil
	r.IssuedDateTime = nil
	r.IssuedDateTimeSpecified = nil
	r.Kind = nil
	r.LastModifiedDateTime = nil
	r.LastModifiedDateTimeSpecified = nil
	r.OperatedSwitch = nil
	r.Operator = nil
	r.PlannedDateTime = nil
	r.PlannedDateTimeSpecified = nil
	r.SequenceNumber = nil
	r.Status = nil
	return r
}

func DeserializeSwitchActionDto(r io.Reader) (SwitchActionDto, error) {
	t := NewSwitchActionDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSwitchActionDtoFromSchema(r io.Reader, schema string) (SwitchActionDto, error) {
	t := NewSwitchActionDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSwitchActionDto(r SwitchActionDto, w io.Writer) error {
	var err error
	err = writeUnionNullCrewMemberSDto(r.CrewMember, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ExecutedDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.ExecutedDateTimeSpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IsFreeSequence, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IssuedDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.IssuedDateTimeSpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Kind, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LastModifiedDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.LastModifiedDateTimeSpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullSwitchDto(r.OperatedSwitch, w)
	if err != nil {
		return err
	}
	err = writeUnionNullOperatorDto(r.Operator, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PlannedDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.PlannedDateTimeSpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SequenceNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullStatusSDto(r.Status, w)
	if err != nil {
		return err
	}
	return err
}

func (r SwitchActionDto) Serialize(w io.Writer) error {
	return writeSwitchActionDto(r, w)
}

func (r SwitchActionDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CrewMember\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Person\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"MRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"PersonDto\",\"type\":\"record\"}]}],\"name\":\"CrewMemberSDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ExecutedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ExecutedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"IsFreeSequence\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IssuedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IssuedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Kind\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastModifiedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastModifiedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"OperatedSwitch\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Assets\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"MRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"AssetSDto\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"MRID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SwitchPhase\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"PhaseSide1\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PhaseSide2\",\"type\":[\"null\",\"string\"]}],\"name\":\"SwitchPhaseDto\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"SwitchDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Operator\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Person\",\"type\":[\"null\",\"SesamResponseServices.SesamDomainObjects.PersonDto\"]}],\"name\":\"OperatorDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"PlannedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PlannedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"SequenceNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Status\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"DateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"StatusSDto\",\"type\":\"record\"}]}],\"name\":\"SesamResponseServices.SesamDomainObjects.SwitchActionDto\",\"type\":\"record\"}"
}

func (r SwitchActionDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.SwitchActionDto"
}

func (_ SwitchActionDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SwitchActionDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SwitchActionDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SwitchActionDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SwitchActionDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SwitchActionDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SwitchActionDto) SetString(v string)   { panic("Unsupported operation") }
func (_ SwitchActionDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SwitchActionDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.CrewMember = NewUnionNullCrewMemberSDto()

		return r.CrewMember
	case 1:
		r.Description = NewUnionNullString()

		return r.Description
	case 2:
		r.ExecutedDateTime = NewUnionNullString()

		return r.ExecutedDateTime
	case 3:
		r.ExecutedDateTimeSpecified = NewUnionNullBool()

		return r.ExecutedDateTimeSpecified
	case 4:
		r.IsFreeSequence = NewUnionNullString()

		return r.IsFreeSequence
	case 5:
		r.IssuedDateTime = NewUnionNullString()

		return r.IssuedDateTime
	case 6:
		r.IssuedDateTimeSpecified = NewUnionNullBool()

		return r.IssuedDateTimeSpecified
	case 7:
		r.Kind = NewUnionNullString()

		return r.Kind
	case 8:
		r.LastModifiedDateTime = NewUnionNullString()

		return r.LastModifiedDateTime
	case 9:
		r.LastModifiedDateTimeSpecified = NewUnionNullBool()

		return r.LastModifiedDateTimeSpecified
	case 10:
		r.OperatedSwitch = NewUnionNullSwitchDto()

		return r.OperatedSwitch
	case 11:
		r.Operator = NewUnionNullOperatorDto()

		return r.Operator
	case 12:
		r.PlannedDateTime = NewUnionNullString()

		return r.PlannedDateTime
	case 13:
		r.PlannedDateTimeSpecified = NewUnionNullBool()

		return r.PlannedDateTimeSpecified
	case 14:
		r.SequenceNumber = NewUnionNullString()

		return r.SequenceNumber
	case 15:
		r.Status = NewUnionNullStatusSDto()

		return r.Status
	}
	panic("Unknown field index")
}

func (r *SwitchActionDto) SetDefault(i int) {
	switch i {
	case 0:
		r.CrewMember = nil
		return
	case 1:
		r.Description = nil
		return
	case 2:
		r.ExecutedDateTime = nil
		return
	case 3:
		r.ExecutedDateTimeSpecified = nil
		return
	case 4:
		r.IsFreeSequence = nil
		return
	case 5:
		r.IssuedDateTime = nil
		return
	case 6:
		r.IssuedDateTimeSpecified = nil
		return
	case 7:
		r.Kind = nil
		return
	case 8:
		r.LastModifiedDateTime = nil
		return
	case 9:
		r.LastModifiedDateTimeSpecified = nil
		return
	case 10:
		r.OperatedSwitch = nil
		return
	case 11:
		r.Operator = nil
		return
	case 12:
		r.PlannedDateTime = nil
		return
	case 13:
		r.PlannedDateTimeSpecified = nil
		return
	case 14:
		r.SequenceNumber = nil
		return
	case 15:
		r.Status = nil
		return
	}
	panic("Unknown field index")
}

func (r *SwitchActionDto) NullField(i int) {
	switch i {
	case 0:
		r.CrewMember = nil
		return
	case 1:
		r.Description = nil
		return
	case 2:
		r.ExecutedDateTime = nil
		return
	case 3:
		r.ExecutedDateTimeSpecified = nil
		return
	case 4:
		r.IsFreeSequence = nil
		return
	case 5:
		r.IssuedDateTime = nil
		return
	case 6:
		r.IssuedDateTimeSpecified = nil
		return
	case 7:
		r.Kind = nil
		return
	case 8:
		r.LastModifiedDateTime = nil
		return
	case 9:
		r.LastModifiedDateTimeSpecified = nil
		return
	case 10:
		r.OperatedSwitch = nil
		return
	case 11:
		r.Operator = nil
		return
	case 12:
		r.PlannedDateTime = nil
		return
	case 13:
		r.PlannedDateTimeSpecified = nil
		return
	case 14:
		r.SequenceNumber = nil
		return
	case 15:
		r.Status = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SwitchActionDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SwitchActionDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SwitchActionDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ SwitchActionDto) Finalize()                        {}

func (_ SwitchActionDto) AvroCRC64Fingerprint() []byte {
	return []byte(SwitchActionDtoAvroCRC64Fingerprint)
}

func (r SwitchActionDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CrewMember"], err = json.Marshal(r.CrewMember)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["ExecutedDateTime"], err = json.Marshal(r.ExecutedDateTime)
	if err != nil {
		return nil, err
	}
	output["ExecutedDateTimeSpecified"], err = json.Marshal(r.ExecutedDateTimeSpecified)
	if err != nil {
		return nil, err
	}
	output["IsFreeSequence"], err = json.Marshal(r.IsFreeSequence)
	if err != nil {
		return nil, err
	}
	output["IssuedDateTime"], err = json.Marshal(r.IssuedDateTime)
	if err != nil {
		return nil, err
	}
	output["IssuedDateTimeSpecified"], err = json.Marshal(r.IssuedDateTimeSpecified)
	if err != nil {
		return nil, err
	}
	output["Kind"], err = json.Marshal(r.Kind)
	if err != nil {
		return nil, err
	}
	output["LastModifiedDateTime"], err = json.Marshal(r.LastModifiedDateTime)
	if err != nil {
		return nil, err
	}
	output["LastModifiedDateTimeSpecified"], err = json.Marshal(r.LastModifiedDateTimeSpecified)
	if err != nil {
		return nil, err
	}
	output["OperatedSwitch"], err = json.Marshal(r.OperatedSwitch)
	if err != nil {
		return nil, err
	}
	output["Operator"], err = json.Marshal(r.Operator)
	if err != nil {
		return nil, err
	}
	output["PlannedDateTime"], err = json.Marshal(r.PlannedDateTime)
	if err != nil {
		return nil, err
	}
	output["PlannedDateTimeSpecified"], err = json.Marshal(r.PlannedDateTimeSpecified)
	if err != nil {
		return nil, err
	}
	output["SequenceNumber"], err = json.Marshal(r.SequenceNumber)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SwitchActionDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CrewMember"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CrewMember); err != nil {
			return err
		}
	} else {
		r.CrewMember = NewUnionNullCrewMemberSDto()

		r.CrewMember = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ExecutedDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExecutedDateTime); err != nil {
			return err
		}
	} else {
		r.ExecutedDateTime = NewUnionNullString()

		r.ExecutedDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ExecutedDateTimeSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExecutedDateTimeSpecified); err != nil {
			return err
		}
	} else {
		r.ExecutedDateTimeSpecified = NewUnionNullBool()

		r.ExecutedDateTimeSpecified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IsFreeSequence"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsFreeSequence); err != nil {
			return err
		}
	} else {
		r.IsFreeSequence = NewUnionNullString()

		r.IsFreeSequence = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IssuedDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IssuedDateTime); err != nil {
			return err
		}
	} else {
		r.IssuedDateTime = NewUnionNullString()

		r.IssuedDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IssuedDateTimeSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IssuedDateTimeSpecified); err != nil {
			return err
		}
	} else {
		r.IssuedDateTimeSpecified = NewUnionNullBool()

		r.IssuedDateTimeSpecified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Kind"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Kind); err != nil {
			return err
		}
	} else {
		r.Kind = NewUnionNullString()

		r.Kind = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastModifiedDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModifiedDateTime); err != nil {
			return err
		}
	} else {
		r.LastModifiedDateTime = NewUnionNullString()

		r.LastModifiedDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastModifiedDateTimeSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModifiedDateTimeSpecified); err != nil {
			return err
		}
	} else {
		r.LastModifiedDateTimeSpecified = NewUnionNullBool()

		r.LastModifiedDateTimeSpecified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OperatedSwitch"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OperatedSwitch); err != nil {
			return err
		}
	} else {
		r.OperatedSwitch = NewUnionNullSwitchDto()

		r.OperatedSwitch = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Operator"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Operator); err != nil {
			return err
		}
	} else {
		r.Operator = NewUnionNullOperatorDto()

		r.Operator = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PlannedDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PlannedDateTime); err != nil {
			return err
		}
	} else {
		r.PlannedDateTime = NewUnionNullString()

		r.PlannedDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PlannedDateTimeSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PlannedDateTimeSpecified); err != nil {
			return err
		}
	} else {
		r.PlannedDateTimeSpecified = NewUnionNullBool()

		r.PlannedDateTimeSpecified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SequenceNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SequenceNumber); err != nil {
			return err
		}
	} else {
		r.SequenceNumber = NewUnionNullString()

		r.SequenceNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		r.Status = NewUnionNullStatusSDto()

		r.Status = nil
	}
	return nil
}
