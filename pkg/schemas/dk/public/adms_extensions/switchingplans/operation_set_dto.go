// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100486_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OperationSetDto struct {
	EnforceMsgSequence *UnionNullBool `json:"EnforceMsgSequence"`

	EnforceMsgSequenceSpecified *UnionNullBool `json:"EnforceMsgSequenceSpecified"`

	EnforceTransactionalIntegrity *UnionNullBool `json:"EnforceTransactionalIntegrity"`

	EnforceTransactionalIntegritySpecified *UnionNullBool `json:"EnforceTransactionalIntegritySpecified"`

	Operation *UnionNullArrayUnionNullOperationTypeDto `json:"Operation"`
}

const OperationSetDtoAvroCRC64Fingerprint = "\x92:\xf5\xc3\x10\x9aX\x8d"

func NewOperationSetDto() OperationSetDto {
	r := OperationSetDto{}
	r.EnforceMsgSequence = nil
	r.EnforceMsgSequenceSpecified = nil
	r.EnforceTransactionalIntegrity = nil
	r.EnforceTransactionalIntegritySpecified = nil
	r.Operation = nil
	return r
}

func DeserializeOperationSetDto(r io.Reader) (OperationSetDto, error) {
	t := NewOperationSetDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOperationSetDtoFromSchema(r io.Reader, schema string) (OperationSetDto, error) {
	t := NewOperationSetDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOperationSetDto(r OperationSetDto, w io.Writer) error {
	var err error
	err = writeUnionNullBool(r.EnforceMsgSequence, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.EnforceMsgSequenceSpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.EnforceTransactionalIntegrity, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.EnforceTransactionalIntegritySpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullOperationTypeDto(r.Operation, w)
	if err != nil {
		return err
	}
	return err
}

func (r OperationSetDto) Serialize(w io.Writer) error {
	return writeOperationSetDto(r, w)
}

func (r OperationSetDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"EnforceMsgSequence\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"EnforceMsgSequenceSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"EnforceTransactionalIntegrity\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"EnforceTransactionalIntegritySpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Operation\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Any\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ElementOperation\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Noun\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OperationId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Verb\",\"type\":[\"null\",\"string\"]}],\"name\":\"OperationTypeDto\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"SesamResponseServices.SesamDomainObjects.OperationSetDto\",\"type\":\"record\"}"
}

func (r OperationSetDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.OperationSetDto"
}

func (_ OperationSetDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OperationSetDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OperationSetDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OperationSetDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OperationSetDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OperationSetDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OperationSetDto) SetString(v string)   { panic("Unsupported operation") }
func (_ OperationSetDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OperationSetDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.EnforceMsgSequence = NewUnionNullBool()

		return r.EnforceMsgSequence
	case 1:
		r.EnforceMsgSequenceSpecified = NewUnionNullBool()

		return r.EnforceMsgSequenceSpecified
	case 2:
		r.EnforceTransactionalIntegrity = NewUnionNullBool()

		return r.EnforceTransactionalIntegrity
	case 3:
		r.EnforceTransactionalIntegritySpecified = NewUnionNullBool()

		return r.EnforceTransactionalIntegritySpecified
	case 4:
		r.Operation = NewUnionNullArrayUnionNullOperationTypeDto()

		return r.Operation
	}
	panic("Unknown field index")
}

func (r *OperationSetDto) SetDefault(i int) {
	switch i {
	case 0:
		r.EnforceMsgSequence = nil
		return
	case 1:
		r.EnforceMsgSequenceSpecified = nil
		return
	case 2:
		r.EnforceTransactionalIntegrity = nil
		return
	case 3:
		r.EnforceTransactionalIntegritySpecified = nil
		return
	case 4:
		r.Operation = nil
		return
	}
	panic("Unknown field index")
}

func (r *OperationSetDto) NullField(i int) {
	switch i {
	case 0:
		r.EnforceMsgSequence = nil
		return
	case 1:
		r.EnforceMsgSequenceSpecified = nil
		return
	case 2:
		r.EnforceTransactionalIntegrity = nil
		return
	case 3:
		r.EnforceTransactionalIntegritySpecified = nil
		return
	case 4:
		r.Operation = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ OperationSetDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OperationSetDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OperationSetDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ OperationSetDto) Finalize()                        {}

func (_ OperationSetDto) AvroCRC64Fingerprint() []byte {
	return []byte(OperationSetDtoAvroCRC64Fingerprint)
}

func (r OperationSetDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["EnforceMsgSequence"], err = json.Marshal(r.EnforceMsgSequence)
	if err != nil {
		return nil, err
	}
	output["EnforceMsgSequenceSpecified"], err = json.Marshal(r.EnforceMsgSequenceSpecified)
	if err != nil {
		return nil, err
	}
	output["EnforceTransactionalIntegrity"], err = json.Marshal(r.EnforceTransactionalIntegrity)
	if err != nil {
		return nil, err
	}
	output["EnforceTransactionalIntegritySpecified"], err = json.Marshal(r.EnforceTransactionalIntegritySpecified)
	if err != nil {
		return nil, err
	}
	output["Operation"], err = json.Marshal(r.Operation)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OperationSetDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["EnforceMsgSequence"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnforceMsgSequence); err != nil {
			return err
		}
	} else {
		r.EnforceMsgSequence = NewUnionNullBool()

		r.EnforceMsgSequence = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EnforceMsgSequenceSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnforceMsgSequenceSpecified); err != nil {
			return err
		}
	} else {
		r.EnforceMsgSequenceSpecified = NewUnionNullBool()

		r.EnforceMsgSequenceSpecified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EnforceTransactionalIntegrity"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnforceTransactionalIntegrity); err != nil {
			return err
		}
	} else {
		r.EnforceTransactionalIntegrity = NewUnionNullBool()

		r.EnforceTransactionalIntegrity = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EnforceTransactionalIntegritySpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnforceTransactionalIntegritySpecified); err != nil {
			return err
		}
	} else {
		r.EnforceTransactionalIntegritySpecified = NewUnionNullBool()

		r.EnforceTransactionalIntegritySpecified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Operation"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Operation); err != nil {
			return err
		}
	} else {
		r.Operation = NewUnionNullArrayUnionNullOperationTypeDto()

		r.Operation = nil
	}
	return nil
}
