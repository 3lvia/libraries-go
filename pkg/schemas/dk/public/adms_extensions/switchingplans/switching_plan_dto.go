// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100486_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SwitchingPlanDto struct {
	AuthorName *UnionNullString `json:"AuthorName"`

	CreatedDateTime *UnionNullString `json:"CreatedDateTime"`

	Description *UnionNullString `json:"Description"`

	LastModifiedDateTime *UnionNullString `json:"LastModifiedDateTime"`

	LastModifiedDateTimeSpecified *UnionNullBool `json:"LastModifiedDateTimeSpecified"`

	MRID *UnionNullString `json:"MRID"`

	Name *UnionNullString `json:"Name"`

	Outage *UnionNullOutageDto `json:"Outage"`

	Purpose *UnionNullString `json:"Purpose"`

	Rank *UnionNullString `json:"Rank"`

	SwitchActions *UnionNullArrayUnionNullSwitchActionDto `json:"SwitchActions"`
}

const SwitchingPlanDtoAvroCRC64Fingerprint = "\xbab\xa6\x90\xee1n["

func NewSwitchingPlanDto() SwitchingPlanDto {
	r := SwitchingPlanDto{}
	r.AuthorName = nil
	r.CreatedDateTime = nil
	r.Description = nil
	r.LastModifiedDateTime = nil
	r.LastModifiedDateTimeSpecified = nil
	r.MRID = nil
	r.Name = nil
	r.Outage = nil
	r.Purpose = nil
	r.Rank = nil
	r.SwitchActions = nil
	return r
}

func DeserializeSwitchingPlanDto(r io.Reader) (SwitchingPlanDto, error) {
	t := NewSwitchingPlanDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSwitchingPlanDtoFromSchema(r io.Reader, schema string) (SwitchingPlanDto, error) {
	t := NewSwitchingPlanDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSwitchingPlanDto(r SwitchingPlanDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.AuthorName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CreatedDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LastModifiedDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.LastModifiedDateTimeSpecified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MRID, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullOutageDto(r.Outage, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Purpose, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Rank, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullSwitchActionDto(r.SwitchActions, w)
	if err != nil {
		return err
	}
	return err
}

func (r SwitchingPlanDto) Serialize(w io.Writer) error {
	return writeSwitchingPlanDto(r, w)
}

func (r SwitchingPlanDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"AuthorName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CreatedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastModifiedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastModifiedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"MRID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Outage\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"MRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"OutageDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Purpose\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Rank\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SwitchActions\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CrewMember\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Person\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"MRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"PersonDto\",\"type\":\"record\"}]}],\"name\":\"CrewMemberSDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ExecutedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ExecutedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"IsFreeSequence\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IssuedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IssuedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Kind\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastModifiedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LastModifiedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"OperatedSwitch\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Assets\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"MRID\",\"type\":[\"null\",\"string\"]}],\"name\":\"AssetSDto\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"MRID\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SwitchPhase\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"PhaseSide1\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PhaseSide2\",\"type\":[\"null\",\"string\"]}],\"name\":\"SwitchPhaseDto\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"SwitchDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Operator\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Person\",\"type\":[\"null\",\"SesamResponseServices.SesamDomainObjects.PersonDto\"]}],\"name\":\"OperatorDto\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"PlannedDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PlannedDateTimeSpecified\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"SequenceNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Status\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"DateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"StatusSDto\",\"type\":\"record\"}]}],\"name\":\"SwitchActionDto\",\"type\":\"record\"}],\"type\":\"array\"}]}],\"name\":\"SesamResponseServices.SesamDomainObjects.SwitchingPlanDto\",\"type\":\"record\"}"
}

func (r SwitchingPlanDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.SwitchingPlanDto"
}

func (_ SwitchingPlanDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SwitchingPlanDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SwitchingPlanDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SwitchingPlanDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SwitchingPlanDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SwitchingPlanDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SwitchingPlanDto) SetString(v string)   { panic("Unsupported operation") }
func (_ SwitchingPlanDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SwitchingPlanDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.AuthorName = NewUnionNullString()

		return r.AuthorName
	case 1:
		r.CreatedDateTime = NewUnionNullString()

		return r.CreatedDateTime
	case 2:
		r.Description = NewUnionNullString()

		return r.Description
	case 3:
		r.LastModifiedDateTime = NewUnionNullString()

		return r.LastModifiedDateTime
	case 4:
		r.LastModifiedDateTimeSpecified = NewUnionNullBool()

		return r.LastModifiedDateTimeSpecified
	case 5:
		r.MRID = NewUnionNullString()

		return r.MRID
	case 6:
		r.Name = NewUnionNullString()

		return r.Name
	case 7:
		r.Outage = NewUnionNullOutageDto()

		return r.Outage
	case 8:
		r.Purpose = NewUnionNullString()

		return r.Purpose
	case 9:
		r.Rank = NewUnionNullString()

		return r.Rank
	case 10:
		r.SwitchActions = NewUnionNullArrayUnionNullSwitchActionDto()

		return r.SwitchActions
	}
	panic("Unknown field index")
}

func (r *SwitchingPlanDto) SetDefault(i int) {
	switch i {
	case 0:
		r.AuthorName = nil
		return
	case 1:
		r.CreatedDateTime = nil
		return
	case 2:
		r.Description = nil
		return
	case 3:
		r.LastModifiedDateTime = nil
		return
	case 4:
		r.LastModifiedDateTimeSpecified = nil
		return
	case 5:
		r.MRID = nil
		return
	case 6:
		r.Name = nil
		return
	case 7:
		r.Outage = nil
		return
	case 8:
		r.Purpose = nil
		return
	case 9:
		r.Rank = nil
		return
	case 10:
		r.SwitchActions = nil
		return
	}
	panic("Unknown field index")
}

func (r *SwitchingPlanDto) NullField(i int) {
	switch i {
	case 0:
		r.AuthorName = nil
		return
	case 1:
		r.CreatedDateTime = nil
		return
	case 2:
		r.Description = nil
		return
	case 3:
		r.LastModifiedDateTime = nil
		return
	case 4:
		r.LastModifiedDateTimeSpecified = nil
		return
	case 5:
		r.MRID = nil
		return
	case 6:
		r.Name = nil
		return
	case 7:
		r.Outage = nil
		return
	case 8:
		r.Purpose = nil
		return
	case 9:
		r.Rank = nil
		return
	case 10:
		r.SwitchActions = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SwitchingPlanDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SwitchingPlanDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SwitchingPlanDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ SwitchingPlanDto) Finalize()                        {}

func (_ SwitchingPlanDto) AvroCRC64Fingerprint() []byte {
	return []byte(SwitchingPlanDtoAvroCRC64Fingerprint)
}

func (r SwitchingPlanDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AuthorName"], err = json.Marshal(r.AuthorName)
	if err != nil {
		return nil, err
	}
	output["CreatedDateTime"], err = json.Marshal(r.CreatedDateTime)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["LastModifiedDateTime"], err = json.Marshal(r.LastModifiedDateTime)
	if err != nil {
		return nil, err
	}
	output["LastModifiedDateTimeSpecified"], err = json.Marshal(r.LastModifiedDateTimeSpecified)
	if err != nil {
		return nil, err
	}
	output["MRID"], err = json.Marshal(r.MRID)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Outage"], err = json.Marshal(r.Outage)
	if err != nil {
		return nil, err
	}
	output["Purpose"], err = json.Marshal(r.Purpose)
	if err != nil {
		return nil, err
	}
	output["Rank"], err = json.Marshal(r.Rank)
	if err != nil {
		return nil, err
	}
	output["SwitchActions"], err = json.Marshal(r.SwitchActions)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SwitchingPlanDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AuthorName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AuthorName); err != nil {
			return err
		}
	} else {
		r.AuthorName = NewUnionNullString()

		r.AuthorName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CreatedDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedDateTime); err != nil {
			return err
		}
	} else {
		r.CreatedDateTime = NewUnionNullString()

		r.CreatedDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastModifiedDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModifiedDateTime); err != nil {
			return err
		}
	} else {
		r.LastModifiedDateTime = NewUnionNullString()

		r.LastModifiedDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastModifiedDateTimeSpecified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModifiedDateTimeSpecified); err != nil {
			return err
		}
	} else {
		r.LastModifiedDateTimeSpecified = NewUnionNullBool()

		r.LastModifiedDateTimeSpecified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MRID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MRID); err != nil {
			return err
		}
	} else {
		r.MRID = NewUnionNullString()

		r.MRID = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Outage"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Outage); err != nil {
			return err
		}
	} else {
		r.Outage = NewUnionNullOutageDto()

		r.Outage = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Purpose"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Purpose); err != nil {
			return err
		}
	} else {
		r.Purpose = NewUnionNullString()

		r.Purpose = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Rank"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Rank); err != nil {
			return err
		}
	} else {
		r.Rank = NewUnionNullString()

		r.Rank = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SwitchActions"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SwitchActions); err != nil {
			return err
		}
	} else {
		r.SwitchActions = NewUnionNullArrayUnionNullSwitchActionDto()

		r.SwitchActions = nil
	}
	return nil
}
