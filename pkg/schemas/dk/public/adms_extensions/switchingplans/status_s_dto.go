// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100486_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type StatusSDto struct {
	DateTime *UnionNullString `json:"DateTime"`

	Value *UnionNullString `json:"Value"`
}

const StatusSDtoAvroCRC64Fingerprint = "\xcc\x15\x85\xb6\x00\x7ff\xc9"

func NewStatusSDto() StatusSDto {
	r := StatusSDto{}
	r.DateTime = nil
	r.Value = nil
	return r
}

func DeserializeStatusSDto(r io.Reader) (StatusSDto, error) {
	t := NewStatusSDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeStatusSDtoFromSchema(r io.Reader, schema string) (StatusSDto, error) {
	t := NewStatusSDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeStatusSDto(r StatusSDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.DateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r StatusSDto) Serialize(w io.Writer) error {
	return writeStatusSDto(r, w)
}

func (r StatusSDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"DateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.StatusSDto\",\"type\":\"record\"}"
}

func (r StatusSDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.StatusSDto"
}

func (_ StatusSDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ StatusSDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ StatusSDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ StatusSDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ StatusSDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ StatusSDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ StatusSDto) SetString(v string)   { panic("Unsupported operation") }
func (_ StatusSDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *StatusSDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.DateTime = NewUnionNullString()

		return r.DateTime
	case 1:
		r.Value = NewUnionNullString()

		return r.Value
	}
	panic("Unknown field index")
}

func (r *StatusSDto) SetDefault(i int) {
	switch i {
	case 0:
		r.DateTime = nil
		return
	case 1:
		r.Value = nil
		return
	}
	panic("Unknown field index")
}

func (r *StatusSDto) NullField(i int) {
	switch i {
	case 0:
		r.DateTime = nil
		return
	case 1:
		r.Value = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ StatusSDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ StatusSDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ StatusSDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ StatusSDto) Finalize()                        {}

func (_ StatusSDto) AvroCRC64Fingerprint() []byte {
	return []byte(StatusSDtoAvroCRC64Fingerprint)
}

func (r StatusSDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["DateTime"], err = json.Marshal(r.DateTime)
	if err != nil {
		return nil, err
	}
	output["Value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *StatusSDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["DateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DateTime); err != nil {
			return err
		}
	} else {
		r.DateTime = NewUnionNullString()

		r.DateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		r.Value = NewUnionNullString()

		r.Value = nil
	}
	return nil
}
