// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100486_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OperationTypeDto struct {
	Any *UnionNullString `json:"Any"`

	ElementOperation *UnionNullBool `json:"ElementOperation"`

	Noun *UnionNullString `json:"Noun"`

	OperationId *UnionNullString `json:"OperationId"`

	Verb *UnionNullString `json:"Verb"`
}

const OperationTypeDtoAvroCRC64Fingerprint = "\xd5v\xa4\xd9M\xe7j1"

func NewOperationTypeDto() OperationTypeDto {
	r := OperationTypeDto{}
	r.Any = nil
	r.ElementOperation = nil
	r.Noun = nil
	r.OperationId = nil
	r.Verb = nil
	return r
}

func DeserializeOperationTypeDto(r io.Reader) (OperationTypeDto, error) {
	t := NewOperationTypeDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOperationTypeDtoFromSchema(r io.Reader, schema string) (OperationTypeDto, error) {
	t := NewOperationTypeDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOperationTypeDto(r OperationTypeDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Any, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.ElementOperation, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Noun, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OperationId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Verb, w)
	if err != nil {
		return err
	}
	return err
}

func (r OperationTypeDto) Serialize(w io.Writer) error {
	return writeOperationTypeDto(r, w)
}

func (r OperationTypeDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Any\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ElementOperation\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Noun\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OperationId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Verb\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.OperationTypeDto\",\"type\":\"record\"}"
}

func (r OperationTypeDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.OperationTypeDto"
}

func (_ OperationTypeDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OperationTypeDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OperationTypeDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OperationTypeDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OperationTypeDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OperationTypeDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OperationTypeDto) SetString(v string)   { panic("Unsupported operation") }
func (_ OperationTypeDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OperationTypeDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.Any = NewUnionNullString()

		return r.Any
	case 1:
		r.ElementOperation = NewUnionNullBool()

		return r.ElementOperation
	case 2:
		r.Noun = NewUnionNullString()

		return r.Noun
	case 3:
		r.OperationId = NewUnionNullString()

		return r.OperationId
	case 4:
		r.Verb = NewUnionNullString()

		return r.Verb
	}
	panic("Unknown field index")
}

func (r *OperationTypeDto) SetDefault(i int) {
	switch i {
	case 0:
		r.Any = nil
		return
	case 1:
		r.ElementOperation = nil
		return
	case 2:
		r.Noun = nil
		return
	case 3:
		r.OperationId = nil
		return
	case 4:
		r.Verb = nil
		return
	}
	panic("Unknown field index")
}

func (r *OperationTypeDto) NullField(i int) {
	switch i {
	case 0:
		r.Any = nil
		return
	case 1:
		r.ElementOperation = nil
		return
	case 2:
		r.Noun = nil
		return
	case 3:
		r.OperationId = nil
		return
	case 4:
		r.Verb = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ OperationTypeDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OperationTypeDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OperationTypeDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ OperationTypeDto) Finalize()                        {}

func (_ OperationTypeDto) AvroCRC64Fingerprint() []byte {
	return []byte(OperationTypeDtoAvroCRC64Fingerprint)
}

func (r OperationTypeDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Any"], err = json.Marshal(r.Any)
	if err != nil {
		return nil, err
	}
	output["ElementOperation"], err = json.Marshal(r.ElementOperation)
	if err != nil {
		return nil, err
	}
	output["Noun"], err = json.Marshal(r.Noun)
	if err != nil {
		return nil, err
	}
	output["OperationId"], err = json.Marshal(r.OperationId)
	if err != nil {
		return nil, err
	}
	output["Verb"], err = json.Marshal(r.Verb)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OperationTypeDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Any"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Any); err != nil {
			return err
		}
	} else {
		r.Any = NewUnionNullString()

		r.Any = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ElementOperation"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ElementOperation); err != nil {
			return err
		}
	} else {
		r.ElementOperation = NewUnionNullBool()

		r.ElementOperation = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Noun"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Noun); err != nil {
			return err
		}
	} else {
		r.Noun = NewUnionNullString()

		r.Noun = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OperationId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OperationId); err != nil {
			return err
		}
	} else {
		r.OperationId = NewUnionNullString()

		r.OperationId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Verb"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Verb); err != nil {
			return err
		}
	} else {
		r.Verb = NewUnionNullString()

		r.Verb = nil
	}
	return nil
}
