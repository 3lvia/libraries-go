// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100168_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TriggerDto struct {
	B1Name *UnionNullString `json:"B1Name"`

	B2Name *UnionNullString `json:"B2Name"`

	B3Name *UnionNullString `json:"B3Name"`

	ElName *UnionNullString `json:"ElName"`

	Energization *UnionNullArrayUnionNullEnergizationDto `json:"Energization"`

	IncidentDateTime *UnionNullString `json:"IncidentDateTime"`

	Oid *UnionNullString `json:"Oid"`

	TriggerState *UnionNullString `json:"TriggerState"`

	TriggerType *UnionNullString `json:"TriggerType"`
}

const TriggerDtoAvroCRC64Fingerprint = "\xcf\xe9@\xfcX\xda[,"

func NewTriggerDto() TriggerDto {
	r := TriggerDto{}
	r.B1Name = nil
	r.B2Name = nil
	r.B3Name = nil
	r.ElName = nil
	r.Energization = nil
	r.IncidentDateTime = nil
	r.Oid = nil
	r.TriggerState = nil
	r.TriggerType = nil
	return r
}

func DeserializeTriggerDto(r io.Reader) (TriggerDto, error) {
	t := NewTriggerDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTriggerDtoFromSchema(r io.Reader, schema string) (TriggerDto, error) {
	t := NewTriggerDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTriggerDto(r TriggerDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.B1Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.B2Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.B3Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ElName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullEnergizationDto(r.Energization, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.IncidentDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Oid, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TriggerState, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TriggerType, w)
	if err != nil {
		return err
	}
	return err
}

func (r TriggerDto) Serialize(w io.Writer) error {
	return writeTriggerDto(r, w)
}

func (r TriggerDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"B1Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B2Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B3Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ElName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Energization\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"B1Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B2Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B3Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EnergizedTriggerOid\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Oid\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PermanentlyDeenergized\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"RecordOid\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TriggerOid\",\"type\":[\"null\",\"string\"]}],\"name\":\"EnergizationDto\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"IncidentDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Oid\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TriggerState\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TriggerType\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.TriggerDto\",\"type\":\"record\"}"
}

func (r TriggerDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.TriggerDto"
}

func (_ TriggerDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TriggerDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TriggerDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TriggerDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TriggerDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TriggerDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TriggerDto) SetString(v string)   { panic("Unsupported operation") }
func (_ TriggerDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TriggerDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.B1Name = NewUnionNullString()

		return r.B1Name
	case 1:
		r.B2Name = NewUnionNullString()

		return r.B2Name
	case 2:
		r.B3Name = NewUnionNullString()

		return r.B3Name
	case 3:
		r.ElName = NewUnionNullString()

		return r.ElName
	case 4:
		r.Energization = NewUnionNullArrayUnionNullEnergizationDto()

		return r.Energization
	case 5:
		r.IncidentDateTime = NewUnionNullString()

		return r.IncidentDateTime
	case 6:
		r.Oid = NewUnionNullString()

		return r.Oid
	case 7:
		r.TriggerState = NewUnionNullString()

		return r.TriggerState
	case 8:
		r.TriggerType = NewUnionNullString()

		return r.TriggerType
	}
	panic("Unknown field index")
}

func (r *TriggerDto) SetDefault(i int) {
	switch i {
	case 0:
		r.B1Name = nil
		return
	case 1:
		r.B2Name = nil
		return
	case 2:
		r.B3Name = nil
		return
	case 3:
		r.ElName = nil
		return
	case 4:
		r.Energization = nil
		return
	case 5:
		r.IncidentDateTime = nil
		return
	case 6:
		r.Oid = nil
		return
	case 7:
		r.TriggerState = nil
		return
	case 8:
		r.TriggerType = nil
		return
	}
	panic("Unknown field index")
}

func (r *TriggerDto) NullField(i int) {
	switch i {
	case 0:
		r.B1Name = nil
		return
	case 1:
		r.B2Name = nil
		return
	case 2:
		r.B3Name = nil
		return
	case 3:
		r.ElName = nil
		return
	case 4:
		r.Energization = nil
		return
	case 5:
		r.IncidentDateTime = nil
		return
	case 6:
		r.Oid = nil
		return
	case 7:
		r.TriggerState = nil
		return
	case 8:
		r.TriggerType = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TriggerDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TriggerDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TriggerDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ TriggerDto) Finalize()                        {}

func (_ TriggerDto) AvroCRC64Fingerprint() []byte {
	return []byte(TriggerDtoAvroCRC64Fingerprint)
}

func (r TriggerDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["B1Name"], err = json.Marshal(r.B1Name)
	if err != nil {
		return nil, err
	}
	output["B2Name"], err = json.Marshal(r.B2Name)
	if err != nil {
		return nil, err
	}
	output["B3Name"], err = json.Marshal(r.B3Name)
	if err != nil {
		return nil, err
	}
	output["ElName"], err = json.Marshal(r.ElName)
	if err != nil {
		return nil, err
	}
	output["Energization"], err = json.Marshal(r.Energization)
	if err != nil {
		return nil, err
	}
	output["IncidentDateTime"], err = json.Marshal(r.IncidentDateTime)
	if err != nil {
		return nil, err
	}
	output["Oid"], err = json.Marshal(r.Oid)
	if err != nil {
		return nil, err
	}
	output["TriggerState"], err = json.Marshal(r.TriggerState)
	if err != nil {
		return nil, err
	}
	output["TriggerType"], err = json.Marshal(r.TriggerType)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TriggerDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["B1Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B1Name); err != nil {
			return err
		}
	} else {
		r.B1Name = NewUnionNullString()

		r.B1Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["B2Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B2Name); err != nil {
			return err
		}
	} else {
		r.B2Name = NewUnionNullString()

		r.B2Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["B3Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B3Name); err != nil {
			return err
		}
	} else {
		r.B3Name = NewUnionNullString()

		r.B3Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ElName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ElName); err != nil {
			return err
		}
	} else {
		r.ElName = NewUnionNullString()

		r.ElName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Energization"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Energization); err != nil {
			return err
		}
	} else {
		r.Energization = NewUnionNullArrayUnionNullEnergizationDto()

		r.Energization = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IncidentDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IncidentDateTime); err != nil {
			return err
		}
	} else {
		r.IncidentDateTime = NewUnionNullString()

		r.IncidentDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Oid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Oid); err != nil {
			return err
		}
	} else {
		r.Oid = NewUnionNullString()

		r.Oid = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TriggerState"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TriggerState); err != nil {
			return err
		}
	} else {
		r.TriggerState = NewUnionNullString()

		r.TriggerState = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TriggerType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TriggerType); err != nil {
			return err
		}
	} else {
		r.TriggerType = NewUnionNullString()

		r.TriggerType = nil
	}
	return nil
}
