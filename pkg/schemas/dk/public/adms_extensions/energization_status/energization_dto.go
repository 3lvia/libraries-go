// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100168_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EnergizationDto struct {
	B1Name *UnionNullString `json:"B1Name"`

	B2Name *UnionNullString `json:"B2Name"`

	B3Name *UnionNullString `json:"B3Name"`

	EnergizedTriggerOid *UnionNullString `json:"EnergizedTriggerOid"`

	Oid *UnionNullString `json:"Oid"`

	PermanentlyDeenergized *UnionNullBool `json:"PermanentlyDeenergized"`

	RecordOid *UnionNullString `json:"RecordOid"`

	TriggerOid *UnionNullString `json:"TriggerOid"`
}

const EnergizationDtoAvroCRC64Fingerprint = "\u0080\xa2 M\xa24\xfa"

func NewEnergizationDto() EnergizationDto {
	r := EnergizationDto{}
	r.B1Name = nil
	r.B2Name = nil
	r.B3Name = nil
	r.EnergizedTriggerOid = nil
	r.Oid = nil
	r.PermanentlyDeenergized = nil
	r.RecordOid = nil
	r.TriggerOid = nil
	return r
}

func DeserializeEnergizationDto(r io.Reader) (EnergizationDto, error) {
	t := NewEnergizationDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnergizationDtoFromSchema(r io.Reader, schema string) (EnergizationDto, error) {
	t := NewEnergizationDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnergizationDto(r EnergizationDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.B1Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.B2Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.B3Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EnergizedTriggerOid, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Oid, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.PermanentlyDeenergized, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RecordOid, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TriggerOid, w)
	if err != nil {
		return err
	}
	return err
}

func (r EnergizationDto) Serialize(w io.Writer) error {
	return writeEnergizationDto(r, w)
}

func (r EnergizationDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"B1Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B2Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"B3Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EnergizedTriggerOid\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Oid\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PermanentlyDeenergized\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"RecordOid\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TriggerOid\",\"type\":[\"null\",\"string\"]}],\"name\":\"SesamResponseServices.SesamDomainObjects.EnergizationDto\",\"type\":\"record\"}"
}

func (r EnergizationDto) SchemaName() string {
	return "SesamResponseServices.SesamDomainObjects.EnergizationDto"
}

func (_ EnergizationDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EnergizationDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EnergizationDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EnergizationDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EnergizationDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EnergizationDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EnergizationDto) SetString(v string)   { panic("Unsupported operation") }
func (_ EnergizationDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EnergizationDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.B1Name = NewUnionNullString()

		return r.B1Name
	case 1:
		r.B2Name = NewUnionNullString()

		return r.B2Name
	case 2:
		r.B3Name = NewUnionNullString()

		return r.B3Name
	case 3:
		r.EnergizedTriggerOid = NewUnionNullString()

		return r.EnergizedTriggerOid
	case 4:
		r.Oid = NewUnionNullString()

		return r.Oid
	case 5:
		r.PermanentlyDeenergized = NewUnionNullBool()

		return r.PermanentlyDeenergized
	case 6:
		r.RecordOid = NewUnionNullString()

		return r.RecordOid
	case 7:
		r.TriggerOid = NewUnionNullString()

		return r.TriggerOid
	}
	panic("Unknown field index")
}

func (r *EnergizationDto) SetDefault(i int) {
	switch i {
	case 0:
		r.B1Name = nil
		return
	case 1:
		r.B2Name = nil
		return
	case 2:
		r.B3Name = nil
		return
	case 3:
		r.EnergizedTriggerOid = nil
		return
	case 4:
		r.Oid = nil
		return
	case 5:
		r.PermanentlyDeenergized = nil
		return
	case 6:
		r.RecordOid = nil
		return
	case 7:
		r.TriggerOid = nil
		return
	}
	panic("Unknown field index")
}

func (r *EnergizationDto) NullField(i int) {
	switch i {
	case 0:
		r.B1Name = nil
		return
	case 1:
		r.B2Name = nil
		return
	case 2:
		r.B3Name = nil
		return
	case 3:
		r.EnergizedTriggerOid = nil
		return
	case 4:
		r.Oid = nil
		return
	case 5:
		r.PermanentlyDeenergized = nil
		return
	case 6:
		r.RecordOid = nil
		return
	case 7:
		r.TriggerOid = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EnergizationDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EnergizationDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EnergizationDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ EnergizationDto) Finalize()                        {}

func (_ EnergizationDto) AvroCRC64Fingerprint() []byte {
	return []byte(EnergizationDtoAvroCRC64Fingerprint)
}

func (r EnergizationDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["B1Name"], err = json.Marshal(r.B1Name)
	if err != nil {
		return nil, err
	}
	output["B2Name"], err = json.Marshal(r.B2Name)
	if err != nil {
		return nil, err
	}
	output["B3Name"], err = json.Marshal(r.B3Name)
	if err != nil {
		return nil, err
	}
	output["EnergizedTriggerOid"], err = json.Marshal(r.EnergizedTriggerOid)
	if err != nil {
		return nil, err
	}
	output["Oid"], err = json.Marshal(r.Oid)
	if err != nil {
		return nil, err
	}
	output["PermanentlyDeenergized"], err = json.Marshal(r.PermanentlyDeenergized)
	if err != nil {
		return nil, err
	}
	output["RecordOid"], err = json.Marshal(r.RecordOid)
	if err != nil {
		return nil, err
	}
	output["TriggerOid"], err = json.Marshal(r.TriggerOid)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EnergizationDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["B1Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B1Name); err != nil {
			return err
		}
	} else {
		r.B1Name = NewUnionNullString()

		r.B1Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["B2Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B2Name); err != nil {
			return err
		}
	} else {
		r.B2Name = NewUnionNullString()

		r.B2Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["B3Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.B3Name); err != nil {
			return err
		}
	} else {
		r.B3Name = NewUnionNullString()

		r.B3Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EnergizedTriggerOid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnergizedTriggerOid); err != nil {
			return err
		}
	} else {
		r.EnergizedTriggerOid = NewUnionNullString()

		r.EnergizedTriggerOid = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Oid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Oid); err != nil {
			return err
		}
	} else {
		r.Oid = NewUnionNullString()

		r.Oid = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PermanentlyDeenergized"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PermanentlyDeenergized); err != nil {
			return err
		}
	} else {
		r.PermanentlyDeenergized = NewUnionNullBool()

		r.PermanentlyDeenergized = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RecordOid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecordOid); err != nil {
			return err
		}
	} else {
		r.RecordOid = NewUnionNullString()

		r.RecordOid = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TriggerOid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TriggerOid); err != nil {
			return err
		}
	} else {
		r.TriggerOid = NewUnionNullString()

		r.TriggerOid = nil
	}
	return nil
}
