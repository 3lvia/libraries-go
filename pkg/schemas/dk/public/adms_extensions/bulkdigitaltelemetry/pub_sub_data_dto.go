// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100361_4.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PubSubDataDto struct {
	Bucket *UnionNullString `json:"bucket"`

	ContentType *UnionNullString `json:"contentType"`

	Id *UnionNullString `json:"id"`

	MediaLink *UnionNullString `json:"mediaLink"`

	Name *UnionNullString `json:"name"`

	Size *UnionNullString `json:"size"`

	TimeCreated *UnionNullString `json:"timeCreated"`

	Updated *UnionNullString `json:"updated"`
}

const PubSubDataDtoAvroCRC64Fingerprint = "\x81k_\xca\x12z\x7fN"

func NewPubSubDataDto() PubSubDataDto {
	r := PubSubDataDto{}
	r.Bucket = nil
	r.ContentType = nil
	r.Id = nil
	r.MediaLink = nil
	r.Name = nil
	r.Size = nil
	r.TimeCreated = nil
	r.Updated = nil
	return r
}

func DeserializePubSubDataDto(r io.Reader) (PubSubDataDto, error) {
	t := NewPubSubDataDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePubSubDataDtoFromSchema(r io.Reader, schema string) (PubSubDataDto, error) {
	t := NewPubSubDataDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePubSubDataDto(r PubSubDataDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Bucket, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ContentType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MediaLink, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Size, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TimeCreated, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Updated, w)
	if err != nil {
		return err
	}
	return err
}

func (r PubSubDataDto) Serialize(w io.Writer) error {
	return writePubSubDataDto(r, w)
}

func (r PubSubDataDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"bucket\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"contentType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"mediaLink\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"size\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"timeCreated\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"updated\",\"type\":[\"null\",\"string\"]}],\"name\":\"SafFileHandler.MessageHandler.PubSubDataDto\",\"type\":\"record\"}"
}

func (r PubSubDataDto) SchemaName() string {
	return "SafFileHandler.MessageHandler.PubSubDataDto"
}

func (_ PubSubDataDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PubSubDataDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PubSubDataDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PubSubDataDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PubSubDataDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PubSubDataDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PubSubDataDto) SetString(v string)   { panic("Unsupported operation") }
func (_ PubSubDataDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PubSubDataDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.Bucket = NewUnionNullString()

		return r.Bucket
	case 1:
		r.ContentType = NewUnionNullString()

		return r.ContentType
	case 2:
		r.Id = NewUnionNullString()

		return r.Id
	case 3:
		r.MediaLink = NewUnionNullString()

		return r.MediaLink
	case 4:
		r.Name = NewUnionNullString()

		return r.Name
	case 5:
		r.Size = NewUnionNullString()

		return r.Size
	case 6:
		r.TimeCreated = NewUnionNullString()

		return r.TimeCreated
	case 7:
		r.Updated = NewUnionNullString()

		return r.Updated
	}
	panic("Unknown field index")
}

func (r *PubSubDataDto) SetDefault(i int) {
	switch i {
	case 0:
		r.Bucket = nil
		return
	case 1:
		r.ContentType = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.MediaLink = nil
		return
	case 4:
		r.Name = nil
		return
	case 5:
		r.Size = nil
		return
	case 6:
		r.TimeCreated = nil
		return
	case 7:
		r.Updated = nil
		return
	}
	panic("Unknown field index")
}

func (r *PubSubDataDto) NullField(i int) {
	switch i {
	case 0:
		r.Bucket = nil
		return
	case 1:
		r.ContentType = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.MediaLink = nil
		return
	case 4:
		r.Name = nil
		return
	case 5:
		r.Size = nil
		return
	case 6:
		r.TimeCreated = nil
		return
	case 7:
		r.Updated = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ PubSubDataDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PubSubDataDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PubSubDataDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ PubSubDataDto) Finalize()                        {}

func (_ PubSubDataDto) AvroCRC64Fingerprint() []byte {
	return []byte(PubSubDataDtoAvroCRC64Fingerprint)
}

func (r PubSubDataDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["bucket"], err = json.Marshal(r.Bucket)
	if err != nil {
		return nil, err
	}
	output["contentType"], err = json.Marshal(r.ContentType)
	if err != nil {
		return nil, err
	}
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["mediaLink"], err = json.Marshal(r.MediaLink)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["size"], err = json.Marshal(r.Size)
	if err != nil {
		return nil, err
	}
	output["timeCreated"], err = json.Marshal(r.TimeCreated)
	if err != nil {
		return nil, err
	}
	output["updated"], err = json.Marshal(r.Updated)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PubSubDataDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["bucket"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Bucket); err != nil {
			return err
		}
	} else {
		r.Bucket = NewUnionNullString()

		r.Bucket = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["contentType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContentType); err != nil {
			return err
		}
	} else {
		r.ContentType = NewUnionNullString()

		r.ContentType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["mediaLink"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MediaLink); err != nil {
			return err
		}
	} else {
		r.MediaLink = NewUnionNullString()

		r.MediaLink = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["size"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Size); err != nil {
			return err
		}
	} else {
		r.Size = NewUnionNullString()

		r.Size = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["timeCreated"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TimeCreated); err != nil {
			return err
		}
	} else {
		r.TimeCreated = NewUnionNullString()

		r.TimeCreated = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["updated"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Updated); err != nil {
			return err
		}
	} else {
		r.Updated = NewUnionNullString()

		r.Updated = nil
	}
	return nil
}
