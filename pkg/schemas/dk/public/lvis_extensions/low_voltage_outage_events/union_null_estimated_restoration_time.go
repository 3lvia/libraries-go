// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100458_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullEstimatedRestorationTimeTypeEnum int

const (
	UnionNullEstimatedRestorationTimeTypeEnumEstimatedRestorationTime UnionNullEstimatedRestorationTimeTypeEnum = 1
)

type UnionNullEstimatedRestorationTime struct {
	Null                     *types.NullVal
	EstimatedRestorationTime EstimatedRestorationTime
	UnionType                UnionNullEstimatedRestorationTimeTypeEnum
}

func writeUnionNullEstimatedRestorationTime(r *UnionNullEstimatedRestorationTime, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullEstimatedRestorationTimeTypeEnumEstimatedRestorationTime:
		return writeEstimatedRestorationTime(r.EstimatedRestorationTime, w)
	}
	return fmt.Errorf("invalid value for *UnionNullEstimatedRestorationTime")
}

func NewUnionNullEstimatedRestorationTime() *UnionNullEstimatedRestorationTime {
	return &UnionNullEstimatedRestorationTime{}
}

func (r *UnionNullEstimatedRestorationTime) Serialize(w io.Writer) error {
	return writeUnionNullEstimatedRestorationTime(r, w)
}

func DeserializeUnionNullEstimatedRestorationTime(r io.Reader) (*UnionNullEstimatedRestorationTime, error) {
	t := NewUnionNullEstimatedRestorationTime()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullEstimatedRestorationTimeFromSchema(r io.Reader, schema string) (*UnionNullEstimatedRestorationTime, error) {
	t := NewUnionNullEstimatedRestorationTime()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullEstimatedRestorationTime) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ert\",\"type\":[\"null\",\"string\"]}],\"name\":\"EstimatedRestorationTime\",\"type\":\"record\"}]"
}

func (_ *UnionNullEstimatedRestorationTime) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullEstimatedRestorationTime) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullEstimatedRestorationTime) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullEstimatedRestorationTime) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullEstimatedRestorationTime) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullEstimatedRestorationTime) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullEstimatedRestorationTime) SetLong(v int64) {

	r.UnionType = (UnionNullEstimatedRestorationTimeTypeEnum)(v)
}

func (r *UnionNullEstimatedRestorationTime) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.EstimatedRestorationTime = NewEstimatedRestorationTime()
		return &types.Record{Target: (&r.EstimatedRestorationTime)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullEstimatedRestorationTime) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullEstimatedRestorationTime) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullEstimatedRestorationTime) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullEstimatedRestorationTime) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullEstimatedRestorationTime) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullEstimatedRestorationTime) Finalize()                {}

func (r *UnionNullEstimatedRestorationTime) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullEstimatedRestorationTimeTypeEnumEstimatedRestorationTime:
		return json.Marshal(map[string]interface{}{"LowVoltageOutageEventsLvisToElvia.Kafka.Dto.EstimatedRestorationTime": r.EstimatedRestorationTime})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullEstimatedRestorationTime")
}

func (r *UnionNullEstimatedRestorationTime) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["LowVoltageOutageEventsLvisToElvia.Kafka.Dto.EstimatedRestorationTime"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.EstimatedRestorationTime)
	}
	return fmt.Errorf("invalid value for *UnionNullEstimatedRestorationTime")
}
