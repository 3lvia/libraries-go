// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100458_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Data struct {
	ActualPeriod *UnionNullActualPeriod `json:"actualPeriod"`

	Cause *UnionNullString `json:"cause"`

	CauseKind *UnionNullString `json:"causeKind"`

	Comment *UnionNullString `json:"comment"`

	CreatedDateTime *UnionNullString `json:"createdDateTime"`

	DeEnergizedUsagePoint *UnionNullArrayUnionNullDeEnergizedUsagePoint `json:"deEnergizedUsagePoint"`

	Description *UnionNullString `json:"description"`

	EnergizedUsagePoint *UnionNullArrayUnionNullEnergizedUsagePoint `json:"energizedUsagePoint"`

	EstimatedRestorationTime *UnionNullEstimatedRestorationTime `json:"estimatedRestorationTime"`

	LastModifiedDateTime *UnionNullString `json:"lastModifiedDateTime"`

	MetersAffected int32 `json:"metersAffected"`

	Mrid *UnionNullString `json:"mrid"`

	OriginalMetersAffected int32 `json:"originalMetersAffected"`

	OutageKind *UnionNullString `json:"outageKind"`

	Summary *UnionNullSummary `json:"summary"`
}

const DataAvroCRC64Fingerprint = "I\xae\xe5\xfbqE\xda\xe1"

func NewData() Data {
	r := Data{}
	r.ActualPeriod = nil
	r.Cause = nil
	r.CauseKind = nil
	r.Comment = nil
	r.CreatedDateTime = nil
	r.DeEnergizedUsagePoint = nil
	r.Description = nil
	r.EnergizedUsagePoint = nil
	r.EstimatedRestorationTime = nil
	r.LastModifiedDateTime = nil
	r.Mrid = nil
	r.OutageKind = nil
	r.Summary = nil
	return r
}

func DeserializeData(r io.Reader) (Data, error) {
	t := NewData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDataFromSchema(r io.Reader, schema string) (Data, error) {
	t := NewData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeData(r Data, w io.Writer) error {
	var err error
	err = writeUnionNullActualPeriod(r.ActualPeriod, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cause, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CauseKind, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Comment, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CreatedDateTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullDeEnergizedUsagePoint(r.DeEnergizedUsagePoint, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullEnergizedUsagePoint(r.EnergizedUsagePoint, w)
	if err != nil {
		return err
	}
	err = writeUnionNullEstimatedRestorationTime(r.EstimatedRestorationTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LastModifiedDateTime, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.MetersAffected, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Mrid, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.OriginalMetersAffected, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OutageKind, w)
	if err != nil {
		return err
	}
	err = writeUnionNullSummary(r.Summary, w)
	if err != nil {
		return err
	}
	return err
}

func (r Data) Serialize(w io.Writer) error {
	return writeData(r, w)
}

func (r Data) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"actualPeriod\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"end\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"start\",\"type\":[\"null\",\"string\"]}],\"name\":\"ActualPeriod\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"cause\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"causeKind\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"comment\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"createdDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"deEnergizedUsagePoint\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"mrid\",\"type\":[\"null\",\"string\"]}],\"name\":\"DeEnergizedUsagePoint\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"energizedUsagePoint\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"mrid\",\"type\":[\"null\",\"string\"]}],\"name\":\"EnergizedUsagePoint\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"estimatedRestorationTime\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ert\",\"type\":[\"null\",\"string\"]}],\"name\":\"EstimatedRestorationTime\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"lastModifiedDateTime\",\"type\":[\"null\",\"string\"]},{\"name\":\"metersAffected\",\"type\":\"int\"},{\"default\":null,\"name\":\"mrid\",\"type\":[\"null\",\"string\"]},{\"name\":\"originalMetersAffected\",\"type\":\"int\"},{\"default\":null,\"name\":\"outageKind\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"summary\",\"type\":[\"null\",{\"fields\":[{\"name\":\"criticalCount\",\"type\":\"int\"},{\"name\":\"totalCount\",\"type\":\"int\"}],\"name\":\"Summary\",\"type\":\"record\"}]}],\"name\":\"LowVoltageOutageEventsLvisToElvia.Kafka.Dto.Data\",\"type\":\"record\"}"
}

func (r Data) SchemaName() string {
	return "LowVoltageOutageEventsLvisToElvia.Kafka.Dto.Data"
}

func (_ Data) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Data) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Data) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Data) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Data) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Data) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Data) SetString(v string)   { panic("Unsupported operation") }
func (_ Data) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Data) Get(i int) types.Field {
	switch i {
	case 0:
		r.ActualPeriod = NewUnionNullActualPeriod()

		return r.ActualPeriod
	case 1:
		r.Cause = NewUnionNullString()

		return r.Cause
	case 2:
		r.CauseKind = NewUnionNullString()

		return r.CauseKind
	case 3:
		r.Comment = NewUnionNullString()

		return r.Comment
	case 4:
		r.CreatedDateTime = NewUnionNullString()

		return r.CreatedDateTime
	case 5:
		r.DeEnergizedUsagePoint = NewUnionNullArrayUnionNullDeEnergizedUsagePoint()

		return r.DeEnergizedUsagePoint
	case 6:
		r.Description = NewUnionNullString()

		return r.Description
	case 7:
		r.EnergizedUsagePoint = NewUnionNullArrayUnionNullEnergizedUsagePoint()

		return r.EnergizedUsagePoint
	case 8:
		r.EstimatedRestorationTime = NewUnionNullEstimatedRestorationTime()

		return r.EstimatedRestorationTime
	case 9:
		r.LastModifiedDateTime = NewUnionNullString()

		return r.LastModifiedDateTime
	case 10:
		w := types.Int{Target: &r.MetersAffected}

		return w

	case 11:
		r.Mrid = NewUnionNullString()

		return r.Mrid
	case 12:
		w := types.Int{Target: &r.OriginalMetersAffected}

		return w

	case 13:
		r.OutageKind = NewUnionNullString()

		return r.OutageKind
	case 14:
		r.Summary = NewUnionNullSummary()

		return r.Summary
	}
	panic("Unknown field index")
}

func (r *Data) SetDefault(i int) {
	switch i {
	case 0:
		r.ActualPeriod = nil
		return
	case 1:
		r.Cause = nil
		return
	case 2:
		r.CauseKind = nil
		return
	case 3:
		r.Comment = nil
		return
	case 4:
		r.CreatedDateTime = nil
		return
	case 5:
		r.DeEnergizedUsagePoint = nil
		return
	case 6:
		r.Description = nil
		return
	case 7:
		r.EnergizedUsagePoint = nil
		return
	case 8:
		r.EstimatedRestorationTime = nil
		return
	case 9:
		r.LastModifiedDateTime = nil
		return
	case 11:
		r.Mrid = nil
		return
	case 13:
		r.OutageKind = nil
		return
	case 14:
		r.Summary = nil
		return
	}
	panic("Unknown field index")
}

func (r *Data) NullField(i int) {
	switch i {
	case 0:
		r.ActualPeriod = nil
		return
	case 1:
		r.Cause = nil
		return
	case 2:
		r.CauseKind = nil
		return
	case 3:
		r.Comment = nil
		return
	case 4:
		r.CreatedDateTime = nil
		return
	case 5:
		r.DeEnergizedUsagePoint = nil
		return
	case 6:
		r.Description = nil
		return
	case 7:
		r.EnergizedUsagePoint = nil
		return
	case 8:
		r.EstimatedRestorationTime = nil
		return
	case 9:
		r.LastModifiedDateTime = nil
		return
	case 11:
		r.Mrid = nil
		return
	case 13:
		r.OutageKind = nil
		return
	case 14:
		r.Summary = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Data) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Data) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Data) HintSize(int)                     { panic("Unsupported operation") }
func (_ Data) Finalize()                        {}

func (_ Data) AvroCRC64Fingerprint() []byte {
	return []byte(DataAvroCRC64Fingerprint)
}

func (r Data) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["actualPeriod"], err = json.Marshal(r.ActualPeriod)
	if err != nil {
		return nil, err
	}
	output["cause"], err = json.Marshal(r.Cause)
	if err != nil {
		return nil, err
	}
	output["causeKind"], err = json.Marshal(r.CauseKind)
	if err != nil {
		return nil, err
	}
	output["comment"], err = json.Marshal(r.Comment)
	if err != nil {
		return nil, err
	}
	output["createdDateTime"], err = json.Marshal(r.CreatedDateTime)
	if err != nil {
		return nil, err
	}
	output["deEnergizedUsagePoint"], err = json.Marshal(r.DeEnergizedUsagePoint)
	if err != nil {
		return nil, err
	}
	output["description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["energizedUsagePoint"], err = json.Marshal(r.EnergizedUsagePoint)
	if err != nil {
		return nil, err
	}
	output["estimatedRestorationTime"], err = json.Marshal(r.EstimatedRestorationTime)
	if err != nil {
		return nil, err
	}
	output["lastModifiedDateTime"], err = json.Marshal(r.LastModifiedDateTime)
	if err != nil {
		return nil, err
	}
	output["metersAffected"], err = json.Marshal(r.MetersAffected)
	if err != nil {
		return nil, err
	}
	output["mrid"], err = json.Marshal(r.Mrid)
	if err != nil {
		return nil, err
	}
	output["originalMetersAffected"], err = json.Marshal(r.OriginalMetersAffected)
	if err != nil {
		return nil, err
	}
	output["outageKind"], err = json.Marshal(r.OutageKind)
	if err != nil {
		return nil, err
	}
	output["summary"], err = json.Marshal(r.Summary)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Data) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["actualPeriod"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ActualPeriod); err != nil {
			return err
		}
	} else {
		r.ActualPeriod = NewUnionNullActualPeriod()

		r.ActualPeriod = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["cause"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cause); err != nil {
			return err
		}
	} else {
		r.Cause = NewUnionNullString()

		r.Cause = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["causeKind"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CauseKind); err != nil {
			return err
		}
	} else {
		r.CauseKind = NewUnionNullString()

		r.CauseKind = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["comment"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Comment); err != nil {
			return err
		}
	} else {
		r.Comment = NewUnionNullString()

		r.Comment = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["createdDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedDateTime); err != nil {
			return err
		}
	} else {
		r.CreatedDateTime = NewUnionNullString()

		r.CreatedDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["deEnergizedUsagePoint"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DeEnergizedUsagePoint); err != nil {
			return err
		}
	} else {
		r.DeEnergizedUsagePoint = NewUnionNullArrayUnionNullDeEnergizedUsagePoint()

		r.DeEnergizedUsagePoint = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["energizedUsagePoint"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnergizedUsagePoint); err != nil {
			return err
		}
	} else {
		r.EnergizedUsagePoint = NewUnionNullArrayUnionNullEnergizedUsagePoint()

		r.EnergizedUsagePoint = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["estimatedRestorationTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstimatedRestorationTime); err != nil {
			return err
		}
	} else {
		r.EstimatedRestorationTime = NewUnionNullEstimatedRestorationTime()

		r.EstimatedRestorationTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["lastModifiedDateTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastModifiedDateTime); err != nil {
			return err
		}
	} else {
		r.LastModifiedDateTime = NewUnionNullString()

		r.LastModifiedDateTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["metersAffected"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MetersAffected); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for metersAffected")
	}
	val = func() json.RawMessage {
		if v, ok := fields["mrid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mrid); err != nil {
			return err
		}
	} else {
		r.Mrid = NewUnionNullString()

		r.Mrid = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["originalMetersAffected"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OriginalMetersAffected); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for originalMetersAffected")
	}
	val = func() json.RawMessage {
		if v, ok := fields["outageKind"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OutageKind); err != nil {
			return err
		}
	} else {
		r.OutageKind = NewUnionNullString()

		r.OutageKind = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["summary"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Summary); err != nil {
			return err
		}
	} else {
		r.Summary = NewUnionNullSummary()

		r.Summary = nil
	}
	return nil
}
