// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100458_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OutageEventResponse struct {
	Data *UnionNullData `json:"data"`

	Datacontenttype *UnionNullString `json:"datacontenttype"`

	Dataschema *UnionNullString `json:"dataschema"`

	Id *UnionNullString `json:"id"`

	Source *UnionNullString `json:"source"`

	Specversion *UnionNullString `json:"specversion"`

	Subject *UnionNullString `json:"subject"`

	Time *UnionNullString `json:"time"`

	Type *UnionNullString `json:"type"`
}

const OutageEventResponseAvroCRC64Fingerprint = "Q\xab\xb5\x81\xe2u\x9f0"

func NewOutageEventResponse() OutageEventResponse {
	r := OutageEventResponse{}
	r.Data = nil
	r.Datacontenttype = nil
	r.Dataschema = nil
	r.Id = nil
	r.Source = nil
	r.Specversion = nil
	r.Subject = nil
	r.Time = nil
	r.Type = nil
	return r
}

func DeserializeOutageEventResponse(r io.Reader) (OutageEventResponse, error) {
	t := NewOutageEventResponse()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOutageEventResponseFromSchema(r io.Reader, schema string) (OutageEventResponse, error) {
	t := NewOutageEventResponse()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOutageEventResponse(r OutageEventResponse, w io.Writer) error {
	var err error
	err = writeUnionNullData(r.Data, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Datacontenttype, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Dataschema, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Source, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Specversion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Subject, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Time, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Type, w)
	if err != nil {
		return err
	}
	return err
}

func (r OutageEventResponse) Serialize(w io.Writer) error {
	return writeOutageEventResponse(r, w)
}

func (r OutageEventResponse) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"data\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"actualPeriod\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"end\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"start\",\"type\":[\"null\",\"string\"]}],\"name\":\"ActualPeriod\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"cause\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"causeKind\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"comment\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"createdDateTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"deEnergizedUsagePoint\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"mrid\",\"type\":[\"null\",\"string\"]}],\"name\":\"DeEnergizedUsagePoint\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"energizedUsagePoint\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"mrid\",\"type\":[\"null\",\"string\"]}],\"name\":\"EnergizedUsagePoint\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"estimatedRestorationTime\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ert\",\"type\":[\"null\",\"string\"]}],\"name\":\"EstimatedRestorationTime\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"lastModifiedDateTime\",\"type\":[\"null\",\"string\"]},{\"name\":\"metersAffected\",\"type\":\"int\"},{\"default\":null,\"name\":\"mrid\",\"type\":[\"null\",\"string\"]},{\"name\":\"originalMetersAffected\",\"type\":\"int\"},{\"default\":null,\"name\":\"outageKind\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"summary\",\"type\":[\"null\",{\"fields\":[{\"name\":\"criticalCount\",\"type\":\"int\"},{\"name\":\"totalCount\",\"type\":\"int\"}],\"name\":\"Summary\",\"type\":\"record\"}]}],\"name\":\"Data\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"datacontenttype\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"dataschema\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"source\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"specversion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"subject\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"time\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"type\",\"type\":[\"null\",\"string\"]}],\"name\":\"LowVoltageOutageEventsLvisToElvia.Kafka.Dto.OutageEventResponse\",\"type\":\"record\"}"
}

func (r OutageEventResponse) SchemaName() string {
	return "LowVoltageOutageEventsLvisToElvia.Kafka.Dto.OutageEventResponse"
}

func (_ OutageEventResponse) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OutageEventResponse) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OutageEventResponse) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OutageEventResponse) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OutageEventResponse) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OutageEventResponse) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OutageEventResponse) SetString(v string)   { panic("Unsupported operation") }
func (_ OutageEventResponse) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OutageEventResponse) Get(i int) types.Field {
	switch i {
	case 0:
		r.Data = NewUnionNullData()

		return r.Data
	case 1:
		r.Datacontenttype = NewUnionNullString()

		return r.Datacontenttype
	case 2:
		r.Dataschema = NewUnionNullString()

		return r.Dataschema
	case 3:
		r.Id = NewUnionNullString()

		return r.Id
	case 4:
		r.Source = NewUnionNullString()

		return r.Source
	case 5:
		r.Specversion = NewUnionNullString()

		return r.Specversion
	case 6:
		r.Subject = NewUnionNullString()

		return r.Subject
	case 7:
		r.Time = NewUnionNullString()

		return r.Time
	case 8:
		r.Type = NewUnionNullString()

		return r.Type
	}
	panic("Unknown field index")
}

func (r *OutageEventResponse) SetDefault(i int) {
	switch i {
	case 0:
		r.Data = nil
		return
	case 1:
		r.Datacontenttype = nil
		return
	case 2:
		r.Dataschema = nil
		return
	case 3:
		r.Id = nil
		return
	case 4:
		r.Source = nil
		return
	case 5:
		r.Specversion = nil
		return
	case 6:
		r.Subject = nil
		return
	case 7:
		r.Time = nil
		return
	case 8:
		r.Type = nil
		return
	}
	panic("Unknown field index")
}

func (r *OutageEventResponse) NullField(i int) {
	switch i {
	case 0:
		r.Data = nil
		return
	case 1:
		r.Datacontenttype = nil
		return
	case 2:
		r.Dataschema = nil
		return
	case 3:
		r.Id = nil
		return
	case 4:
		r.Source = nil
		return
	case 5:
		r.Specversion = nil
		return
	case 6:
		r.Subject = nil
		return
	case 7:
		r.Time = nil
		return
	case 8:
		r.Type = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ OutageEventResponse) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OutageEventResponse) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OutageEventResponse) HintSize(int)                     { panic("Unsupported operation") }
func (_ OutageEventResponse) Finalize()                        {}

func (_ OutageEventResponse) AvroCRC64Fingerprint() []byte {
	return []byte(OutageEventResponseAvroCRC64Fingerprint)
}

func (r OutageEventResponse) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["data"], err = json.Marshal(r.Data)
	if err != nil {
		return nil, err
	}
	output["datacontenttype"], err = json.Marshal(r.Datacontenttype)
	if err != nil {
		return nil, err
	}
	output["dataschema"], err = json.Marshal(r.Dataschema)
	if err != nil {
		return nil, err
	}
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["source"], err = json.Marshal(r.Source)
	if err != nil {
		return nil, err
	}
	output["specversion"], err = json.Marshal(r.Specversion)
	if err != nil {
		return nil, err
	}
	output["subject"], err = json.Marshal(r.Subject)
	if err != nil {
		return nil, err
	}
	output["time"], err = json.Marshal(r.Time)
	if err != nil {
		return nil, err
	}
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OutageEventResponse) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["data"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Data); err != nil {
			return err
		}
	} else {
		r.Data = NewUnionNullData()

		r.Data = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["datacontenttype"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Datacontenttype); err != nil {
			return err
		}
	} else {
		r.Datacontenttype = NewUnionNullString()

		r.Datacontenttype = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["dataschema"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Dataschema); err != nil {
			return err
		}
	} else {
		r.Dataschema = NewUnionNullString()

		r.Dataschema = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["source"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Source); err != nil {
			return err
		}
	} else {
		r.Source = NewUnionNullString()

		r.Source = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["specversion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Specversion); err != nil {
			return err
		}
	} else {
		r.Specversion = NewUnionNullString()

		r.Specversion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["subject"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Subject); err != nil {
			return err
		}
	} else {
		r.Subject = NewUnionNullString()

		r.Subject = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["time"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Time); err != nil {
			return err
		}
	} else {
		r.Time = NewUnionNullString()

		r.Time = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		r.Type = NewUnionNullString()

		r.Type = nil
	}
	return nil
}
