// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100044_dp_examples-value.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Person struct {
	// ID of the person. This is a mandatory field
	Id string `json:"Id"`
	// Name of the person. This is an optional field
	Name *UnionNullString `json:"Name"`
	// List of cars. It is optional
	Cars *UnionNullArrayCar `json:"Cars"`
	// List of houses. It is mandatory, but can be empty.
	Houses []House `json:"Houses"`
}

const PersonAvroCRC64Fingerprint = "\xeez\x13\xa3O\xb0\xc5\xfc"

func NewPerson() Person {
	r := Person{}
	r.Name = nil
	r.Cars = nil
	r.Houses = make([]House, 0)

	return r
}

func DeserializePerson(r io.Reader) (Person, error) {
	t := NewPerson()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePersonFromSchema(r io.Reader, schema string) (Person, error) {
	t := NewPerson()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePerson(r Person, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayCar(r.Cars, w)
	if err != nil {
		return err
	}
	err = writeArrayHouse(r.Houses, w)
	if err != nil {
		return err
	}
	return err
}

func (r Person) Serialize(w io.Writer) error {
	return writePerson(r, w)
}

func (r Person) Schema() string {
	return "{\"fields\":[{\"doc\":\"ID of the person. This is a mandatory field\",\"name\":\"Id\",\"type\":\"string\"},{\"default\":null,\"doc\":\"Name of the person. This is an optional field\",\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"doc\":\"List of cars. It is optional\",\"name\":\"Cars\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"name\":\"model\",\"type\":\"string\"},{\"default\":null,\"doc\":\"Enum of gearbox choices. It is optional\",\"name\":\"Gearbox\",\"type\":[\"null\",{\"name\":\"Gearbox\",\"symbols\":[\"Automatic\",\"Manual\"],\"type\":\"enum\"}]},{\"default\":null,\"doc\":\"Color of the car. This is an optional string\",\"name\":\"Color\",\"type\":[\"null\",\"string\"]}],\"name\":\"Car\",\"type\":\"record\"},\"type\":\"array\"}]},{\"doc\":\"List of houses. It is mandatory, but can be empty.\",\"name\":\"Houses\",\"type\":{\"items\":{\"fields\":[{\"doc\":\"This is mandatory\",\"name\":\"Address\",\"type\":\"string\"},{\"doc\":\"This is an enum. It is mandatory\",\"name\":\"Buildingtype\",\"type\":{\"name\":\"Buildingtype\",\"symbols\":[\"House\",\"Apartment\",\"Cabin\",\"Other\"],\"type\":\"enum\"}},{\"default\":null,\"doc\":\"This is optional\",\"name\":\"Color\",\"type\":[\"null\",\"string\"]}],\"name\":\"House\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"dp.demoapp.Person\",\"type\":\"record\"}"
}

func (r Person) SchemaName() string {
	return "dp.demoapp.Person"
}

func (_ Person) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Person) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Person) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Person) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Person) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Person) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Person) SetString(v string)   { panic("Unsupported operation") }
func (_ Person) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Person) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		r.Name = NewUnionNullString()

		return r.Name
	case 2:
		r.Cars = NewUnionNullArrayCar()

		return r.Cars
	case 3:
		r.Houses = make([]House, 0)

		w := ArrayHouseWrapper{Target: &r.Houses}

		return w

	}
	panic("Unknown field index")
}

func (r *Person) SetDefault(i int) {
	switch i {
	case 1:
		r.Name = nil
		return
	case 2:
		r.Cars = nil
		return
	}
	panic("Unknown field index")
}

func (r *Person) NullField(i int) {
	switch i {
	case 1:
		r.Name = nil
		return
	case 2:
		r.Cars = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Person) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Person) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Person) HintSize(int)                     { panic("Unsupported operation") }
func (_ Person) Finalize()                        {}

func (_ Person) AvroCRC64Fingerprint() []byte {
	return []byte(PersonAvroCRC64Fingerprint)
}

func (r Person) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Cars"], err = json.Marshal(r.Cars)
	if err != nil {
		return nil, err
	}
	output["Houses"], err = json.Marshal(r.Houses)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Person) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Cars"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Cars); err != nil {
			return err
		}
	} else {
		r.Cars = NewUnionNullArrayCar()

		r.Cars = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Houses"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Houses); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Houses")
	}
	return nil
}
