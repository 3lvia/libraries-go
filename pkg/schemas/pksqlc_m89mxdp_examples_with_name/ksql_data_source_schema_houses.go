// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100062_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type KsqlDataSourceSchema_HOUSES struct {
	ADDRESS *UnionNullString `json:"ADDRESS"`

	BUILDINGTYPE *UnionNullString `json:"BUILDINGTYPE"`

	COLOR *UnionNullString `json:"COLOR"`
}

const KsqlDataSourceSchema_HOUSESAvroCRC64Fingerprint = ":C\xe7Õ­\xa1\x81\xe6"

func NewKsqlDataSourceSchema_HOUSES() KsqlDataSourceSchema_HOUSES {
	r := KsqlDataSourceSchema_HOUSES{}
	r.ADDRESS = nil
	r.BUILDINGTYPE = nil
	r.COLOR = nil
	return r
}

func DeserializeKsqlDataSourceSchema_HOUSES(r io.Reader) (KsqlDataSourceSchema_HOUSES, error) {
	t := NewKsqlDataSourceSchema_HOUSES()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeKsqlDataSourceSchema_HOUSESFromSchema(r io.Reader, schema string) (KsqlDataSourceSchema_HOUSES, error) {
	t := NewKsqlDataSourceSchema_HOUSES()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeKsqlDataSourceSchema_HOUSES(r KsqlDataSourceSchema_HOUSES, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ADDRESS, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.BUILDINGTYPE, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.COLOR, w)
	if err != nil {
		return err
	}
	return err
}

func (r KsqlDataSourceSchema_HOUSES) Serialize(w io.Writer) error {
	return writeKsqlDataSourceSchema_HOUSES(r, w)
}

func (r KsqlDataSourceSchema_HOUSES) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ADDRESS\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"BUILDINGTYPE\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"COLOR\",\"type\":[\"null\",\"string\"]}],\"name\":\"io.confluent.ksql.avro_schemas.KsqlDataSourceSchema_HOUSES\",\"type\":\"record\"}"
}

func (r KsqlDataSourceSchema_HOUSES) SchemaName() string {
	return "io.confluent.ksql.avro_schemas.KsqlDataSourceSchema_HOUSES"
}

func (_ KsqlDataSourceSchema_HOUSES) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_HOUSES) SetInt(v int32)       { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_HOUSES) SetLong(v int64)      { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_HOUSES) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_HOUSES) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_HOUSES) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_HOUSES) SetString(v string)   { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_HOUSES) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *KsqlDataSourceSchema_HOUSES) Get(i int) types.Field {
	switch i {
	case 0:
		r.ADDRESS = NewUnionNullString()

		return r.ADDRESS
	case 1:
		r.BUILDINGTYPE = NewUnionNullString()

		return r.BUILDINGTYPE
	case 2:
		r.COLOR = NewUnionNullString()

		return r.COLOR
	}
	panic("Unknown field index")
}

func (r *KsqlDataSourceSchema_HOUSES) SetDefault(i int) {
	switch i {
	case 0:
		r.ADDRESS = nil
		return
	case 1:
		r.BUILDINGTYPE = nil
		return
	case 2:
		r.COLOR = nil
		return
	}
	panic("Unknown field index")
}

func (r *KsqlDataSourceSchema_HOUSES) NullField(i int) {
	switch i {
	case 0:
		r.ADDRESS = nil
		return
	case 1:
		r.BUILDINGTYPE = nil
		return
	case 2:
		r.COLOR = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ KsqlDataSourceSchema_HOUSES) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ KsqlDataSourceSchema_HOUSES) AppendArray() types.Field { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_HOUSES) HintSize(int)             { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_HOUSES) Finalize()                {}

func (_ KsqlDataSourceSchema_HOUSES) AvroCRC64Fingerprint() []byte {
	return []byte(KsqlDataSourceSchema_HOUSESAvroCRC64Fingerprint)
}

func (r KsqlDataSourceSchema_HOUSES) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ADDRESS"], err = json.Marshal(r.ADDRESS)
	if err != nil {
		return nil, err
	}
	output["BUILDINGTYPE"], err = json.Marshal(r.BUILDINGTYPE)
	if err != nil {
		return nil, err
	}
	output["COLOR"], err = json.Marshal(r.COLOR)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *KsqlDataSourceSchema_HOUSES) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ADDRESS"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ADDRESS); err != nil {
			return err
		}
	} else {
		r.ADDRESS = NewUnionNullString()

		r.ADDRESS = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["BUILDINGTYPE"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BUILDINGTYPE); err != nil {
			return err
		}
	} else {
		r.BUILDINGTYPE = NewUnionNullString()

		r.BUILDINGTYPE = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["COLOR"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.COLOR); err != nil {
			return err
		}
	} else {
		r.COLOR = NewUnionNullString()

		r.COLOR = nil
	}
	return nil
}
