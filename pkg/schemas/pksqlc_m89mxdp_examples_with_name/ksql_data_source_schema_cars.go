// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100062_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type KsqlDataSourceSchema_CARS struct {
	MODEL *UnionNullString `json:"MODEL"`

	GEARBOX *UnionNullString `json:"GEARBOX"`

	COLOR *UnionNullString `json:"COLOR"`
}

const KsqlDataSourceSchema_CARSAvroCRC64Fingerprint = "\\\xfe\xc7\xe5O\x9d\xb1\xb6"

func NewKsqlDataSourceSchema_CARS() KsqlDataSourceSchema_CARS {
	r := KsqlDataSourceSchema_CARS{}
	r.MODEL = nil
	r.GEARBOX = nil
	r.COLOR = nil
	return r
}

func DeserializeKsqlDataSourceSchema_CARS(r io.Reader) (KsqlDataSourceSchema_CARS, error) {
	t := NewKsqlDataSourceSchema_CARS()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeKsqlDataSourceSchema_CARSFromSchema(r io.Reader, schema string) (KsqlDataSourceSchema_CARS, error) {
	t := NewKsqlDataSourceSchema_CARS()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeKsqlDataSourceSchema_CARS(r KsqlDataSourceSchema_CARS, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.MODEL, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GEARBOX, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.COLOR, w)
	if err != nil {
		return err
	}
	return err
}

func (r KsqlDataSourceSchema_CARS) Serialize(w io.Writer) error {
	return writeKsqlDataSourceSchema_CARS(r, w)
}

func (r KsqlDataSourceSchema_CARS) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"MODEL\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GEARBOX\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"COLOR\",\"type\":[\"null\",\"string\"]}],\"name\":\"io.confluent.ksql.avro_schemas.KsqlDataSourceSchema_CARS\",\"type\":\"record\"}"
}

func (r KsqlDataSourceSchema_CARS) SchemaName() string {
	return "io.confluent.ksql.avro_schemas.KsqlDataSourceSchema_CARS"
}

func (_ KsqlDataSourceSchema_CARS) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_CARS) SetInt(v int32)       { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_CARS) SetLong(v int64)      { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_CARS) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_CARS) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_CARS) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_CARS) SetString(v string)   { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_CARS) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *KsqlDataSourceSchema_CARS) Get(i int) types.Field {
	switch i {
	case 0:
		r.MODEL = NewUnionNullString()

		return r.MODEL
	case 1:
		r.GEARBOX = NewUnionNullString()

		return r.GEARBOX
	case 2:
		r.COLOR = NewUnionNullString()

		return r.COLOR
	}
	panic("Unknown field index")
}

func (r *KsqlDataSourceSchema_CARS) SetDefault(i int) {
	switch i {
	case 0:
		r.MODEL = nil
		return
	case 1:
		r.GEARBOX = nil
		return
	case 2:
		r.COLOR = nil
		return
	}
	panic("Unknown field index")
}

func (r *KsqlDataSourceSchema_CARS) NullField(i int) {
	switch i {
	case 0:
		r.MODEL = nil
		return
	case 1:
		r.GEARBOX = nil
		return
	case 2:
		r.COLOR = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ KsqlDataSourceSchema_CARS) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_CARS) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_CARS) HintSize(int)                     { panic("Unsupported operation") }
func (_ KsqlDataSourceSchema_CARS) Finalize()                        {}

func (_ KsqlDataSourceSchema_CARS) AvroCRC64Fingerprint() []byte {
	return []byte(KsqlDataSourceSchema_CARSAvroCRC64Fingerprint)
}

func (r KsqlDataSourceSchema_CARS) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["MODEL"], err = json.Marshal(r.MODEL)
	if err != nil {
		return nil, err
	}
	output["GEARBOX"], err = json.Marshal(r.GEARBOX)
	if err != nil {
		return nil, err
	}
	output["COLOR"], err = json.Marshal(r.COLOR)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *KsqlDataSourceSchema_CARS) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["MODEL"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MODEL); err != nil {
			return err
		}
	} else {
		r.MODEL = NewUnionNullString()

		r.MODEL = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GEARBOX"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GEARBOX); err != nil {
			return err
		}
	} else {
		r.GEARBOX = NewUnionNullString()

		r.GEARBOX = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["COLOR"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.COLOR); err != nil {
			return err
		}
	} else {
		r.COLOR = NewUnionNullString()

		r.COLOR = nil
	}
	return nil
}
