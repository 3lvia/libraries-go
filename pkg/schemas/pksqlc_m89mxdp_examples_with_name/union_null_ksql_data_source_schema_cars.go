// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100062_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullKsqlDataSourceSchema_CARSTypeEnum int

const (
	UnionNullKsqlDataSourceSchema_CARSTypeEnumKsqlDataSourceSchema_CARS UnionNullKsqlDataSourceSchema_CARSTypeEnum = 1
)

type UnionNullKsqlDataSourceSchema_CARS struct {
	Null                      *types.NullVal
	KsqlDataSourceSchema_CARS KsqlDataSourceSchema_CARS
	UnionType                 UnionNullKsqlDataSourceSchema_CARSTypeEnum
}

func writeUnionNullKsqlDataSourceSchema_CARS(r *UnionNullKsqlDataSourceSchema_CARS, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullKsqlDataSourceSchema_CARSTypeEnumKsqlDataSourceSchema_CARS:
		return writeKsqlDataSourceSchema_CARS(r.KsqlDataSourceSchema_CARS, w)
	}
	return fmt.Errorf("invalid value for *UnionNullKsqlDataSourceSchema_CARS")
}

func NewUnionNullKsqlDataSourceSchema_CARS() *UnionNullKsqlDataSourceSchema_CARS {
	return &UnionNullKsqlDataSourceSchema_CARS{}
}

func (r *UnionNullKsqlDataSourceSchema_CARS) Serialize(w io.Writer) error {
	return writeUnionNullKsqlDataSourceSchema_CARS(r, w)
}

func DeserializeUnionNullKsqlDataSourceSchema_CARS(r io.Reader) (*UnionNullKsqlDataSourceSchema_CARS, error) {
	t := NewUnionNullKsqlDataSourceSchema_CARS()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullKsqlDataSourceSchema_CARSFromSchema(r io.Reader, schema string) (*UnionNullKsqlDataSourceSchema_CARS, error) {
	t := NewUnionNullKsqlDataSourceSchema_CARS()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullKsqlDataSourceSchema_CARS) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"MODEL\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GEARBOX\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"COLOR\",\"type\":[\"null\",\"string\"]}],\"name\":\"KsqlDataSourceSchema_CARS\",\"type\":\"record\"}]"
}

func (_ *UnionNullKsqlDataSourceSchema_CARS) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullKsqlDataSourceSchema_CARS) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullKsqlDataSourceSchema_CARS) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullKsqlDataSourceSchema_CARS) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullKsqlDataSourceSchema_CARS) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullKsqlDataSourceSchema_CARS) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullKsqlDataSourceSchema_CARS) SetLong(v int64) {

	r.UnionType = (UnionNullKsqlDataSourceSchema_CARSTypeEnum)(v)
}

func (r *UnionNullKsqlDataSourceSchema_CARS) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.KsqlDataSourceSchema_CARS = NewKsqlDataSourceSchema_CARS()
		return &types.Record{Target: (&r.KsqlDataSourceSchema_CARS)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullKsqlDataSourceSchema_CARS) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullKsqlDataSourceSchema_CARS) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullKsqlDataSourceSchema_CARS) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullKsqlDataSourceSchema_CARS) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullKsqlDataSourceSchema_CARS) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullKsqlDataSourceSchema_CARS) Finalize() {}

func (r *UnionNullKsqlDataSourceSchema_CARS) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullKsqlDataSourceSchema_CARSTypeEnumKsqlDataSourceSchema_CARS:
		return json.Marshal(map[string]interface{}{"io.confluent.ksql.avro_schemas.KsqlDataSourceSchema_CARS": r.KsqlDataSourceSchema_CARS})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullKsqlDataSourceSchema_CARS")
}

func (r *UnionNullKsqlDataSourceSchema_CARS) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["io.confluent.ksql.avro_schemas.KsqlDataSourceSchema_CARS"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.KsqlDataSourceSchema_CARS)
	}
	return fmt.Errorf("invalid value for *UnionNullKsqlDataSourceSchema_CARS")
}
