// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100135_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayUnionNullTechnicalPropertyTypeEnum int

const (
	UnionNullArrayUnionNullTechnicalPropertyTypeEnumArrayUnionNullTechnicalProperty UnionNullArrayUnionNullTechnicalPropertyTypeEnum = 1
)

type UnionNullArrayUnionNullTechnicalProperty struct {
	Null                            *types.NullVal
	ArrayUnionNullTechnicalProperty []*UnionNullTechnicalProperty
	UnionType                       UnionNullArrayUnionNullTechnicalPropertyTypeEnum
}

func writeUnionNullArrayUnionNullTechnicalProperty(r *UnionNullArrayUnionNullTechnicalProperty, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayUnionNullTechnicalPropertyTypeEnumArrayUnionNullTechnicalProperty:
		return writeArrayUnionNullTechnicalProperty(r.ArrayUnionNullTechnicalProperty, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullTechnicalProperty")
}

func NewUnionNullArrayUnionNullTechnicalProperty() *UnionNullArrayUnionNullTechnicalProperty {
	return &UnionNullArrayUnionNullTechnicalProperty{}
}

func (r *UnionNullArrayUnionNullTechnicalProperty) Serialize(w io.Writer) error {
	return writeUnionNullArrayUnionNullTechnicalProperty(r, w)
}

func DeserializeUnionNullArrayUnionNullTechnicalProperty(r io.Reader) (*UnionNullArrayUnionNullTechnicalProperty, error) {
	t := NewUnionNullArrayUnionNullTechnicalProperty()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayUnionNullTechnicalPropertyFromSchema(r io.Reader, schema string) (*UnionNullArrayUnionNullTechnicalProperty, error) {
	t := NewUnionNullArrayUnionNullTechnicalProperty()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayUnionNullTechnicalProperty) Schema() string {
	return "[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Created\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Key\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TechnicalPropertyId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"TechnicalProperty\",\"namespace\":\"Skogshorn.Nett.Schemas.Primitives\",\"type\":\"record\"}],\"type\":\"array\"}]"
}

func (_ *UnionNullArrayUnionNullTechnicalProperty) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTechnicalProperty) SetInt(v int32)    { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTechnicalProperty) SetFloat(v float32) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullTechnicalProperty) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullTechnicalProperty) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTechnicalProperty) SetString(v string) {
	panic("Unsupported operation")
}

func (r *UnionNullArrayUnionNullTechnicalProperty) SetLong(v int64) {

	r.UnionType = (UnionNullArrayUnionNullTechnicalPropertyTypeEnum)(v)
}

func (r *UnionNullArrayUnionNullTechnicalProperty) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayUnionNullTechnicalProperty = make([]*UnionNullTechnicalProperty, 0)
		return &ArrayUnionNullTechnicalPropertyWrapper{Target: (&r.ArrayUnionNullTechnicalProperty)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayUnionNullTechnicalProperty) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTechnicalProperty) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTechnicalProperty) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullTechnicalProperty) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullTechnicalProperty) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullTechnicalProperty) Finalize() {}

func (r *UnionNullArrayUnionNullTechnicalProperty) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayUnionNullTechnicalPropertyTypeEnumArrayUnionNullTechnicalProperty:
		return json.Marshal(map[string]interface{}{"array": r.ArrayUnionNullTechnicalProperty})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayUnionNullTechnicalProperty")
}

func (r *UnionNullArrayUnionNullTechnicalProperty) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayUnionNullTechnicalProperty)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullTechnicalProperty")
}
