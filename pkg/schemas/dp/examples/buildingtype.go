// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100044_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Buildingtype int32

const (
	BuildingtypeHouse     Buildingtype = 0
	BuildingtypeApartment Buildingtype = 1
	BuildingtypeCabin     Buildingtype = 2
	BuildingtypeOther     Buildingtype = 3
)

func (e Buildingtype) String() string {
	switch e {
	case BuildingtypeHouse:
		return "House"
	case BuildingtypeApartment:
		return "Apartment"
	case BuildingtypeCabin:
		return "Cabin"
	case BuildingtypeOther:
		return "Other"
	}
	return "unknown"
}

func writeBuildingtype(r Buildingtype, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewBuildingtypeValue(raw string) (r Buildingtype, err error) {
	switch raw {
	case "House":
		return BuildingtypeHouse, nil
	case "Apartment":
		return BuildingtypeApartment, nil
	case "Cabin":
		return BuildingtypeCabin, nil
	case "Other":
		return BuildingtypeOther, nil
	}

	return -1, fmt.Errorf("invalid value for Buildingtype: '%s'", raw)

}

func (b Buildingtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *Buildingtype) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewBuildingtypeValue(stringVal)
	*b = val
	return err
}

type BuildingtypeWrapper struct {
	Target *Buildingtype
}

func (b BuildingtypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b BuildingtypeWrapper) SetInt(v int32) {
	*(b.Target) = Buildingtype(v)
}

func (b BuildingtypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b BuildingtypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b BuildingtypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b BuildingtypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b BuildingtypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b BuildingtypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b BuildingtypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b BuildingtypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b BuildingtypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b BuildingtypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b BuildingtypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b BuildingtypeWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b BuildingtypeWrapper) Finalize() {}
