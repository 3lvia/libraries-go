// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100189_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Message struct {
	Content *UnionNullString `json:"Content"`

	Id string `json:"Id"`

	Order int32 `json:"Order"`

	SessionId string `json:"SessionId"`
}

const MessageAvroCRC64Fingerprint = "\xd5we\x83?\x9e1\x8f"

func NewMessage() Message {
	r := Message{}
	r.Content = nil
	return r
}

func DeserializeMessage(r io.Reader) (Message, error) {
	t := NewMessage()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMessageFromSchema(r io.Reader, schema string) (Message, error) {
	t := NewMessage()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMessage(r Message, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Content, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Order, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SessionId, w)
	if err != nil {
		return err
	}
	return err
}

func (r Message) Serialize(w io.Writer) error {
	return writeMessage(r, w)
}

func (r Message) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Content\",\"type\":[\"null\",\"string\"]},{\"name\":\"Id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"Order\",\"type\":\"int\"},{\"name\":\"SessionId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}}],\"name\":\"Elvia.Edna.Events.IntegrationTests.Message\",\"type\":\"record\"}"
}

func (r Message) SchemaName() string {
	return "Elvia.Edna.Events.IntegrationTests.Message"
}

func (_ Message) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Message) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Message) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Message) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Message) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Message) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Message) SetString(v string)   { panic("Unsupported operation") }
func (_ Message) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Message) Get(i int) types.Field {
	switch i {
	case 0:
		r.Content = NewUnionNullString()

		return r.Content
	case 1:
		w := types.String{Target: &r.Id}

		return w

	case 2:
		w := types.Int{Target: &r.Order}

		return w

	case 3:
		w := types.String{Target: &r.SessionId}

		return w

	}
	panic("Unknown field index")
}

func (r *Message) SetDefault(i int) {
	switch i {
	case 0:
		r.Content = nil
		return
	}
	panic("Unknown field index")
}

func (r *Message) NullField(i int) {
	switch i {
	case 0:
		r.Content = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Message) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Message) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Message) HintSize(int)                     { panic("Unsupported operation") }
func (_ Message) Finalize()                        {}

func (_ Message) AvroCRC64Fingerprint() []byte {
	return []byte(MessageAvroCRC64Fingerprint)
}

func (r Message) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Content"], err = json.Marshal(r.Content)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Order"], err = json.Marshal(r.Order)
	if err != nil {
		return nil, err
	}
	output["SessionId"], err = json.Marshal(r.SessionId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Message) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Content"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Content); err != nil {
			return err
		}
	} else {
		r.Content = NewUnionNullString()

		r.Content = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Order"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Order); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Order")
	}
	val = func() json.RawMessage {
		if v, ok := fields["SessionId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SessionId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SessionId")
	}
	return nil
}
