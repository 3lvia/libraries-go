// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100254_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Name struct {
	Created string `json:"Created"`

	Modified *UnionNullString `json:"Modified"`

	NameType *UnionNullNameType `json:"NameType"`

	Value *UnionNullString `json:"Value"`
}

const NameAvroCRC64Fingerprint = "\xc8F\x17\x05\xa7\x18\x9b3"

func NewName() Name {
	r := Name{}
	r.Modified = nil
	r.NameType = nil
	r.Value = nil
	return r
}

func DeserializeName(r io.Reader) (Name, error) {
	t := NewName()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNameFromSchema(r io.Reader, schema string) (Name, error) {
	t := NewName()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeName(r Name, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Created, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Modified, w)
	if err != nil {
		return err
	}
	err = writeUnionNullNameType(r.NameType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r Name) Serialize(w io.Writer) error {
	return writeName(r, w)
}

func (r Name) Schema() string {
	return "{\"fields\":[{\"name\":\"Created\",\"type\":\"string\"},{\"default\":null,\"name\":\"Modified\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NameType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"name\":\"MRID\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"name\":\"NamingAuthority\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}}],\"name\":\"NameType\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"UniqueId.Infrastructure.Kafka.Model.Name\",\"type\":\"record\"}"
}

func (r Name) SchemaName() string {
	return "UniqueId.Infrastructure.Kafka.Model.Name"
}

func (_ Name) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Name) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Name) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Name) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Name) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Name) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Name) SetString(v string)   { panic("Unsupported operation") }
func (_ Name) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Name) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Created}

		return w

	case 1:
		r.Modified = NewUnionNullString()

		return r.Modified
	case 2:
		r.NameType = NewUnionNullNameType()

		return r.NameType
	case 3:
		r.Value = NewUnionNullString()

		return r.Value
	}
	panic("Unknown field index")
}

func (r *Name) SetDefault(i int) {
	switch i {
	case 1:
		r.Modified = nil
		return
	case 2:
		r.NameType = nil
		return
	case 3:
		r.Value = nil
		return
	}
	panic("Unknown field index")
}

func (r *Name) NullField(i int) {
	switch i {
	case 1:
		r.Modified = nil
		return
	case 2:
		r.NameType = nil
		return
	case 3:
		r.Value = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Name) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Name) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Name) HintSize(int)                     { panic("Unsupported operation") }
func (_ Name) Finalize()                        {}

func (_ Name) AvroCRC64Fingerprint() []byte {
	return []byte(NameAvroCRC64Fingerprint)
}

func (r Name) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Created"], err = json.Marshal(r.Created)
	if err != nil {
		return nil, err
	}
	output["Modified"], err = json.Marshal(r.Modified)
	if err != nil {
		return nil, err
	}
	output["NameType"], err = json.Marshal(r.NameType)
	if err != nil {
		return nil, err
	}
	output["Value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Name) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Created"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Created")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Modified"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Modified); err != nil {
			return err
		}
	} else {
		r.Modified = NewUnionNullString()

		r.Modified = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NameType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NameType); err != nil {
			return err
		}
	} else {
		r.NameType = NewUnionNullNameType()

		r.NameType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		r.Value = NewUnionNullString()

		r.Value = nil
	}
	return nil
}
