// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100254_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type IdentifiedObject struct {
	Created string `json:"Created"`

	MRID string `json:"MRID"`

	Names *UnionNullArrayUnionNullName `json:"Names"`

	ObjectType string `json:"ObjectType"`
}

const IdentifiedObjectAvroCRC64Fingerprint = "\xf3\x1ah/\xe2\x1ens"

func NewIdentifiedObject() IdentifiedObject {
	r := IdentifiedObject{}
	r.Names = nil
	return r
}

func DeserializeIdentifiedObject(r io.Reader) (IdentifiedObject, error) {
	t := NewIdentifiedObject()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeIdentifiedObjectFromSchema(r io.Reader, schema string) (IdentifiedObject, error) {
	t := NewIdentifiedObject()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeIdentifiedObject(r IdentifiedObject, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Created, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MRID, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullName(r.Names, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ObjectType, w)
	if err != nil {
		return err
	}
	return err
}

func (r IdentifiedObject) Serialize(w io.Writer) error {
	return writeIdentifiedObject(r, w)
}

func (r IdentifiedObject) Schema() string {
	return "{\"fields\":[{\"name\":\"Created\",\"type\":\"string\"},{\"name\":\"MRID\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Names\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"name\":\"Created\",\"type\":\"string\"},{\"default\":null,\"name\":\"Modified\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NameType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"name\":\"MRID\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"name\":\"NamingAuthority\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}}],\"name\":\"NameType\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"Name\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"name\":\"ObjectType\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}}],\"name\":\"UniqueId.Infrastructure.Kafka.Model.IdentifiedObject\",\"type\":\"record\"}"
}

func (r IdentifiedObject) SchemaName() string {
	return "UniqueId.Infrastructure.Kafka.Model.IdentifiedObject"
}

func (_ IdentifiedObject) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ IdentifiedObject) SetInt(v int32)       { panic("Unsupported operation") }
func (_ IdentifiedObject) SetLong(v int64)      { panic("Unsupported operation") }
func (_ IdentifiedObject) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ IdentifiedObject) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ IdentifiedObject) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ IdentifiedObject) SetString(v string)   { panic("Unsupported operation") }
func (_ IdentifiedObject) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *IdentifiedObject) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Created}

		return w

	case 1:
		w := types.String{Target: &r.MRID}

		return w

	case 2:
		r.Names = NewUnionNullArrayUnionNullName()

		return r.Names
	case 3:
		w := types.String{Target: &r.ObjectType}

		return w

	}
	panic("Unknown field index")
}

func (r *IdentifiedObject) SetDefault(i int) {
	switch i {
	case 2:
		r.Names = nil
		return
	}
	panic("Unknown field index")
}

func (r *IdentifiedObject) NullField(i int) {
	switch i {
	case 2:
		r.Names = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ IdentifiedObject) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ IdentifiedObject) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ IdentifiedObject) HintSize(int)                     { panic("Unsupported operation") }
func (_ IdentifiedObject) Finalize()                        {}

func (_ IdentifiedObject) AvroCRC64Fingerprint() []byte {
	return []byte(IdentifiedObjectAvroCRC64Fingerprint)
}

func (r IdentifiedObject) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Created"], err = json.Marshal(r.Created)
	if err != nil {
		return nil, err
	}
	output["MRID"], err = json.Marshal(r.MRID)
	if err != nil {
		return nil, err
	}
	output["Names"], err = json.Marshal(r.Names)
	if err != nil {
		return nil, err
	}
	output["ObjectType"], err = json.Marshal(r.ObjectType)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *IdentifiedObject) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Created"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Created")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MRID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MRID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MRID")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Names"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Names); err != nil {
			return err
		}
	} else {
		r.Names = NewUnionNullArrayUnionNullName()

		r.Names = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ObjectType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ObjectType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ObjectType")
	}
	return nil
}
