// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100254_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type IdentifiedObjectChangedEvent struct {
	Content *UnionNullEventContent `json:"Content"`

	Header *UnionNullEventHeader `json:"Header"`
}

const IdentifiedObjectChangedEventAvroCRC64Fingerprint = "6\xc3>\"\xe4\x158\xa5"

func NewIdentifiedObjectChangedEvent() IdentifiedObjectChangedEvent {
	r := IdentifiedObjectChangedEvent{}
	r.Content = nil
	r.Header = nil
	return r
}

func DeserializeIdentifiedObjectChangedEvent(r io.Reader) (IdentifiedObjectChangedEvent, error) {
	t := NewIdentifiedObjectChangedEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeIdentifiedObjectChangedEventFromSchema(r io.Reader, schema string) (IdentifiedObjectChangedEvent, error) {
	t := NewIdentifiedObjectChangedEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeIdentifiedObjectChangedEvent(r IdentifiedObjectChangedEvent, w io.Writer) error {
	var err error
	err = writeUnionNullEventContent(r.Content, w)
	if err != nil {
		return err
	}
	err = writeUnionNullEventHeader(r.Header, w)
	if err != nil {
		return err
	}
	return err
}

func (r IdentifiedObjectChangedEvent) Serialize(w io.Writer) error {
	return writeIdentifiedObjectChangedEvent(r, w)
}

func (r IdentifiedObjectChangedEvent) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Content\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"IdentifiedObject\",\"type\":[\"null\",{\"fields\":[{\"name\":\"Created\",\"type\":\"string\"},{\"name\":\"MRID\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Names\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"name\":\"Created\",\"type\":\"string\"},{\"default\":null,\"name\":\"Modified\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NameType\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"name\":\"MRID\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"name\":\"NamingAuthority\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}}],\"name\":\"NameType\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"Name\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"name\":\"ObjectType\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}}],\"name\":\"IdentifiedObject\",\"namespace\":\"UniqueId.Infrastructure.Kafka.Model\",\"type\":\"record\"}]}],\"name\":\"EventContent\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Header\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"EventId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EventName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Source\",\"type\":[\"null\",\"string\"]},{\"name\":\"TimeStamp\",\"type\":\"string\"}],\"name\":\"EventHeader\",\"type\":\"record\"}]}],\"name\":\"UniqueId.Infrastructure.Kafka.Events.IdentifiedObjectChangedEvent\",\"type\":\"record\"}"
}

func (r IdentifiedObjectChangedEvent) SchemaName() string {
	return "UniqueId.Infrastructure.Kafka.Events.IdentifiedObjectChangedEvent"
}

func (_ IdentifiedObjectChangedEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ IdentifiedObjectChangedEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ IdentifiedObjectChangedEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ IdentifiedObjectChangedEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ IdentifiedObjectChangedEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ IdentifiedObjectChangedEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ IdentifiedObjectChangedEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ IdentifiedObjectChangedEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *IdentifiedObjectChangedEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.Content = NewUnionNullEventContent()

		return r.Content
	case 1:
		r.Header = NewUnionNullEventHeader()

		return r.Header
	}
	panic("Unknown field index")
}

func (r *IdentifiedObjectChangedEvent) SetDefault(i int) {
	switch i {
	case 0:
		r.Content = nil
		return
	case 1:
		r.Header = nil
		return
	}
	panic("Unknown field index")
}

func (r *IdentifiedObjectChangedEvent) NullField(i int) {
	switch i {
	case 0:
		r.Content = nil
		return
	case 1:
		r.Header = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ IdentifiedObjectChangedEvent) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ IdentifiedObjectChangedEvent) AppendArray() types.Field { panic("Unsupported operation") }
func (_ IdentifiedObjectChangedEvent) HintSize(int)             { panic("Unsupported operation") }
func (_ IdentifiedObjectChangedEvent) Finalize()                {}

func (_ IdentifiedObjectChangedEvent) AvroCRC64Fingerprint() []byte {
	return []byte(IdentifiedObjectChangedEventAvroCRC64Fingerprint)
}

func (r IdentifiedObjectChangedEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Content"], err = json.Marshal(r.Content)
	if err != nil {
		return nil, err
	}
	output["Header"], err = json.Marshal(r.Header)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *IdentifiedObjectChangedEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Content"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Content); err != nil {
			return err
		}
	} else {
		r.Content = NewUnionNullEventContent()

		r.Content = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Header"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Header); err != nil {
			return err
		}
	} else {
		r.Header = NewUnionNullEventHeader()

		r.Header = nil
	}
	return nil
}
