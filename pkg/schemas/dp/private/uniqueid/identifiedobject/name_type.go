// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100254_5.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type NameType struct {
	Description *UnionNullString `json:"Description"`

	MRID string `json:"MRID"`

	Name *UnionNullString `json:"Name"`

	NamingAuthority string `json:"NamingAuthority"`
}

const NameTypeAvroCRC64Fingerprint = "k\x15r\rT\x83J|"

func NewNameType() NameType {
	r := NameType{}
	r.Description = nil
	r.Name = nil
	return r
}

func DeserializeNameType(r io.Reader) (NameType, error) {
	t := NewNameType()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeNameTypeFromSchema(r io.Reader, schema string) (NameType, error) {
	t := NewNameType()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeNameType(r NameType, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.MRID, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.NamingAuthority, w)
	if err != nil {
		return err
	}
	return err
}

func (r NameType) Serialize(w io.Writer) error {
	return writeNameType(r, w)
}

func (r NameType) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"name\":\"MRID\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"name\":\"NamingAuthority\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}}],\"name\":\"UniqueId.Infrastructure.Kafka.Model.NameType\",\"type\":\"record\"}"
}

func (r NameType) SchemaName() string {
	return "UniqueId.Infrastructure.Kafka.Model.NameType"
}

func (_ NameType) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ NameType) SetInt(v int32)       { panic("Unsupported operation") }
func (_ NameType) SetLong(v int64)      { panic("Unsupported operation") }
func (_ NameType) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ NameType) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ NameType) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ NameType) SetString(v string)   { panic("Unsupported operation") }
func (_ NameType) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *NameType) Get(i int) types.Field {
	switch i {
	case 0:
		r.Description = NewUnionNullString()

		return r.Description
	case 1:
		w := types.String{Target: &r.MRID}

		return w

	case 2:
		r.Name = NewUnionNullString()

		return r.Name
	case 3:
		w := types.String{Target: &r.NamingAuthority}

		return w

	}
	panic("Unknown field index")
}

func (r *NameType) SetDefault(i int) {
	switch i {
	case 0:
		r.Description = nil
		return
	case 2:
		r.Name = nil
		return
	}
	panic("Unknown field index")
}

func (r *NameType) NullField(i int) {
	switch i {
	case 0:
		r.Description = nil
		return
	case 2:
		r.Name = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ NameType) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ NameType) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ NameType) HintSize(int)                     { panic("Unsupported operation") }
func (_ NameType) Finalize()                        {}

func (_ NameType) AvroCRC64Fingerprint() []byte {
	return []byte(NameTypeAvroCRC64Fingerprint)
}

func (r NameType) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["MRID"], err = json.Marshal(r.MRID)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["NamingAuthority"], err = json.Marshal(r.NamingAuthority)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *NameType) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MRID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MRID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MRID")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NamingAuthority"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NamingAuthority); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for NamingAuthority")
	}
	return nil
}
