// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100136_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullAssetObjectTypeEnum int

const (
	UnionNullAssetObjectTypeEnumAssetObject UnionNullAssetObjectTypeEnum = 1
)

type UnionNullAssetObject struct {
	Null        *types.NullVal
	AssetObject AssetObject
	UnionType   UnionNullAssetObjectTypeEnum
}

func writeUnionNullAssetObject(r *UnionNullAssetObject, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullAssetObjectTypeEnumAssetObject:
		return writeAssetObject(r.AssetObject, w)
	}
	return fmt.Errorf("invalid value for *UnionNullAssetObject")
}

func NewUnionNullAssetObject() *UnionNullAssetObject {
	return &UnionNullAssetObject{}
}

func (r *UnionNullAssetObject) Serialize(w io.Writer) error {
	return writeUnionNullAssetObject(r, w)
}

func DeserializeUnionNullAssetObject(r io.Reader) (*UnionNullAssetObject, error) {
	t := NewUnionNullAssetObject()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullAssetObjectFromSchema(r io.Reader, schema string) (*UnionNullAssetObject, error) {
	t := NewUnionNullAssetObject()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullAssetObject) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"AssetObjectId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ConnectedTo\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Created\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ParentAssetObjectId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ParentFunctionalObjectId\",\"type\":[\"null\",\"string\"]},{\"name\":\"Status\",\"type\":{\"name\":\"Status\",\"symbols\":[\"Planned\",\"Created\",\"Activated\",\"Deactivated\",\"Installed\",\"Uninstalled\",\"Deleted\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"TechnicalProperties\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Created\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Key\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TechnicalPropertyId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"TechnicalProperty\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"name\":\"Type\",\"type\":{\"name\":\"AssetObjectType\",\"symbols\":[\"Antenne\",\"Maaler\",\"Fake\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]}],\"name\":\"AssetObject\",\"type\":\"record\"}]"
}

func (_ *UnionNullAssetObject) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullAssetObject) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullAssetObject) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullAssetObject) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullAssetObject) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullAssetObject) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullAssetObject) SetLong(v int64) {

	r.UnionType = (UnionNullAssetObjectTypeEnum)(v)
}

func (r *UnionNullAssetObject) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.AssetObject = NewAssetObject()
		return &types.Record{Target: (&r.AssetObject)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullAssetObject) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullAssetObject) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullAssetObject) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullAssetObject) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullAssetObject) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullAssetObject) Finalize()                        {}

func (r *UnionNullAssetObject) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullAssetObjectTypeEnumAssetObject:
		return json.Marshal(map[string]interface{}{"Skogshorn.Nett.Generated.Schemas.Enitites.AssetObject": r.AssetObject})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullAssetObject")
}

func (r *UnionNullAssetObject) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Skogshorn.Nett.Generated.Schemas.Enitites.AssetObject"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.AssetObject)
	}
	return fmt.Errorf("invalid value for *UnionNullAssetObject")
}
