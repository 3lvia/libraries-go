// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100136_7.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Location struct {
	Address *UnionNullAddress `json:"Address"`

	Altitude *UnionNullDouble `json:"Altitude"`

	Created *UnionNullString `json:"Created"`

	FunctionalObjectId *UnionNullString `json:"FunctionalObjectId"`

	Latitude *UnionNullDouble `json:"Latitude"`

	LocationId *UnionNullString `json:"LocationId"`

	Longitude *UnionNullDouble `json:"Longitude"`

	Updated *UnionNullString `json:"Updated"`
}

const LocationAvroCRC64Fingerprint = "S\xb1,\xb6\x82\xcf\xfc\x93"

func NewLocation() Location {
	r := Location{}
	r.Address = nil
	r.Altitude = nil
	r.Created = nil
	r.FunctionalObjectId = nil
	r.Latitude = nil
	r.LocationId = nil
	r.Longitude = nil
	r.Updated = nil
	return r
}

func DeserializeLocation(r io.Reader) (Location, error) {
	t := NewLocation()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLocationFromSchema(r io.Reader, schema string) (Location, error) {
	t := NewLocation()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLocation(r Location, w io.Writer) error {
	var err error
	err = writeUnionNullAddress(r.Address, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Altitude, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Created, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FunctionalObjectId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Latitude, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LocationId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Longitude, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Updated, w)
	if err != nil {
		return err
	}
	return err
}

func (r Location) Serialize(w io.Writer) error {
	return writeLocation(r, w)
}

func (r Location) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Address\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"AddressId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Block\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CountryCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Created\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FloorNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HouseLetter\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HouseNumber\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"Leasehold\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LocationId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MunicipalityCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Plot\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostalCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostalRegion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PropertyUnitNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Section\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]}],\"name\":\"Address\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Altitude\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Created\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FunctionalObjectId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Latitude\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"LocationId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Longitude\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]}],\"name\":\"Skogshorn.Nett.Generated.Schemas.Enitites.Location\",\"type\":\"record\"}"
}

func (r Location) SchemaName() string {
	return "Skogshorn.Nett.Generated.Schemas.Enitites.Location"
}

func (_ Location) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Location) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Location) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Location) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Location) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Location) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Location) SetString(v string)   { panic("Unsupported operation") }
func (_ Location) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Location) Get(i int) types.Field {
	switch i {
	case 0:
		r.Address = NewUnionNullAddress()

		return r.Address
	case 1:
		r.Altitude = NewUnionNullDouble()

		return r.Altitude
	case 2:
		r.Created = NewUnionNullString()

		return r.Created
	case 3:
		r.FunctionalObjectId = NewUnionNullString()

		return r.FunctionalObjectId
	case 4:
		r.Latitude = NewUnionNullDouble()

		return r.Latitude
	case 5:
		r.LocationId = NewUnionNullString()

		return r.LocationId
	case 6:
		r.Longitude = NewUnionNullDouble()

		return r.Longitude
	case 7:
		r.Updated = NewUnionNullString()

		return r.Updated
	}
	panic("Unknown field index")
}

func (r *Location) SetDefault(i int) {
	switch i {
	case 0:
		r.Address = nil
		return
	case 1:
		r.Altitude = nil
		return
	case 2:
		r.Created = nil
		return
	case 3:
		r.FunctionalObjectId = nil
		return
	case 4:
		r.Latitude = nil
		return
	case 5:
		r.LocationId = nil
		return
	case 6:
		r.Longitude = nil
		return
	case 7:
		r.Updated = nil
		return
	}
	panic("Unknown field index")
}

func (r *Location) NullField(i int) {
	switch i {
	case 0:
		r.Address = nil
		return
	case 1:
		r.Altitude = nil
		return
	case 2:
		r.Created = nil
		return
	case 3:
		r.FunctionalObjectId = nil
		return
	case 4:
		r.Latitude = nil
		return
	case 5:
		r.LocationId = nil
		return
	case 6:
		r.Longitude = nil
		return
	case 7:
		r.Updated = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Location) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Location) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Location) HintSize(int)                     { panic("Unsupported operation") }
func (_ Location) Finalize()                        {}

func (_ Location) AvroCRC64Fingerprint() []byte {
	return []byte(LocationAvroCRC64Fingerprint)
}

func (r Location) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Address"], err = json.Marshal(r.Address)
	if err != nil {
		return nil, err
	}
	output["Altitude"], err = json.Marshal(r.Altitude)
	if err != nil {
		return nil, err
	}
	output["Created"], err = json.Marshal(r.Created)
	if err != nil {
		return nil, err
	}
	output["FunctionalObjectId"], err = json.Marshal(r.FunctionalObjectId)
	if err != nil {
		return nil, err
	}
	output["Latitude"], err = json.Marshal(r.Latitude)
	if err != nil {
		return nil, err
	}
	output["LocationId"], err = json.Marshal(r.LocationId)
	if err != nil {
		return nil, err
	}
	output["Longitude"], err = json.Marshal(r.Longitude)
	if err != nil {
		return nil, err
	}
	output["Updated"], err = json.Marshal(r.Updated)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Location) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Address"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Address); err != nil {
			return err
		}
	} else {
		r.Address = NewUnionNullAddress()

		r.Address = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Altitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Altitude); err != nil {
			return err
		}
	} else {
		r.Altitude = NewUnionNullDouble()

		r.Altitude = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Created"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created); err != nil {
			return err
		}
	} else {
		r.Created = NewUnionNullString()

		r.Created = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FunctionalObjectId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FunctionalObjectId); err != nil {
			return err
		}
	} else {
		r.FunctionalObjectId = NewUnionNullString()

		r.FunctionalObjectId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Latitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitude); err != nil {
			return err
		}
	} else {
		r.Latitude = NewUnionNullDouble()

		r.Latitude = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LocationId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LocationId); err != nil {
			return err
		}
	} else {
		r.LocationId = NewUnionNullString()

		r.LocationId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Longitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitude); err != nil {
			return err
		}
	} else {
		r.Longitude = NewUnionNullDouble()

		r.Longitude = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Updated"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Updated); err != nil {
			return err
		}
	} else {
		r.Updated = NewUnionNullString()

		r.Updated = nil
	}
	return nil
}
