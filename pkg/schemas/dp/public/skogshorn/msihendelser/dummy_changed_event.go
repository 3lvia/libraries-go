// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100124_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DummyChangedEvent struct {
	Content *UnionNullDummyEventContent `json:"Content"`

	Header *UnionNullDummyEventHeader `json:"Header"`
}

const DummyChangedEventAvroCRC64Fingerprint = "'\xb9\xe9\xe1\xe7~\xa4\x89"

func NewDummyChangedEvent() DummyChangedEvent {
	r := DummyChangedEvent{}
	r.Content = nil
	r.Header = nil
	return r
}

func DeserializeDummyChangedEvent(r io.Reader) (DummyChangedEvent, error) {
	t := NewDummyChangedEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDummyChangedEventFromSchema(r io.Reader, schema string) (DummyChangedEvent, error) {
	t := NewDummyChangedEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDummyChangedEvent(r DummyChangedEvent, w io.Writer) error {
	var err error
	err = writeUnionNullDummyEventContent(r.Content, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDummyEventHeader(r.Header, w)
	if err != nil {
		return err
	}
	return err
}

func (r DummyChangedEvent) Serialize(w io.Writer) error {
	return writeDummyChangedEvent(r, w)
}

func (r DummyChangedEvent) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Content\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ObjectValue\",\"type\":[\"null\",\"string\"]}],\"name\":\"DummyEventContent\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Header\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"EventId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EventName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Source\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TimeStamp\",\"type\":[\"null\",\"string\"]}],\"name\":\"DummyEventHeader\",\"type\":\"record\"}]}],\"name\":\"Skogshorn.MSI.Common.Database.Entity.DummyChangedEvent\",\"type\":\"record\"}"
}

func (r DummyChangedEvent) SchemaName() string {
	return "Skogshorn.MSI.Common.Database.Entity.DummyChangedEvent"
}

func (_ DummyChangedEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DummyChangedEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DummyChangedEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DummyChangedEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DummyChangedEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DummyChangedEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DummyChangedEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ DummyChangedEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DummyChangedEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.Content = NewUnionNullDummyEventContent()

		return r.Content
	case 1:
		r.Header = NewUnionNullDummyEventHeader()

		return r.Header
	}
	panic("Unknown field index")
}

func (r *DummyChangedEvent) SetDefault(i int) {
	switch i {
	case 0:
		r.Content = nil
		return
	case 1:
		r.Header = nil
		return
	}
	panic("Unknown field index")
}

func (r *DummyChangedEvent) NullField(i int) {
	switch i {
	case 0:
		r.Content = nil
		return
	case 1:
		r.Header = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DummyChangedEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DummyChangedEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DummyChangedEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ DummyChangedEvent) Finalize()                        {}

func (_ DummyChangedEvent) AvroCRC64Fingerprint() []byte {
	return []byte(DummyChangedEventAvroCRC64Fingerprint)
}

func (r DummyChangedEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Content"], err = json.Marshal(r.Content)
	if err != nil {
		return nil, err
	}
	output["Header"], err = json.Marshal(r.Header)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DummyChangedEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Content"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Content); err != nil {
			return err
		}
	} else {
		r.Content = NewUnionNullDummyEventContent()

		r.Content = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Header"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Header); err != nil {
			return err
		}
	} else {
		r.Header = NewUnionNullDummyEventHeader()

		r.Header = nil
	}
	return nil
}
