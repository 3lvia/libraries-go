// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100147_24.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TechnicalProperty struct {
	Created string `json:"Created"`

	Description *UnionNullString `json:"Description"`

	Key *UnionNullString `json:"Key"`

	TechnicalPropertyId *UnionNullString `json:"TechnicalPropertyId"`

	Updated *UnionNullString `json:"Updated"`

	Value *UnionNullString `json:"Value"`
}

const TechnicalPropertyAvroCRC64Fingerprint = "{\a\xac\xd5\xfe]\x1d\x03"

func NewTechnicalProperty() TechnicalProperty {
	r := TechnicalProperty{}
	r.Description = nil
	r.Key = nil
	r.TechnicalPropertyId = nil
	r.Updated = nil
	r.Value = nil
	return r
}

func DeserializeTechnicalProperty(r io.Reader) (TechnicalProperty, error) {
	t := NewTechnicalProperty()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTechnicalPropertyFromSchema(r io.Reader, schema string) (TechnicalProperty, error) {
	t := NewTechnicalProperty()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTechnicalProperty(r TechnicalProperty, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Created, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Description, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Key, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TechnicalPropertyId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Updated, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r TechnicalProperty) Serialize(w io.Writer) error {
	return writeTechnicalProperty(r, w)
}

func (r TechnicalProperty) Schema() string {
	return "{\"fields\":[{\"name\":\"Created\",\"type\":\"string\"},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Key\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TechnicalPropertyId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"Skogshorn.Nett.Schemas.Primitives.TechnicalProperty\",\"type\":\"record\"}"
}

func (r TechnicalProperty) SchemaName() string {
	return "Skogshorn.Nett.Schemas.Primitives.TechnicalProperty"
}

func (_ TechnicalProperty) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TechnicalProperty) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TechnicalProperty) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TechnicalProperty) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TechnicalProperty) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TechnicalProperty) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TechnicalProperty) SetString(v string)   { panic("Unsupported operation") }
func (_ TechnicalProperty) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TechnicalProperty) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Created}

		return w

	case 1:
		r.Description = NewUnionNullString()

		return r.Description
	case 2:
		r.Key = NewUnionNullString()

		return r.Key
	case 3:
		r.TechnicalPropertyId = NewUnionNullString()

		return r.TechnicalPropertyId
	case 4:
		r.Updated = NewUnionNullString()

		return r.Updated
	case 5:
		r.Value = NewUnionNullString()

		return r.Value
	}
	panic("Unknown field index")
}

func (r *TechnicalProperty) SetDefault(i int) {
	switch i {
	case 1:
		r.Description = nil
		return
	case 2:
		r.Key = nil
		return
	case 3:
		r.TechnicalPropertyId = nil
		return
	case 4:
		r.Updated = nil
		return
	case 5:
		r.Value = nil
		return
	}
	panic("Unknown field index")
}

func (r *TechnicalProperty) NullField(i int) {
	switch i {
	case 1:
		r.Description = nil
		return
	case 2:
		r.Key = nil
		return
	case 3:
		r.TechnicalPropertyId = nil
		return
	case 4:
		r.Updated = nil
		return
	case 5:
		r.Value = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ TechnicalProperty) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TechnicalProperty) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TechnicalProperty) HintSize(int)                     { panic("Unsupported operation") }
func (_ TechnicalProperty) Finalize()                        {}

func (_ TechnicalProperty) AvroCRC64Fingerprint() []byte {
	return []byte(TechnicalPropertyAvroCRC64Fingerprint)
}

func (r TechnicalProperty) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Created"], err = json.Marshal(r.Created)
	if err != nil {
		return nil, err
	}
	output["Description"], err = json.Marshal(r.Description)
	if err != nil {
		return nil, err
	}
	output["Key"], err = json.Marshal(r.Key)
	if err != nil {
		return nil, err
	}
	output["TechnicalPropertyId"], err = json.Marshal(r.TechnicalPropertyId)
	if err != nil {
		return nil, err
	}
	output["Updated"], err = json.Marshal(r.Updated)
	if err != nil {
		return nil, err
	}
	output["Value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TechnicalProperty) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Created"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Created")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Description"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Description); err != nil {
			return err
		}
	} else {
		r.Description = NewUnionNullString()

		r.Description = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Key"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Key); err != nil {
			return err
		}
	} else {
		r.Key = NewUnionNullString()

		r.Key = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TechnicalPropertyId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TechnicalPropertyId); err != nil {
			return err
		}
	} else {
		r.TechnicalPropertyId = NewUnionNullString()

		r.TechnicalPropertyId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Updated"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Updated); err != nil {
			return err
		}
	} else {
		r.Updated = NewUnionNullString()

		r.Updated = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		r.Value = NewUnionNullString()

		r.Value = nil
	}
	return nil
}
