// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100279_6.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ConveyEventDto struct {
	BroadcastId *UnionNullString `json:"BroadcastId"`

	ClientApplication *UnionNullString `json:"ClientApplication"`

	ConversationId *UnionNullString `json:"ConversationId"`

	ErrorMessage *UnionNullString `json:"ErrorMessage"`

	ErrorType *UnionNullString `json:"ErrorType"`

	EventId *UnionNullString `json:"EventId"`

	EventTime *UnionNullLong `json:"EventTime"`

	JobClientIdempotencyKey *UnionNullString `json:"JobClientIdempotencyKey"`

	JobId *UnionNullString `json:"JobId"`

	MessageId *UnionNullString `json:"MessageId"`

	TypeString *UnionNullString `json:"TypeString"`
}

const ConveyEventDtoAvroCRC64Fingerprint = ".\xb0\xf7\xf2\xfb\xebR\x87"

func NewConveyEventDto() ConveyEventDto {
	r := ConveyEventDto{}
	r.BroadcastId = nil
	r.ClientApplication = nil
	r.ConversationId = nil
	r.ErrorMessage = nil
	r.ErrorType = nil
	r.EventId = nil
	r.EventTime = nil
	r.JobClientIdempotencyKey = nil
	r.JobId = nil
	r.MessageId = nil
	r.TypeString = nil
	return r
}

func DeserializeConveyEventDto(r io.Reader) (ConveyEventDto, error) {
	t := NewConveyEventDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeConveyEventDtoFromSchema(r io.Reader, schema string) (ConveyEventDto, error) {
	t := NewConveyEventDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeConveyEventDto(r ConveyEventDto, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.BroadcastId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ClientApplication, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ConversationId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ErrorMessage, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ErrorType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EventId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.EventTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.JobClientIdempotencyKey, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.JobId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MessageId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TypeString, w)
	if err != nil {
		return err
	}
	return err
}

func (r ConveyEventDto) Serialize(w io.Writer) error {
	return writeConveyEventDto(r, w)
}

func (r ConveyEventDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"BroadcastId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ClientApplication\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ConversationId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ErrorMessage\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ErrorType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EventId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EventTime\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"default\":null,\"name\":\"JobClientIdempotencyKey\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"JobId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MessageId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TypeString\",\"type\":[\"null\",\"string\"]}],\"name\":\"Elvia.Convey.Events.ConveyEventDto\",\"type\":\"record\"}"
}

func (r ConveyEventDto) SchemaName() string {
	return "Elvia.Convey.Events.ConveyEventDto"
}

func (_ ConveyEventDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ConveyEventDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ConveyEventDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ConveyEventDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ConveyEventDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ConveyEventDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ConveyEventDto) SetString(v string)   { panic("Unsupported operation") }
func (_ ConveyEventDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ConveyEventDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.BroadcastId = NewUnionNullString()

		return r.BroadcastId
	case 1:
		r.ClientApplication = NewUnionNullString()

		return r.ClientApplication
	case 2:
		r.ConversationId = NewUnionNullString()

		return r.ConversationId
	case 3:
		r.ErrorMessage = NewUnionNullString()

		return r.ErrorMessage
	case 4:
		r.ErrorType = NewUnionNullString()

		return r.ErrorType
	case 5:
		r.EventId = NewUnionNullString()

		return r.EventId
	case 6:
		r.EventTime = NewUnionNullLong()

		return r.EventTime
	case 7:
		r.JobClientIdempotencyKey = NewUnionNullString()

		return r.JobClientIdempotencyKey
	case 8:
		r.JobId = NewUnionNullString()

		return r.JobId
	case 9:
		r.MessageId = NewUnionNullString()

		return r.MessageId
	case 10:
		r.TypeString = NewUnionNullString()

		return r.TypeString
	}
	panic("Unknown field index")
}

func (r *ConveyEventDto) SetDefault(i int) {
	switch i {
	case 0:
		r.BroadcastId = nil
		return
	case 1:
		r.ClientApplication = nil
		return
	case 2:
		r.ConversationId = nil
		return
	case 3:
		r.ErrorMessage = nil
		return
	case 4:
		r.ErrorType = nil
		return
	case 5:
		r.EventId = nil
		return
	case 6:
		r.EventTime = nil
		return
	case 7:
		r.JobClientIdempotencyKey = nil
		return
	case 8:
		r.JobId = nil
		return
	case 9:
		r.MessageId = nil
		return
	case 10:
		r.TypeString = nil
		return
	}
	panic("Unknown field index")
}

func (r *ConveyEventDto) NullField(i int) {
	switch i {
	case 0:
		r.BroadcastId = nil
		return
	case 1:
		r.ClientApplication = nil
		return
	case 2:
		r.ConversationId = nil
		return
	case 3:
		r.ErrorMessage = nil
		return
	case 4:
		r.ErrorType = nil
		return
	case 5:
		r.EventId = nil
		return
	case 6:
		r.EventTime = nil
		return
	case 7:
		r.JobClientIdempotencyKey = nil
		return
	case 8:
		r.JobId = nil
		return
	case 9:
		r.MessageId = nil
		return
	case 10:
		r.TypeString = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ConveyEventDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ConveyEventDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ConveyEventDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ ConveyEventDto) Finalize()                        {}

func (_ ConveyEventDto) AvroCRC64Fingerprint() []byte {
	return []byte(ConveyEventDtoAvroCRC64Fingerprint)
}

func (r ConveyEventDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["BroadcastId"], err = json.Marshal(r.BroadcastId)
	if err != nil {
		return nil, err
	}
	output["ClientApplication"], err = json.Marshal(r.ClientApplication)
	if err != nil {
		return nil, err
	}
	output["ConversationId"], err = json.Marshal(r.ConversationId)
	if err != nil {
		return nil, err
	}
	output["ErrorMessage"], err = json.Marshal(r.ErrorMessage)
	if err != nil {
		return nil, err
	}
	output["ErrorType"], err = json.Marshal(r.ErrorType)
	if err != nil {
		return nil, err
	}
	output["EventId"], err = json.Marshal(r.EventId)
	if err != nil {
		return nil, err
	}
	output["EventTime"], err = json.Marshal(r.EventTime)
	if err != nil {
		return nil, err
	}
	output["JobClientIdempotencyKey"], err = json.Marshal(r.JobClientIdempotencyKey)
	if err != nil {
		return nil, err
	}
	output["JobId"], err = json.Marshal(r.JobId)
	if err != nil {
		return nil, err
	}
	output["MessageId"], err = json.Marshal(r.MessageId)
	if err != nil {
		return nil, err
	}
	output["TypeString"], err = json.Marshal(r.TypeString)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ConveyEventDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["BroadcastId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BroadcastId); err != nil {
			return err
		}
	} else {
		r.BroadcastId = NewUnionNullString()

		r.BroadcastId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ClientApplication"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClientApplication); err != nil {
			return err
		}
	} else {
		r.ClientApplication = NewUnionNullString()

		r.ClientApplication = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ConversationId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConversationId); err != nil {
			return err
		}
	} else {
		r.ConversationId = NewUnionNullString()

		r.ConversationId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ErrorMessage"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ErrorMessage); err != nil {
			return err
		}
	} else {
		r.ErrorMessage = NewUnionNullString()

		r.ErrorMessage = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ErrorType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ErrorType); err != nil {
			return err
		}
	} else {
		r.ErrorType = NewUnionNullString()

		r.ErrorType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventId); err != nil {
			return err
		}
	} else {
		r.EventId = NewUnionNullString()

		r.EventId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EventTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventTime); err != nil {
			return err
		}
	} else {
		r.EventTime = NewUnionNullLong()

		r.EventTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["JobClientIdempotencyKey"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.JobClientIdempotencyKey); err != nil {
			return err
		}
	} else {
		r.JobClientIdempotencyKey = NewUnionNullString()

		r.JobClientIdempotencyKey = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["JobId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.JobId); err != nil {
			return err
		}
	} else {
		r.JobId = NewUnionNullString()

		r.JobId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MessageId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MessageId); err != nil {
			return err
		}
	} else {
		r.MessageId = NewUnionNullString()

		r.MessageId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TypeString"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TypeString); err != nil {
			return err
		}
	} else {
		r.TypeString = NewUnionNullString()

		r.TypeString = nil
	}
	return nil
}
