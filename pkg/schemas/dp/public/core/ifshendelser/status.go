// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100136_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Status int32

const (
	StatusPlanned     Status = 0
	StatusCreated     Status = 1
	StatusActivated   Status = 2
	StatusDeactivated Status = 3
	StatusInstalled   Status = 4
	StatusUninstalled Status = 5
	StatusDeleted     Status = 6
)

func (e Status) String() string {
	switch e {
	case StatusPlanned:
		return "Planned"
	case StatusCreated:
		return "Created"
	case StatusActivated:
		return "Activated"
	case StatusDeactivated:
		return "Deactivated"
	case StatusInstalled:
		return "Installed"
	case StatusUninstalled:
		return "Uninstalled"
	case StatusDeleted:
		return "Deleted"
	}
	return "unknown"
}

func writeStatus(r Status, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewStatusValue(raw string) (r Status, err error) {
	switch raw {
	case "Planned":
		return StatusPlanned, nil
	case "Created":
		return StatusCreated, nil
	case "Activated":
		return StatusActivated, nil
	case "Deactivated":
		return StatusDeactivated, nil
	case "Installed":
		return StatusInstalled, nil
	case "Uninstalled":
		return StatusUninstalled, nil
	case "Deleted":
		return StatusDeleted, nil
	}

	return -1, fmt.Errorf("invalid value for Status: '%s'", raw)

}

func (b Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *Status) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewStatusValue(stringVal)
	*b = val
	return err
}

type StatusWrapper struct {
	Target *Status
}

func (b StatusWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b StatusWrapper) SetInt(v int32) {
	*(b.Target) = Status(v)
}

func (b StatusWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b StatusWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b StatusWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b StatusWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b StatusWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b StatusWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b StatusWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b StatusWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b StatusWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b StatusWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b StatusWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b StatusWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b StatusWrapper) Finalize() {}
