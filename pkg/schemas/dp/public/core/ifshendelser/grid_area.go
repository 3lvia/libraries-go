// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100136_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type GridArea struct {
	Created *UnionNullString `json:"Created"`

	FlowDirection *UnionNullString `json:"FlowDirection"`

	GridAreaId *UnionNullString `json:"GridAreaId"`

	GridId *UnionNullString `json:"GridId"`

	Id *UnionNullString `json:"Id"`

	Name *UnionNullString `json:"Name"`

	Updated *UnionNullString `json:"Updated"`
}

const GridAreaAvroCRC64Fingerprint = "\xb9lU#u\x9d\xf0\xd8"

func NewGridArea() GridArea {
	r := GridArea{}
	r.Created = nil
	r.FlowDirection = nil
	r.GridAreaId = nil
	r.GridId = nil
	r.Id = nil
	r.Name = nil
	r.Updated = nil
	return r
}

func DeserializeGridArea(r io.Reader) (GridArea, error) {
	t := NewGridArea()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeGridAreaFromSchema(r io.Reader, schema string) (GridArea, error) {
	t := NewGridArea()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeGridArea(r GridArea, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Created, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FlowDirection, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GridAreaId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GridId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Updated, w)
	if err != nil {
		return err
	}
	return err
}

func (r GridArea) Serialize(w io.Writer) error {
	return writeGridArea(r, w)
}

func (r GridArea) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Created\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FlowDirection\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GridAreaId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"GridId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]}],\"name\":\"Skogshorn.Nett.Generated.Schemas.Enitites.GridArea\",\"type\":\"record\"}"
}

func (r GridArea) SchemaName() string {
	return "Skogshorn.Nett.Generated.Schemas.Enitites.GridArea"
}

func (_ GridArea) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ GridArea) SetInt(v int32)       { panic("Unsupported operation") }
func (_ GridArea) SetLong(v int64)      { panic("Unsupported operation") }
func (_ GridArea) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ GridArea) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ GridArea) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ GridArea) SetString(v string)   { panic("Unsupported operation") }
func (_ GridArea) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *GridArea) Get(i int) types.Field {
	switch i {
	case 0:
		r.Created = NewUnionNullString()

		return r.Created
	case 1:
		r.FlowDirection = NewUnionNullString()

		return r.FlowDirection
	case 2:
		r.GridAreaId = NewUnionNullString()

		return r.GridAreaId
	case 3:
		r.GridId = NewUnionNullString()

		return r.GridId
	case 4:
		r.Id = NewUnionNullString()

		return r.Id
	case 5:
		r.Name = NewUnionNullString()

		return r.Name
	case 6:
		r.Updated = NewUnionNullString()

		return r.Updated
	}
	panic("Unknown field index")
}

func (r *GridArea) SetDefault(i int) {
	switch i {
	case 0:
		r.Created = nil
		return
	case 1:
		r.FlowDirection = nil
		return
	case 2:
		r.GridAreaId = nil
		return
	case 3:
		r.GridId = nil
		return
	case 4:
		r.Id = nil
		return
	case 5:
		r.Name = nil
		return
	case 6:
		r.Updated = nil
		return
	}
	panic("Unknown field index")
}

func (r *GridArea) NullField(i int) {
	switch i {
	case 0:
		r.Created = nil
		return
	case 1:
		r.FlowDirection = nil
		return
	case 2:
		r.GridAreaId = nil
		return
	case 3:
		r.GridId = nil
		return
	case 4:
		r.Id = nil
		return
	case 5:
		r.Name = nil
		return
	case 6:
		r.Updated = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ GridArea) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ GridArea) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ GridArea) HintSize(int)                     { panic("Unsupported operation") }
func (_ GridArea) Finalize()                        {}

func (_ GridArea) AvroCRC64Fingerprint() []byte {
	return []byte(GridAreaAvroCRC64Fingerprint)
}

func (r GridArea) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Created"], err = json.Marshal(r.Created)
	if err != nil {
		return nil, err
	}
	output["FlowDirection"], err = json.Marshal(r.FlowDirection)
	if err != nil {
		return nil, err
	}
	output["GridAreaId"], err = json.Marshal(r.GridAreaId)
	if err != nil {
		return nil, err
	}
	output["GridId"], err = json.Marshal(r.GridId)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["Updated"], err = json.Marshal(r.Updated)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *GridArea) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Created"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created); err != nil {
			return err
		}
	} else {
		r.Created = NewUnionNullString()

		r.Created = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FlowDirection"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FlowDirection); err != nil {
			return err
		}
	} else {
		r.FlowDirection = NewUnionNullString()

		r.FlowDirection = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GridAreaId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GridAreaId); err != nil {
			return err
		}
	} else {
		r.GridAreaId = NewUnionNullString()

		r.GridAreaId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GridId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GridId); err != nil {
			return err
		}
	} else {
		r.GridId = NewUnionNullString()

		r.GridId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullString()

		r.Name = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Updated"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Updated); err != nil {
			return err
		}
	} else {
		r.Updated = NewUnionNullString()

		r.Updated = nil
	}
	return nil
}
