// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100147_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type FunctionalObjectType int32

const (
	FunctionalObjectTypeMaalepunkt           FunctionalObjectType = 0
	FunctionalObjectTypeNettstasjon          FunctionalObjectType = 1
	FunctionalObjectTypeTransformator        FunctionalObjectType = 2
	FunctionalObjectTypeTrafokrets           FunctionalObjectType = 3
	FunctionalObjectTypeSikring              FunctionalObjectType = 4
	FunctionalObjectTypeRelevern             FunctionalObjectType = 5
	FunctionalObjectTypeSamleskinne          FunctionalObjectType = 6
	FunctionalObjectTypeTransformatorstasjon FunctionalObjectType = 7
	FunctionalObjectTypeStikkledning         FunctionalObjectType = 8
)

func (e FunctionalObjectType) String() string {
	switch e {
	case FunctionalObjectTypeMaalepunkt:
		return "Maalepunkt"
	case FunctionalObjectTypeNettstasjon:
		return "Nettstasjon"
	case FunctionalObjectTypeTransformator:
		return "Transformator"
	case FunctionalObjectTypeTrafokrets:
		return "Trafokrets"
	case FunctionalObjectTypeSikring:
		return "Sikring"
	case FunctionalObjectTypeRelevern:
		return "Relevern"
	case FunctionalObjectTypeSamleskinne:
		return "Samleskinne"
	case FunctionalObjectTypeTransformatorstasjon:
		return "Transformatorstasjon"
	case FunctionalObjectTypeStikkledning:
		return "Stikkledning"
	}
	return "unknown"
}

func writeFunctionalObjectType(r FunctionalObjectType, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewFunctionalObjectTypeValue(raw string) (r FunctionalObjectType, err error) {
	switch raw {
	case "Maalepunkt":
		return FunctionalObjectTypeMaalepunkt, nil
	case "Nettstasjon":
		return FunctionalObjectTypeNettstasjon, nil
	case "Transformator":
		return FunctionalObjectTypeTransformator, nil
	case "Trafokrets":
		return FunctionalObjectTypeTrafokrets, nil
	case "Sikring":
		return FunctionalObjectTypeSikring, nil
	case "Relevern":
		return FunctionalObjectTypeRelevern, nil
	case "Samleskinne":
		return FunctionalObjectTypeSamleskinne, nil
	case "Transformatorstasjon":
		return FunctionalObjectTypeTransformatorstasjon, nil
	case "Stikkledning":
		return FunctionalObjectTypeStikkledning, nil
	}

	return -1, fmt.Errorf("invalid value for FunctionalObjectType: '%s'", raw)

}

func (b FunctionalObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *FunctionalObjectType) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewFunctionalObjectTypeValue(stringVal)
	*b = val
	return err
}

type FunctionalObjectTypeWrapper struct {
	Target *FunctionalObjectType
}

func (b FunctionalObjectTypeWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b FunctionalObjectTypeWrapper) SetInt(v int32) {
	*(b.Target) = FunctionalObjectType(v)
}

func (b FunctionalObjectTypeWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b FunctionalObjectTypeWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b FunctionalObjectTypeWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b FunctionalObjectTypeWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b FunctionalObjectTypeWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b FunctionalObjectTypeWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b FunctionalObjectTypeWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b FunctionalObjectTypeWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b FunctionalObjectTypeWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b FunctionalObjectTypeWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b FunctionalObjectTypeWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b FunctionalObjectTypeWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b FunctionalObjectTypeWrapper) Finalize() {}
