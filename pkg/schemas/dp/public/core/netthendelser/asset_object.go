// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100147_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AssetObject struct {
	AssetObjectId *UnionNullString `json:"AssetObjectId"`

	ConnectedTo *UnionNullString `json:"ConnectedTo"`

	Created string `json:"Created"`

	ParentAssetObjectId *UnionNullString `json:"ParentAssetObjectId"`

	ParentFunctionalObjectId *UnionNullString `json:"ParentFunctionalObjectId"`

	Status Status `json:"Status"`

	TechnicalProperties *UnionNullArrayUnionNullTechnicalProperty `json:"TechnicalProperties"`

	Type AssetObjectType `json:"Type"`

	Updated *UnionNullString `json:"Updated"`
}

const AssetObjectAvroCRC64Fingerprint = "|B\xddlq\xf9\xb9\xaa"

func NewAssetObject() AssetObject {
	r := AssetObject{}
	r.AssetObjectId = nil
	r.ConnectedTo = nil
	r.ParentAssetObjectId = nil
	r.ParentFunctionalObjectId = nil
	r.TechnicalProperties = nil
	r.Updated = nil
	return r
}

func DeserializeAssetObject(r io.Reader) (AssetObject, error) {
	t := NewAssetObject()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAssetObjectFromSchema(r io.Reader, schema string) (AssetObject, error) {
	t := NewAssetObject()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAssetObject(r AssetObject, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.AssetObjectId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ConnectedTo, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Created, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ParentAssetObjectId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ParentFunctionalObjectId, w)
	if err != nil {
		return err
	}
	err = writeStatus(r.Status, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullTechnicalProperty(r.TechnicalProperties, w)
	if err != nil {
		return err
	}
	err = writeAssetObjectType(r.Type, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Updated, w)
	if err != nil {
		return err
	}
	return err
}

func (r AssetObject) Serialize(w io.Writer) error {
	return writeAssetObject(r, w)
}

func (r AssetObject) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"AssetObjectId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ConnectedTo\",\"type\":[\"null\",\"string\"]},{\"name\":\"Created\",\"type\":\"string\"},{\"default\":null,\"name\":\"ParentAssetObjectId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ParentFunctionalObjectId\",\"type\":[\"null\",\"string\"]},{\"name\":\"Status\",\"type\":{\"name\":\"Status\",\"namespace\":\"Skogshorn.Nett.Schemas.Primitives\",\"symbols\":[\"Planned\",\"Created\",\"Activated\",\"Deactivated\",\"Installed\",\"Uninstalled\",\"Deleted\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"TechnicalProperties\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"name\":\"Created\",\"type\":\"string\"},{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Key\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"TechnicalPropertyId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Value\",\"type\":[\"null\",\"string\"]}],\"name\":\"TechnicalProperty\",\"namespace\":\"Skogshorn.Nett.Schemas.Primitives\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"name\":\"Type\",\"type\":{\"name\":\"AssetObjectType\",\"namespace\":\"Skogshorn.Nett.Schemas.Primitives\",\"symbols\":[\"Antenne\",\"Maaler\",\"Fake\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]}],\"name\":\"Skogshorn.Nett.Schemas.Enitites.AssetObject\",\"type\":\"record\"}"
}

func (r AssetObject) SchemaName() string {
	return "Skogshorn.Nett.Schemas.Enitites.AssetObject"
}

func (_ AssetObject) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AssetObject) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AssetObject) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AssetObject) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AssetObject) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AssetObject) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AssetObject) SetString(v string)   { panic("Unsupported operation") }
func (_ AssetObject) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AssetObject) Get(i int) types.Field {
	switch i {
	case 0:
		r.AssetObjectId = NewUnionNullString()

		return r.AssetObjectId
	case 1:
		r.ConnectedTo = NewUnionNullString()

		return r.ConnectedTo
	case 2:
		w := types.String{Target: &r.Created}

		return w

	case 3:
		r.ParentAssetObjectId = NewUnionNullString()

		return r.ParentAssetObjectId
	case 4:
		r.ParentFunctionalObjectId = NewUnionNullString()

		return r.ParentFunctionalObjectId
	case 5:
		w := StatusWrapper{Target: &r.Status}

		return w

	case 6:
		r.TechnicalProperties = NewUnionNullArrayUnionNullTechnicalProperty()

		return r.TechnicalProperties
	case 7:
		w := AssetObjectTypeWrapper{Target: &r.Type}

		return w

	case 8:
		r.Updated = NewUnionNullString()

		return r.Updated
	}
	panic("Unknown field index")
}

func (r *AssetObject) SetDefault(i int) {
	switch i {
	case 0:
		r.AssetObjectId = nil
		return
	case 1:
		r.ConnectedTo = nil
		return
	case 3:
		r.ParentAssetObjectId = nil
		return
	case 4:
		r.ParentFunctionalObjectId = nil
		return
	case 6:
		r.TechnicalProperties = nil
		return
	case 8:
		r.Updated = nil
		return
	}
	panic("Unknown field index")
}

func (r *AssetObject) NullField(i int) {
	switch i {
	case 0:
		r.AssetObjectId = nil
		return
	case 1:
		r.ConnectedTo = nil
		return
	case 3:
		r.ParentAssetObjectId = nil
		return
	case 4:
		r.ParentFunctionalObjectId = nil
		return
	case 6:
		r.TechnicalProperties = nil
		return
	case 8:
		r.Updated = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ AssetObject) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AssetObject) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AssetObject) HintSize(int)                     { panic("Unsupported operation") }
func (_ AssetObject) Finalize()                        {}

func (_ AssetObject) AvroCRC64Fingerprint() []byte {
	return []byte(AssetObjectAvroCRC64Fingerprint)
}

func (r AssetObject) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AssetObjectId"], err = json.Marshal(r.AssetObjectId)
	if err != nil {
		return nil, err
	}
	output["ConnectedTo"], err = json.Marshal(r.ConnectedTo)
	if err != nil {
		return nil, err
	}
	output["Created"], err = json.Marshal(r.Created)
	if err != nil {
		return nil, err
	}
	output["ParentAssetObjectId"], err = json.Marshal(r.ParentAssetObjectId)
	if err != nil {
		return nil, err
	}
	output["ParentFunctionalObjectId"], err = json.Marshal(r.ParentFunctionalObjectId)
	if err != nil {
		return nil, err
	}
	output["Status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["TechnicalProperties"], err = json.Marshal(r.TechnicalProperties)
	if err != nil {
		return nil, err
	}
	output["Type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	output["Updated"], err = json.Marshal(r.Updated)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AssetObject) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AssetObjectId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AssetObjectId); err != nil {
			return err
		}
	} else {
		r.AssetObjectId = NewUnionNullString()

		r.AssetObjectId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ConnectedTo"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConnectedTo); err != nil {
			return err
		}
	} else {
		r.ConnectedTo = NewUnionNullString()

		r.ConnectedTo = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Created"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Created")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ParentAssetObjectId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ParentAssetObjectId); err != nil {
			return err
		}
	} else {
		r.ParentAssetObjectId = NewUnionNullString()

		r.ParentAssetObjectId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ParentFunctionalObjectId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ParentFunctionalObjectId); err != nil {
			return err
		}
	} else {
		r.ParentFunctionalObjectId = NewUnionNullString()

		r.ParentFunctionalObjectId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TechnicalProperties"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TechnicalProperties); err != nil {
			return err
		}
	} else {
		r.TechnicalProperties = NewUnionNullArrayUnionNullTechnicalProperty()

		r.TechnicalProperties = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Updated"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Updated); err != nil {
			return err
		}
	} else {
		r.Updated = NewUnionNullString()

		r.Updated = nil
	}
	return nil
}
