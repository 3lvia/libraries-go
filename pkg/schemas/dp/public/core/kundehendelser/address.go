// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100159_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Address struct {
	AddressId int32 `json:"AddressId"`

	AttentionOf *UnionNullString `json:"AttentionOf"`

	CareOf *UnionNullString `json:"CareOf"`

	CountryCode *UnionNullString `json:"CountryCode"`

	FakedAddressId int32 `json:"FakedAddressId"`

	Floor *UnionNullString `json:"Floor"`

	HouseLetter *UnionNullString `json:"HouseLetter"`

	HouseNumber int32 `json:"HouseNumber"`

	Municipality *UnionNullString `json:"Municipality"`

	OnBehalf *UnionNullString `json:"OnBehalf"`

	PostBox *UnionNullString `json:"PostBox"`

	PostCode *UnionNullString `json:"PostCode"`

	StreetName *UnionNullString `json:"StreetName"`

	Updated *UnionNullString `json:"Updated"`
}

const AddressAvroCRC64Fingerprint = "FT\xf3\xfe\xae\xbf\xfb\t"

func NewAddress() Address {
	r := Address{}
	r.AttentionOf = nil
	r.CareOf = nil
	r.CountryCode = nil
	r.Floor = nil
	r.HouseLetter = nil
	r.Municipality = nil
	r.OnBehalf = nil
	r.PostBox = nil
	r.PostCode = nil
	r.StreetName = nil
	r.Updated = nil
	return r
}

func DeserializeAddress(r io.Reader) (Address, error) {
	t := NewAddress()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAddressFromSchema(r io.Reader, schema string) (Address, error) {
	t := NewAddress()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAddress(r Address, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.AddressId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AttentionOf, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CareOf, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CountryCode, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.FakedAddressId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Floor, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.HouseLetter, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.HouseNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Municipality, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OnBehalf, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PostBox, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PostCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.StreetName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Updated, w)
	if err != nil {
		return err
	}
	return err
}

func (r Address) Serialize(w io.Writer) error {
	return writeAddress(r, w)
}

func (r Address) Schema() string {
	return "{\"fields\":[{\"name\":\"AddressId\",\"type\":\"int\"},{\"default\":null,\"name\":\"AttentionOf\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CareOf\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CountryCode\",\"type\":[\"null\",\"string\"]},{\"name\":\"FakedAddressId\",\"type\":\"int\"},{\"default\":null,\"name\":\"Floor\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HouseLetter\",\"type\":[\"null\",\"string\"]},{\"name\":\"HouseNumber\",\"type\":\"int\"},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OnBehalf\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostBox\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]}],\"name\":\"Skogshorn.Kunde.Schemas.Entities.Address\",\"type\":\"record\"}"
}

func (r Address) SchemaName() string {
	return "Skogshorn.Kunde.Schemas.Entities.Address"
}

func (_ Address) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Address) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Address) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Address) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Address) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Address) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Address) SetString(v string)   { panic("Unsupported operation") }
func (_ Address) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Address) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.AddressId}

		return w

	case 1:
		r.AttentionOf = NewUnionNullString()

		return r.AttentionOf
	case 2:
		r.CareOf = NewUnionNullString()

		return r.CareOf
	case 3:
		r.CountryCode = NewUnionNullString()

		return r.CountryCode
	case 4:
		w := types.Int{Target: &r.FakedAddressId}

		return w

	case 5:
		r.Floor = NewUnionNullString()

		return r.Floor
	case 6:
		r.HouseLetter = NewUnionNullString()

		return r.HouseLetter
	case 7:
		w := types.Int{Target: &r.HouseNumber}

		return w

	case 8:
		r.Municipality = NewUnionNullString()

		return r.Municipality
	case 9:
		r.OnBehalf = NewUnionNullString()

		return r.OnBehalf
	case 10:
		r.PostBox = NewUnionNullString()

		return r.PostBox
	case 11:
		r.PostCode = NewUnionNullString()

		return r.PostCode
	case 12:
		r.StreetName = NewUnionNullString()

		return r.StreetName
	case 13:
		r.Updated = NewUnionNullString()

		return r.Updated
	}
	panic("Unknown field index")
}

func (r *Address) SetDefault(i int) {
	switch i {
	case 1:
		r.AttentionOf = nil
		return
	case 2:
		r.CareOf = nil
		return
	case 3:
		r.CountryCode = nil
		return
	case 5:
		r.Floor = nil
		return
	case 6:
		r.HouseLetter = nil
		return
	case 8:
		r.Municipality = nil
		return
	case 9:
		r.OnBehalf = nil
		return
	case 10:
		r.PostBox = nil
		return
	case 11:
		r.PostCode = nil
		return
	case 12:
		r.StreetName = nil
		return
	case 13:
		r.Updated = nil
		return
	}
	panic("Unknown field index")
}

func (r *Address) NullField(i int) {
	switch i {
	case 1:
		r.AttentionOf = nil
		return
	case 2:
		r.CareOf = nil
		return
	case 3:
		r.CountryCode = nil
		return
	case 5:
		r.Floor = nil
		return
	case 6:
		r.HouseLetter = nil
		return
	case 8:
		r.Municipality = nil
		return
	case 9:
		r.OnBehalf = nil
		return
	case 10:
		r.PostBox = nil
		return
	case 11:
		r.PostCode = nil
		return
	case 12:
		r.StreetName = nil
		return
	case 13:
		r.Updated = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Address) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Address) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Address) HintSize(int)                     { panic("Unsupported operation") }
func (_ Address) Finalize()                        {}

func (_ Address) AvroCRC64Fingerprint() []byte {
	return []byte(AddressAvroCRC64Fingerprint)
}

func (r Address) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["AddressId"], err = json.Marshal(r.AddressId)
	if err != nil {
		return nil, err
	}
	output["AttentionOf"], err = json.Marshal(r.AttentionOf)
	if err != nil {
		return nil, err
	}
	output["CareOf"], err = json.Marshal(r.CareOf)
	if err != nil {
		return nil, err
	}
	output["CountryCode"], err = json.Marshal(r.CountryCode)
	if err != nil {
		return nil, err
	}
	output["FakedAddressId"], err = json.Marshal(r.FakedAddressId)
	if err != nil {
		return nil, err
	}
	output["Floor"], err = json.Marshal(r.Floor)
	if err != nil {
		return nil, err
	}
	output["HouseLetter"], err = json.Marshal(r.HouseLetter)
	if err != nil {
		return nil, err
	}
	output["HouseNumber"], err = json.Marshal(r.HouseNumber)
	if err != nil {
		return nil, err
	}
	output["Municipality"], err = json.Marshal(r.Municipality)
	if err != nil {
		return nil, err
	}
	output["OnBehalf"], err = json.Marshal(r.OnBehalf)
	if err != nil {
		return nil, err
	}
	output["PostBox"], err = json.Marshal(r.PostBox)
	if err != nil {
		return nil, err
	}
	output["PostCode"], err = json.Marshal(r.PostCode)
	if err != nil {
		return nil, err
	}
	output["StreetName"], err = json.Marshal(r.StreetName)
	if err != nil {
		return nil, err
	}
	output["Updated"], err = json.Marshal(r.Updated)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Address) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["AddressId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AddressId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for AddressId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["AttentionOf"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AttentionOf); err != nil {
			return err
		}
	} else {
		r.AttentionOf = NewUnionNullString()

		r.AttentionOf = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CareOf"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CareOf); err != nil {
			return err
		}
	} else {
		r.CareOf = NewUnionNullString()

		r.CareOf = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CountryCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CountryCode); err != nil {
			return err
		}
	} else {
		r.CountryCode = NewUnionNullString()

		r.CountryCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FakedAddressId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FakedAddressId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for FakedAddressId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Floor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Floor); err != nil {
			return err
		}
	} else {
		r.Floor = NewUnionNullString()

		r.Floor = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HouseLetter"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HouseLetter); err != nil {
			return err
		}
	} else {
		r.HouseLetter = NewUnionNullString()

		r.HouseLetter = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HouseNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HouseNumber); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for HouseNumber")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Municipality"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Municipality); err != nil {
			return err
		}
	} else {
		r.Municipality = NewUnionNullString()

		r.Municipality = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OnBehalf"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OnBehalf); err != nil {
			return err
		}
	} else {
		r.OnBehalf = NewUnionNullString()

		r.OnBehalf = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PostBox"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostBox); err != nil {
			return err
		}
	} else {
		r.PostBox = NewUnionNullString()

		r.PostBox = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PostCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostCode); err != nil {
			return err
		}
	} else {
		r.PostCode = NewUnionNullString()

		r.PostCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StreetName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StreetName); err != nil {
			return err
		}
	} else {
		r.StreetName = NewUnionNullString()

		r.StreetName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Updated"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Updated); err != nil {
			return err
		}
	} else {
		r.Updated = NewUnionNullString()

		r.Updated = nil
	}
	return nil
}
