// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100159_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Contract struct {
	ContractId int32 `json:"ContractId"`

	EndTime *UnionNullString `json:"EndTime"`

	InvoiceAddress *UnionNullAddress `json:"InvoiceAddress"`

	MeteringPointId *UnionNullString `json:"MeteringPointId"`

	MeterValueProfile *UnionNullMeterValueProfile `json:"MeterValueProfile"`

	NetProduct *UnionNullNetProduct `json:"NetProduct"`

	PostalAddress *UnionNullAddress `json:"PostalAddress"`

	SettlementMethod SettlementMethod `json:"SettlementMethod"`

	StartTime string `json:"StartTime"`
}

const ContractAvroCRC64Fingerprint = "q\x89e\xd4.\xda’æ"

func NewContract() Contract {
	r := Contract{}
	r.EndTime = nil
	r.InvoiceAddress = nil
	r.MeteringPointId = nil
	r.MeterValueProfile = nil
	r.NetProduct = nil
	r.PostalAddress = nil
	return r
}

func DeserializeContract(r io.Reader) (Contract, error) {
	t := NewContract()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeContractFromSchema(r io.Reader, schema string) (Contract, error) {
	t := NewContract()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeContract(r Contract, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.ContractId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.EndTime, w)
	if err != nil {
		return err
	}
	err = writeUnionNullAddress(r.InvoiceAddress, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MeteringPointId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeterValueProfile(r.MeterValueProfile, w)
	if err != nil {
		return err
	}
	err = writeUnionNullNetProduct(r.NetProduct, w)
	if err != nil {
		return err
	}
	err = writeUnionNullAddress(r.PostalAddress, w)
	if err != nil {
		return err
	}
	err = writeSettlementMethod(r.SettlementMethod, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.StartTime, w)
	if err != nil {
		return err
	}
	return err
}

func (r Contract) Serialize(w io.Writer) error {
	return writeContract(r, w)
}

func (r Contract) Schema() string {
	return "{\"fields\":[{\"name\":\"ContractId\",\"type\":\"int\"},{\"default\":null,\"name\":\"EndTime\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"InvoiceAddress\",\"type\":[\"null\",{\"fields\":[{\"name\":\"AddressId\",\"type\":\"int\"},{\"default\":null,\"name\":\"AttentionOf\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CareOf\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CountryCode\",\"type\":[\"null\",\"string\"]},{\"name\":\"FakedAddressId\",\"type\":\"int\"},{\"default\":null,\"name\":\"Floor\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HouseLetter\",\"type\":[\"null\",\"string\"]},{\"name\":\"HouseNumber\",\"type\":\"int\"},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OnBehalf\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostBox\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Updated\",\"type\":[\"null\",\"string\"]}],\"name\":\"Address\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"MeteringPointId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MeterValueProfile\",\"type\":[\"null\",{\"fields\":[{\"name\":\"MeterValueProfileId\",\"type\":\"int\"},{\"default\":null,\"name\":\"Method\",\"type\":[\"null\",{\"name\":\"Method\",\"symbols\":[\"Automatic\",\"Manual\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"Resolution\",\"type\":[\"null\",{\"name\":\"MeterValueResolution\",\"symbols\":[\"Quarterly\",\"Hourly\"],\"type\":\"enum\"}]}],\"name\":\"MeterValueProfile\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"NetProduct\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]},{\"name\":\"NetProductId\",\"type\":\"int\"}],\"name\":\"NetProduct\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"PostalAddress\",\"type\":[\"null\",\"Skogshorn.Kunde.Schemas.Entities.Address\"]},{\"name\":\"SettlementMethod\",\"type\":{\"name\":\"SettlementMethod\",\"symbols\":[\"Hourly\",\"Profile\"],\"type\":\"enum\"}},{\"name\":\"StartTime\",\"type\":\"string\"}],\"name\":\"Skogshorn.Kunde.Schemas.Entities.Contract\",\"type\":\"record\"}"
}

func (r Contract) SchemaName() string {
	return "Skogshorn.Kunde.Schemas.Entities.Contract"
}

func (_ Contract) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Contract) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Contract) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Contract) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Contract) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Contract) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Contract) SetString(v string)   { panic("Unsupported operation") }
func (_ Contract) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Contract) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.ContractId}

		return w

	case 1:
		r.EndTime = NewUnionNullString()

		return r.EndTime
	case 2:
		r.InvoiceAddress = NewUnionNullAddress()

		return r.InvoiceAddress
	case 3:
		r.MeteringPointId = NewUnionNullString()

		return r.MeteringPointId
	case 4:
		r.MeterValueProfile = NewUnionNullMeterValueProfile()

		return r.MeterValueProfile
	case 5:
		r.NetProduct = NewUnionNullNetProduct()

		return r.NetProduct
	case 6:
		r.PostalAddress = NewUnionNullAddress()

		return r.PostalAddress
	case 7:
		w := SettlementMethodWrapper{Target: &r.SettlementMethod}

		return w

	case 8:
		w := types.String{Target: &r.StartTime}

		return w

	}
	panic("Unknown field index")
}

func (r *Contract) SetDefault(i int) {
	switch i {
	case 1:
		r.EndTime = nil
		return
	case 2:
		r.InvoiceAddress = nil
		return
	case 3:
		r.MeteringPointId = nil
		return
	case 4:
		r.MeterValueProfile = nil
		return
	case 5:
		r.NetProduct = nil
		return
	case 6:
		r.PostalAddress = nil
		return
	}
	panic("Unknown field index")
}

func (r *Contract) NullField(i int) {
	switch i {
	case 1:
		r.EndTime = nil
		return
	case 2:
		r.InvoiceAddress = nil
		return
	case 3:
		r.MeteringPointId = nil
		return
	case 4:
		r.MeterValueProfile = nil
		return
	case 5:
		r.NetProduct = nil
		return
	case 6:
		r.PostalAddress = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Contract) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Contract) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Contract) HintSize(int)                     { panic("Unsupported operation") }
func (_ Contract) Finalize()                        {}

func (_ Contract) AvroCRC64Fingerprint() []byte {
	return []byte(ContractAvroCRC64Fingerprint)
}

func (r Contract) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ContractId"], err = json.Marshal(r.ContractId)
	if err != nil {
		return nil, err
	}
	output["EndTime"], err = json.Marshal(r.EndTime)
	if err != nil {
		return nil, err
	}
	output["InvoiceAddress"], err = json.Marshal(r.InvoiceAddress)
	if err != nil {
		return nil, err
	}
	output["MeteringPointId"], err = json.Marshal(r.MeteringPointId)
	if err != nil {
		return nil, err
	}
	output["MeterValueProfile"], err = json.Marshal(r.MeterValueProfile)
	if err != nil {
		return nil, err
	}
	output["NetProduct"], err = json.Marshal(r.NetProduct)
	if err != nil {
		return nil, err
	}
	output["PostalAddress"], err = json.Marshal(r.PostalAddress)
	if err != nil {
		return nil, err
	}
	output["SettlementMethod"], err = json.Marshal(r.SettlementMethod)
	if err != nil {
		return nil, err
	}
	output["StartTime"], err = json.Marshal(r.StartTime)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Contract) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ContractId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ContractId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ContractId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["EndTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndTime); err != nil {
			return err
		}
	} else {
		r.EndTime = NewUnionNullString()

		r.EndTime = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InvoiceAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InvoiceAddress); err != nil {
			return err
		}
	} else {
		r.InvoiceAddress = NewUnionNullAddress()

		r.InvoiceAddress = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeteringPointId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeteringPointId); err != nil {
			return err
		}
	} else {
		r.MeteringPointId = NewUnionNullString()

		r.MeteringPointId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeterValueProfile"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeterValueProfile); err != nil {
			return err
		}
	} else {
		r.MeterValueProfile = NewUnionNullMeterValueProfile()

		r.MeterValueProfile = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NetProduct"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NetProduct); err != nil {
			return err
		}
	} else {
		r.NetProduct = NewUnionNullNetProduct()

		r.NetProduct = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PostalAddress"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostalAddress); err != nil {
			return err
		}
	} else {
		r.PostalAddress = NewUnionNullAddress()

		r.PostalAddress = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SettlementMethod"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SettlementMethod); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SettlementMethod")
	}
	val = func() json.RawMessage {
		if v, ok := fields["StartTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartTime); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for StartTime")
	}
	return nil
}
