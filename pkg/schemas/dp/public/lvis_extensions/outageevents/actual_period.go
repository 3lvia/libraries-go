// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100450_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ActualPeriod struct {
	End *UnionNullString `json:"end"`

	Start *UnionNullString `json:"start"`
}

const ActualPeriodAvroCRC64Fingerprint = "\xe3@X\x88y\xa8\xa8\x8d"

func NewActualPeriod() ActualPeriod {
	r := ActualPeriod{}
	r.End = nil
	r.Start = nil
	return r
}

func DeserializeActualPeriod(r io.Reader) (ActualPeriod, error) {
	t := NewActualPeriod()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeActualPeriodFromSchema(r io.Reader, schema string) (ActualPeriod, error) {
	t := NewActualPeriod()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeActualPeriod(r ActualPeriod, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.End, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Start, w)
	if err != nil {
		return err
	}
	return err
}

func (r ActualPeriod) Serialize(w io.Writer) error {
	return writeActualPeriod(r, w)
}

func (r ActualPeriod) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"end\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"start\",\"type\":[\"null\",\"string\"]}],\"name\":\"OutageEventsLvisToElvia.Kafka.Dto.ActualPeriod\",\"type\":\"record\"}"
}

func (r ActualPeriod) SchemaName() string {
	return "OutageEventsLvisToElvia.Kafka.Dto.ActualPeriod"
}

func (_ ActualPeriod) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ActualPeriod) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ActualPeriod) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ActualPeriod) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ActualPeriod) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ActualPeriod) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ActualPeriod) SetString(v string)   { panic("Unsupported operation") }
func (_ ActualPeriod) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ActualPeriod) Get(i int) types.Field {
	switch i {
	case 0:
		r.End = NewUnionNullString()

		return r.End
	case 1:
		r.Start = NewUnionNullString()

		return r.Start
	}
	panic("Unknown field index")
}

func (r *ActualPeriod) SetDefault(i int) {
	switch i {
	case 0:
		r.End = nil
		return
	case 1:
		r.Start = nil
		return
	}
	panic("Unknown field index")
}

func (r *ActualPeriod) NullField(i int) {
	switch i {
	case 0:
		r.End = nil
		return
	case 1:
		r.Start = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ActualPeriod) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ActualPeriod) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ActualPeriod) HintSize(int)                     { panic("Unsupported operation") }
func (_ ActualPeriod) Finalize()                        {}

func (_ ActualPeriod) AvroCRC64Fingerprint() []byte {
	return []byte(ActualPeriodAvroCRC64Fingerprint)
}

func (r ActualPeriod) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["end"], err = json.Marshal(r.End)
	if err != nil {
		return nil, err
	}
	output["start"], err = json.Marshal(r.Start)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ActualPeriod) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["end"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.End); err != nil {
			return err
		}
	} else {
		r.End = NewUnionNullString()

		r.End = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["start"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Start); err != nil {
			return err
		}
	} else {
		r.Start = NewUnionNullString()

		r.Start = nil
	}
	return nil
}
