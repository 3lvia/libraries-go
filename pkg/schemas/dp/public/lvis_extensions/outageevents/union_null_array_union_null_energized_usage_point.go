// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100450_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayUnionNullEnergizedUsagePointTypeEnum int

const (
	UnionNullArrayUnionNullEnergizedUsagePointTypeEnumArrayUnionNullEnergizedUsagePoint UnionNullArrayUnionNullEnergizedUsagePointTypeEnum = 1
)

type UnionNullArrayUnionNullEnergizedUsagePoint struct {
	Null                              *types.NullVal
	ArrayUnionNullEnergizedUsagePoint []*UnionNullEnergizedUsagePoint
	UnionType                         UnionNullArrayUnionNullEnergizedUsagePointTypeEnum
}

func writeUnionNullArrayUnionNullEnergizedUsagePoint(r *UnionNullArrayUnionNullEnergizedUsagePoint, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayUnionNullEnergizedUsagePointTypeEnumArrayUnionNullEnergizedUsagePoint:
		return writeArrayUnionNullEnergizedUsagePoint(r.ArrayUnionNullEnergizedUsagePoint, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullEnergizedUsagePoint")
}

func NewUnionNullArrayUnionNullEnergizedUsagePoint() *UnionNullArrayUnionNullEnergizedUsagePoint {
	return &UnionNullArrayUnionNullEnergizedUsagePoint{}
}

func (r *UnionNullArrayUnionNullEnergizedUsagePoint) Serialize(w io.Writer) error {
	return writeUnionNullArrayUnionNullEnergizedUsagePoint(r, w)
}

func DeserializeUnionNullArrayUnionNullEnergizedUsagePoint(r io.Reader) (*UnionNullArrayUnionNullEnergizedUsagePoint, error) {
	t := NewUnionNullArrayUnionNullEnergizedUsagePoint()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayUnionNullEnergizedUsagePointFromSchema(r io.Reader, schema string) (*UnionNullArrayUnionNullEnergizedUsagePoint, error) {
	t := NewUnionNullArrayUnionNullEnergizedUsagePoint()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayUnionNullEnergizedUsagePoint) Schema() string {
	return "[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"mrid\",\"type\":[\"null\",\"string\"]}],\"name\":\"EnergizedUsagePoint\",\"type\":\"record\"}],\"type\":\"array\"}]"
}

func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) SetBoolean(v bool) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) SetInt(v int32) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) SetFloat(v float32) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) SetBytes(v []byte) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) SetString(v string) {
	panic("Unsupported operation")
}

func (r *UnionNullArrayUnionNullEnergizedUsagePoint) SetLong(v int64) {

	r.UnionType = (UnionNullArrayUnionNullEnergizedUsagePointTypeEnum)(v)
}

func (r *UnionNullArrayUnionNullEnergizedUsagePoint) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayUnionNullEnergizedUsagePoint = make([]*UnionNullEnergizedUsagePoint, 0)
		return &ArrayUnionNullEnergizedUsagePointWrapper{Target: (&r.ArrayUnionNullEnergizedUsagePoint)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) NullField(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) HintSize(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) SetDefault(i int) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayUnionNullEnergizedUsagePoint) Finalize() {}

func (r *UnionNullArrayUnionNullEnergizedUsagePoint) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayUnionNullEnergizedUsagePointTypeEnumArrayUnionNullEnergizedUsagePoint:
		return json.Marshal(map[string]interface{}{"array": r.ArrayUnionNullEnergizedUsagePoint})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayUnionNullEnergizedUsagePoint")
}

func (r *UnionNullArrayUnionNullEnergizedUsagePoint) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayUnionNullEnergizedUsagePoint)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayUnionNullEnergizedUsagePoint")
}
