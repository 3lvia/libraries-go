// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100450_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EnergizedUsagePoint struct {
	Mrid *UnionNullString `json:"mrid"`
}

const EnergizedUsagePointAvroCRC64Fingerprint = "\xd3\x11@\x89T\xf8\x03\xc3"

func NewEnergizedUsagePoint() EnergizedUsagePoint {
	r := EnergizedUsagePoint{}
	r.Mrid = nil
	return r
}

func DeserializeEnergizedUsagePoint(r io.Reader) (EnergizedUsagePoint, error) {
	t := NewEnergizedUsagePoint()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnergizedUsagePointFromSchema(r io.Reader, schema string) (EnergizedUsagePoint, error) {
	t := NewEnergizedUsagePoint()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnergizedUsagePoint(r EnergizedUsagePoint, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Mrid, w)
	if err != nil {
		return err
	}
	return err
}

func (r EnergizedUsagePoint) Serialize(w io.Writer) error {
	return writeEnergizedUsagePoint(r, w)
}

func (r EnergizedUsagePoint) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"mrid\",\"type\":[\"null\",\"string\"]}],\"name\":\"OutageEventsLvisToElvia.Kafka.Dto.EnergizedUsagePoint\",\"type\":\"record\"}"
}

func (r EnergizedUsagePoint) SchemaName() string {
	return "OutageEventsLvisToElvia.Kafka.Dto.EnergizedUsagePoint"
}

func (_ EnergizedUsagePoint) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EnergizedUsagePoint) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EnergizedUsagePoint) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EnergizedUsagePoint) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EnergizedUsagePoint) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EnergizedUsagePoint) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EnergizedUsagePoint) SetString(v string)   { panic("Unsupported operation") }
func (_ EnergizedUsagePoint) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EnergizedUsagePoint) Get(i int) types.Field {
	switch i {
	case 0:
		r.Mrid = NewUnionNullString()

		return r.Mrid
	}
	panic("Unknown field index")
}

func (r *EnergizedUsagePoint) SetDefault(i int) {
	switch i {
	case 0:
		r.Mrid = nil
		return
	}
	panic("Unknown field index")
}

func (r *EnergizedUsagePoint) NullField(i int) {
	switch i {
	case 0:
		r.Mrid = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ EnergizedUsagePoint) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EnergizedUsagePoint) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EnergizedUsagePoint) HintSize(int)                     { panic("Unsupported operation") }
func (_ EnergizedUsagePoint) Finalize()                        {}

func (_ EnergizedUsagePoint) AvroCRC64Fingerprint() []byte {
	return []byte(EnergizedUsagePointAvroCRC64Fingerprint)
}

func (r EnergizedUsagePoint) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["mrid"], err = json.Marshal(r.Mrid)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EnergizedUsagePoint) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["mrid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mrid); err != nil {
			return err
		}
	} else {
		r.Mrid = NewUnionNullString()

		r.Mrid = nil
	}
	return nil
}
