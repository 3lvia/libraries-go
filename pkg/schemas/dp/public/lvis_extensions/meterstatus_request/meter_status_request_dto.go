// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100419_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MeterStatusRequestDto struct {
	Data *UnionNullData `json:"Data"`

	Datacontenttype *UnionNullString `json:"Datacontenttype"`

	Id *UnionNullString `json:"Id"`

	Source *UnionNullString `json:"Source"`

	Specversion *UnionNullString `json:"Specversion"`

	Time string `json:"Time"`

	Type *UnionNullString `json:"Type"`
}

const MeterStatusRequestDtoAvroCRC64Fingerprint = "ZD\r\xa1\a\xb1\xe7\xa4"

func NewMeterStatusRequestDto() MeterStatusRequestDto {
	r := MeterStatusRequestDto{}
	r.Data = nil
	r.Datacontenttype = nil
	r.Id = nil
	r.Source = nil
	r.Specversion = nil
	r.Type = nil
	return r
}

func DeserializeMeterStatusRequestDto(r io.Reader) (MeterStatusRequestDto, error) {
	t := NewMeterStatusRequestDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMeterStatusRequestDtoFromSchema(r io.Reader, schema string) (MeterStatusRequestDto, error) {
	t := NewMeterStatusRequestDto()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMeterStatusRequestDto(r MeterStatusRequestDto, w io.Writer) error {
	var err error
	err = writeUnionNullData(r.Data, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Datacontenttype, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Source, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Specversion, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Time, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Type, w)
	if err != nil {
		return err
	}
	return err
}

func (r MeterStatusRequestDto) Serialize(w io.Writer) error {
	return writeMeterStatusRequestDto(r, w)
}

func (r MeterStatusRequestDto) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Data\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"EndDeviceEvents\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"UsagePoint\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"MRid\",\"type\":[\"null\",\"string\"]}],\"name\":\"UsagePoint\",\"type\":\"record\"}]}],\"name\":\"EndDeviceEvent\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"Operation\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CorrelationId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"MessageType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Type\",\"type\":[\"null\",\"string\"]}],\"name\":\"Operation\",\"type\":\"record\"}]}],\"name\":\"Data\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Datacontenttype\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Source\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Specversion\",\"type\":[\"null\",\"string\"]},{\"name\":\"Time\",\"type\":\"string\"},{\"default\":null,\"name\":\"Type\",\"type\":[\"null\",\"string\"]}],\"name\":\"LvisToMsi.Kafka.Dto.MeterStatusRequestDto\",\"type\":\"record\"}"
}

func (r MeterStatusRequestDto) SchemaName() string {
	return "LvisToMsi.Kafka.Dto.MeterStatusRequestDto"
}

func (_ MeterStatusRequestDto) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MeterStatusRequestDto) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MeterStatusRequestDto) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MeterStatusRequestDto) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MeterStatusRequestDto) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MeterStatusRequestDto) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MeterStatusRequestDto) SetString(v string)   { panic("Unsupported operation") }
func (_ MeterStatusRequestDto) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MeterStatusRequestDto) Get(i int) types.Field {
	switch i {
	case 0:
		r.Data = NewUnionNullData()

		return r.Data
	case 1:
		r.Datacontenttype = NewUnionNullString()

		return r.Datacontenttype
	case 2:
		r.Id = NewUnionNullString()

		return r.Id
	case 3:
		r.Source = NewUnionNullString()

		return r.Source
	case 4:
		r.Specversion = NewUnionNullString()

		return r.Specversion
	case 5:
		w := types.String{Target: &r.Time}

		return w

	case 6:
		r.Type = NewUnionNullString()

		return r.Type
	}
	panic("Unknown field index")
}

func (r *MeterStatusRequestDto) SetDefault(i int) {
	switch i {
	case 0:
		r.Data = nil
		return
	case 1:
		r.Datacontenttype = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.Source = nil
		return
	case 4:
		r.Specversion = nil
		return
	case 6:
		r.Type = nil
		return
	}
	panic("Unknown field index")
}

func (r *MeterStatusRequestDto) NullField(i int) {
	switch i {
	case 0:
		r.Data = nil
		return
	case 1:
		r.Datacontenttype = nil
		return
	case 2:
		r.Id = nil
		return
	case 3:
		r.Source = nil
		return
	case 4:
		r.Specversion = nil
		return
	case 6:
		r.Type = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ MeterStatusRequestDto) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MeterStatusRequestDto) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MeterStatusRequestDto) HintSize(int)                     { panic("Unsupported operation") }
func (_ MeterStatusRequestDto) Finalize()                        {}

func (_ MeterStatusRequestDto) AvroCRC64Fingerprint() []byte {
	return []byte(MeterStatusRequestDtoAvroCRC64Fingerprint)
}

func (r MeterStatusRequestDto) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Data"], err = json.Marshal(r.Data)
	if err != nil {
		return nil, err
	}
	output["Datacontenttype"], err = json.Marshal(r.Datacontenttype)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["Source"], err = json.Marshal(r.Source)
	if err != nil {
		return nil, err
	}
	output["Specversion"], err = json.Marshal(r.Specversion)
	if err != nil {
		return nil, err
	}
	output["Time"], err = json.Marshal(r.Time)
	if err != nil {
		return nil, err
	}
	output["Type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MeterStatusRequestDto) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Data"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Data); err != nil {
			return err
		}
	} else {
		r.Data = NewUnionNullData()

		r.Data = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Datacontenttype"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Datacontenttype); err != nil {
			return err
		}
	} else {
		r.Datacontenttype = NewUnionNullString()

		r.Datacontenttype = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Source"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Source); err != nil {
			return err
		}
	} else {
		r.Source = NewUnionNullString()

		r.Source = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Specversion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Specversion); err != nil {
			return err
		}
	} else {
		r.Specversion = NewUnionNullString()

		r.Specversion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Time"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Time); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Time")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		r.Type = NewUnionNullString()

		r.Type = nil
	}
	return nil
}
