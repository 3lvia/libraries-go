// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100419_2.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type UsagePoint struct {
	MRid *UnionNullString `json:"MRid"`
}

const UsagePointAvroCRC64Fingerprint = "\xefM\x8dWÔ­\x911"

func NewUsagePoint() UsagePoint {
	r := UsagePoint{}
	r.MRid = nil
	return r
}

func DeserializeUsagePoint(r io.Reader) (UsagePoint, error) {
	t := NewUsagePoint()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUsagePointFromSchema(r io.Reader, schema string) (UsagePoint, error) {
	t := NewUsagePoint()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUsagePoint(r UsagePoint, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.MRid, w)
	if err != nil {
		return err
	}
	return err
}

func (r UsagePoint) Serialize(w io.Writer) error {
	return writeUsagePoint(r, w)
}

func (r UsagePoint) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"MRid\",\"type\":[\"null\",\"string\"]}],\"name\":\"LvisToMsi.Kafka.Dto.UsagePoint\",\"type\":\"record\"}"
}

func (r UsagePoint) SchemaName() string {
	return "LvisToMsi.Kafka.Dto.UsagePoint"
}

func (_ UsagePoint) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ UsagePoint) SetInt(v int32)       { panic("Unsupported operation") }
func (_ UsagePoint) SetLong(v int64)      { panic("Unsupported operation") }
func (_ UsagePoint) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ UsagePoint) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ UsagePoint) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ UsagePoint) SetString(v string)   { panic("Unsupported operation") }
func (_ UsagePoint) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *UsagePoint) Get(i int) types.Field {
	switch i {
	case 0:
		r.MRid = NewUnionNullString()

		return r.MRid
	}
	panic("Unknown field index")
}

func (r *UsagePoint) SetDefault(i int) {
	switch i {
	case 0:
		r.MRid = nil
		return
	}
	panic("Unknown field index")
}

func (r *UsagePoint) NullField(i int) {
	switch i {
	case 0:
		r.MRid = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ UsagePoint) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ UsagePoint) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ UsagePoint) HintSize(int)                     { panic("Unsupported operation") }
func (_ UsagePoint) Finalize()                        {}

func (_ UsagePoint) AvroCRC64Fingerprint() []byte {
	return []byte(UsagePointAvroCRC64Fingerprint)
}

func (r UsagePoint) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["MRid"], err = json.Marshal(r.MRid)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *UsagePoint) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["MRid"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MRid); err != nil {
			return err
		}
	} else {
		r.MRid = NewUnionNullString()

		r.MRid = nil
	}
	return nil
}
