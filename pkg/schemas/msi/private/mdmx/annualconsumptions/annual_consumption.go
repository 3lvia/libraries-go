// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100177_1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AnnualConsumption struct {
	CreatedAt string `json:"CreatedAt"`

	Estimation int32 `json:"Estimation"`

	MeteringPointId *UnionNullString `json:"MeteringPointId"`
}

const AnnualConsumptionAvroCRC64Fingerprint = "Z[\xb9H\xb5\x80\x94\xd1"

func NewAnnualConsumption() AnnualConsumption {
	r := AnnualConsumption{}
	r.MeteringPointId = nil
	return r
}

func DeserializeAnnualConsumption(r io.Reader) (AnnualConsumption, error) {
	t := NewAnnualConsumption()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAnnualConsumptionFromSchema(r io.Reader, schema string) (AnnualConsumption, error) {
	t := NewAnnualConsumption()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAnnualConsumption(r AnnualConsumption, w io.Writer) error {
	var err error
	err = vm.WriteString(r.CreatedAt, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Estimation, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MeteringPointId, w)
	if err != nil {
		return err
	}
	return err
}

func (r AnnualConsumption) Serialize(w io.Writer) error {
	return writeAnnualConsumption(r, w)
}

func (r AnnualConsumption) Schema() string {
	return "{\"fields\":[{\"name\":\"CreatedAt\",\"type\":\"string\"},{\"name\":\"Estimation\",\"type\":\"int\"},{\"default\":null,\"name\":\"MeteringPointId\",\"type\":[\"null\",\"string\"]}],\"name\":\"Mdmx.CloudEvents.Shared.PublisherDto.AnnualConsumption\",\"type\":\"record\"}"
}

func (r AnnualConsumption) SchemaName() string {
	return "Mdmx.CloudEvents.Shared.PublisherDto.AnnualConsumption"
}

func (_ AnnualConsumption) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AnnualConsumption) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AnnualConsumption) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AnnualConsumption) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AnnualConsumption) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AnnualConsumption) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AnnualConsumption) SetString(v string)   { panic("Unsupported operation") }
func (_ AnnualConsumption) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AnnualConsumption) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.CreatedAt}

		return w

	case 1:
		w := types.Int{Target: &r.Estimation}

		return w

	case 2:
		r.MeteringPointId = NewUnionNullString()

		return r.MeteringPointId
	}
	panic("Unknown field index")
}

func (r *AnnualConsumption) SetDefault(i int) {
	switch i {
	case 2:
		r.MeteringPointId = nil
		return
	}
	panic("Unknown field index")
}

func (r *AnnualConsumption) NullField(i int) {
	switch i {
	case 2:
		r.MeteringPointId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ AnnualConsumption) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AnnualConsumption) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AnnualConsumption) HintSize(int)                     { panic("Unsupported operation") }
func (_ AnnualConsumption) Finalize()                        {}

func (_ AnnualConsumption) AvroCRC64Fingerprint() []byte {
	return []byte(AnnualConsumptionAvroCRC64Fingerprint)
}

func (r AnnualConsumption) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CreatedAt"], err = json.Marshal(r.CreatedAt)
	if err != nil {
		return nil, err
	}
	output["Estimation"], err = json.Marshal(r.Estimation)
	if err != nil {
		return nil, err
	}
	output["MeteringPointId"], err = json.Marshal(r.MeteringPointId)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AnnualConsumption) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CreatedAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedAt); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CreatedAt")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Estimation"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Estimation); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Estimation")
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeteringPointId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeteringPointId); err != nil {
			return err
		}
	} else {
		r.MeteringPointId = NewUnionNullString()

		r.MeteringPointId = nil
	}
	return nil
}
