// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SubSiteTypeProduction int32

const (
	SubSiteTypeProductionB14 SubSiteTypeProduction = 0
	SubSiteTypeProductionB16 SubSiteTypeProduction = 1
	SubSiteTypeProductionB20 SubSiteTypeProduction = 2
	SubSiteTypeProductionZ04 SubSiteTypeProduction = 3
	SubSiteTypeProductionZ05 SubSiteTypeProduction = 4
	SubSiteTypeProductionZ06 SubSiteTypeProduction = 5
)

func (e SubSiteTypeProduction) String() string {
	switch e {
	case SubSiteTypeProductionB14:
		return "B14"
	case SubSiteTypeProductionB16:
		return "B16"
	case SubSiteTypeProductionB20:
		return "B20"
	case SubSiteTypeProductionZ04:
		return "Z04"
	case SubSiteTypeProductionZ05:
		return "Z05"
	case SubSiteTypeProductionZ06:
		return "Z06"
	}
	return "unknown"
}

func writeSubSiteTypeProduction(r SubSiteTypeProduction, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewSubSiteTypeProductionValue(raw string) (r SubSiteTypeProduction, err error) {
	switch raw {
	case "B14":
		return SubSiteTypeProductionB14, nil
	case "B16":
		return SubSiteTypeProductionB16, nil
	case "B20":
		return SubSiteTypeProductionB20, nil
	case "Z04":
		return SubSiteTypeProductionZ04, nil
	case "Z05":
		return SubSiteTypeProductionZ05, nil
	case "Z06":
		return SubSiteTypeProductionZ06, nil
	}

	return -1, fmt.Errorf("invalid value for SubSiteTypeProduction: '%s'", raw)

}

func (b SubSiteTypeProduction) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *SubSiteTypeProduction) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewSubSiteTypeProductionValue(stringVal)
	*b = val
	return err
}

type SubSiteTypeProductionWrapper struct {
	Target *SubSiteTypeProduction
}

func (b SubSiteTypeProductionWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b SubSiteTypeProductionWrapper) SetInt(v int32) {
	*(b.Target) = SubSiteTypeProduction(v)
}

func (b SubSiteTypeProductionWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b SubSiteTypeProductionWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b SubSiteTypeProductionWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b SubSiteTypeProductionWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b SubSiteTypeProductionWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b SubSiteTypeProductionWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b SubSiteTypeProductionWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b SubSiteTypeProductionWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b SubSiteTypeProductionWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b SubSiteTypeProductionWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b SubSiteTypeProductionWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b SubSiteTypeProductionWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b SubSiteTypeProductionWrapper) Finalize() {}
