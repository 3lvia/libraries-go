// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Location struct {
	Address *UnionNullAddress `json:"Address"`

	Latitude *UnionNullDouble `json:"Latitude"`

	Longitude *UnionNullDouble `json:"Longitude"`

	Placement *UnionNullMeterPlacement `json:"Placement"`
}

const LocationAvroCRC64Fingerprint = "\x9c@\xd1b}\x9d\xf2u"

func NewLocation() Location {
	r := Location{}
	r.Address = nil
	r.Latitude = nil
	r.Longitude = nil
	r.Placement = nil
	return r
}

func DeserializeLocation(r io.Reader) (Location, error) {
	t := NewLocation()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLocationFromSchema(r io.Reader, schema string) (Location, error) {
	t := NewLocation()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLocation(r Location, w io.Writer) error {
	var err error
	err = writeUnionNullAddress(r.Address, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Latitude, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Longitude, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeterPlacement(r.Placement, w)
	if err != nil {
		return err
	}
	return err
}

func (r Location) Serialize(w io.Writer) error {
	return writeLocation(r, w)
}

func (r Location) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Address\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Block\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CountryCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FloorNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Leasehold\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Plot\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostalCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostalRegion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PropertyUnitNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Section\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetLetter\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetNumber\",\"type\":[\"null\",\"int\"]}],\"name\":\"Address\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Latitude\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Longitude\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Placement\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Floor\",\"type\":[\"null\",\"string\"]},{\"name\":\"IsIndoor\",\"type\":\"boolean\"},{\"name\":\"PlacementCode\",\"type\":{\"name\":\"PlacementCode\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"symbols\":[\"Unknown\",\"InsideStation\",\"CabinetOutsideOnStation\",\"CabinetOutsideOnPole\",\"CabinetInside\",\"CabinetInsideStation\",\"CabinetOutsideOnCableCabinet\",\"IntegratedInCabinet\",\"Store\",\"Backstairs\",\"Entrance\",\"Facade\",\"BoilerRoom\",\"Garage\",\"ElevatorRoom\",\"Cellar\",\"Office\",\"Storageroom\",\"Attic\",\"Boardroom\",\"Shelter\",\"Property\",\"Washingroom\",\"CabinetInEntrance\",\"Workshop\",\"Cabin\",\"Outhouse\",\"KLFacilities\",\"PresumedInside\",\"CompanyCommonArea\",\"CompanyInAppartement\",\"CompanyGround\",\"House1stFloor\",\"House2FloorOrHigher\",\"HouseBasementUnderGround\",\"EntranceHall\",\"NotInUseManhole\",\"NotInUseOuthouse\",\"NotInUseOutsideShed\",\"CableCabinet\",\"Basement\",\"NS\",\"TechnicalRoom\",\"Staircase\",\"OutdoorsFreeAccess\",\"OuthouseLocked\",\"Outside\",\"OutsideKiosk\",\"OutsideCabinet\"],\"type\":\"enum\"}}],\"name\":\"MeterPlacement\",\"namespace\":\"Msim.Domain.Model.Meters\",\"type\":\"record\"}]}],\"name\":\"Msim.Domain.Model.Primitives.Location\",\"type\":\"record\"}"
}

func (r Location) SchemaName() string {
	return "Msim.Domain.Model.Primitives.Location"
}

func (_ Location) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Location) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Location) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Location) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Location) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Location) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Location) SetString(v string)   { panic("Unsupported operation") }
func (_ Location) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Location) Get(i int) types.Field {
	switch i {
	case 0:
		r.Address = NewUnionNullAddress()

		return r.Address
	case 1:
		r.Latitude = NewUnionNullDouble()

		return r.Latitude
	case 2:
		r.Longitude = NewUnionNullDouble()

		return r.Longitude
	case 3:
		r.Placement = NewUnionNullMeterPlacement()

		return r.Placement
	}
	panic("Unknown field index")
}

func (r *Location) SetDefault(i int) {
	switch i {
	case 0:
		r.Address = nil
		return
	case 1:
		r.Latitude = nil
		return
	case 2:
		r.Longitude = nil
		return
	case 3:
		r.Placement = nil
		return
	}
	panic("Unknown field index")
}

func (r *Location) NullField(i int) {
	switch i {
	case 0:
		r.Address = nil
		return
	case 1:
		r.Latitude = nil
		return
	case 2:
		r.Longitude = nil
		return
	case 3:
		r.Placement = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Location) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Location) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Location) HintSize(int)                     { panic("Unsupported operation") }
func (_ Location) Finalize()                        {}

func (_ Location) AvroCRC64Fingerprint() []byte {
	return []byte(LocationAvroCRC64Fingerprint)
}

func (r Location) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Address"], err = json.Marshal(r.Address)
	if err != nil {
		return nil, err
	}
	output["Latitude"], err = json.Marshal(r.Latitude)
	if err != nil {
		return nil, err
	}
	output["Longitude"], err = json.Marshal(r.Longitude)
	if err != nil {
		return nil, err
	}
	output["Placement"], err = json.Marshal(r.Placement)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Location) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Address"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Address); err != nil {
			return err
		}
	} else {
		r.Address = NewUnionNullAddress()

		r.Address = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Latitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitude); err != nil {
			return err
		}
	} else {
		r.Latitude = NewUnionNullDouble()

		r.Latitude = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Longitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitude); err != nil {
			return err
		}
	} else {
		r.Longitude = NewUnionNullDouble()

		r.Longitude = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Placement"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Placement); err != nil {
			return err
		}
	} else {
		r.Placement = NewUnionNullMeterPlacement()

		r.Placement = nil
	}
	return nil
}
