// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MeteringPointStatus struct {
	ChangedAt *UnionNullString `json:"ChangedAt"`

	Name *UnionNullMeteringPointStatusName `json:"Name"`
}

const MeteringPointStatusAvroCRC64Fingerprint = "\x7f75Z\xc2\x15@]"

func NewMeteringPointStatus() MeteringPointStatus {
	r := MeteringPointStatus{}
	r.ChangedAt = nil
	r.Name = nil
	return r
}

func DeserializeMeteringPointStatus(r io.Reader) (MeteringPointStatus, error) {
	t := NewMeteringPointStatus()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMeteringPointStatusFromSchema(r io.Reader, schema string) (MeteringPointStatus, error) {
	t := NewMeteringPointStatus()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMeteringPointStatus(r MeteringPointStatus, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.ChangedAt, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeteringPointStatusName(r.Name, w)
	if err != nil {
		return err
	}
	return err
}

func (r MeteringPointStatus) Serialize(w io.Writer) error {
	return writeMeteringPointStatus(r, w)
}

func (r MeteringPointStatus) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ChangedAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",{\"name\":\"MeteringPointStatusName\",\"symbols\":[\"Planned\",\"Installed\",\"NotInstalled\",\"Canceled\",\"Removed\"],\"type\":\"enum\"}]}],\"name\":\"Msim.Domain.Model.MeteringPoints.MeteringPointStatus\",\"type\":\"record\"}"
}

func (r MeteringPointStatus) SchemaName() string {
	return "Msim.Domain.Model.MeteringPoints.MeteringPointStatus"
}

func (_ MeteringPointStatus) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MeteringPointStatus) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MeteringPointStatus) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MeteringPointStatus) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MeteringPointStatus) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MeteringPointStatus) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MeteringPointStatus) SetString(v string)   { panic("Unsupported operation") }
func (_ MeteringPointStatus) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MeteringPointStatus) Get(i int) types.Field {
	switch i {
	case 0:
		r.ChangedAt = NewUnionNullString()

		return r.ChangedAt
	case 1:
		r.Name = NewUnionNullMeteringPointStatusName()

		return r.Name
	}
	panic("Unknown field index")
}

func (r *MeteringPointStatus) SetDefault(i int) {
	switch i {
	case 0:
		r.ChangedAt = nil
		return
	case 1:
		r.Name = nil
		return
	}
	panic("Unknown field index")
}

func (r *MeteringPointStatus) NullField(i int) {
	switch i {
	case 0:
		r.ChangedAt = nil
		return
	case 1:
		r.Name = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ MeteringPointStatus) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MeteringPointStatus) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MeteringPointStatus) HintSize(int)                     { panic("Unsupported operation") }
func (_ MeteringPointStatus) Finalize()                        {}

func (_ MeteringPointStatus) AvroCRC64Fingerprint() []byte {
	return []byte(MeteringPointStatusAvroCRC64Fingerprint)
}

func (r MeteringPointStatus) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ChangedAt"], err = json.Marshal(r.ChangedAt)
	if err != nil {
		return nil, err
	}
	output["Name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MeteringPointStatus) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ChangedAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ChangedAt); err != nil {
			return err
		}
	} else {
		r.ChangedAt = NewUnionNullString()

		r.ChangedAt = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		r.Name = NewUnionNullMeteringPointStatusName()

		r.Name = nil
	}
	return nil
}
