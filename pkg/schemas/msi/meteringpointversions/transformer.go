// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Transformer struct {
	BatchId *UnionNullString `json:"BatchId"`

	EndIndexRegistration *UnionNullMeterIndexRegistration `json:"EndIndexRegistration"`

	InstalledAt *UnionNullString `json:"InstalledAt"`

	ManufacturingYear *UnionNullInt `json:"ManufacturingYear"`

	ModelId *UnionNullString `json:"ModelId"`

	RemovedAt *UnionNullString `json:"RemovedAt"`

	SerialNumber *UnionNullString `json:"SerialNumber"`

	StartIndexRegistration *UnionNullMeterIndexRegistration `json:"StartIndexRegistration"`

	TransformationRatio *UnionNullDouble `json:"TransformationRatio"`
}

const TransformerAvroCRC64Fingerprint = "\x96C:\nb\"z["

func NewTransformer() Transformer {
	r := Transformer{}
	r.BatchId = nil
	r.EndIndexRegistration = nil
	r.InstalledAt = nil
	r.ManufacturingYear = nil
	r.ModelId = nil
	r.RemovedAt = nil
	r.SerialNumber = nil
	r.StartIndexRegistration = nil
	r.TransformationRatio = nil
	return r
}

func DeserializeTransformer(r io.Reader) (Transformer, error) {
	t := NewTransformer()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTransformerFromSchema(r io.Reader, schema string) (Transformer, error) {
	t := NewTransformer()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTransformer(r Transformer, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.BatchId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeterIndexRegistration(r.EndIndexRegistration, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InstalledAt, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.ManufacturingYear, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ModelId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RemovedAt, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SerialNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeterIndexRegistration(r.StartIndexRegistration, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.TransformationRatio, w)
	if err != nil {
		return err
	}
	return err
}

func (r Transformer) Serialize(w io.Writer) error {
	return writeTransformer(r, w)
}

func (r Transformer) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"BatchId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EndIndexRegistration\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ActiveMinusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ActivePlusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ReactiveMinusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ReactivePlusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"RegistrationTime\",\"type\":[\"null\",\"string\"]}],\"name\":\"MeterIndexRegistration\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"InstalledAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ManufacturingYear\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ModelId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RemovedAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SerialNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StartIndexRegistration\",\"type\":[\"null\",\"Msim.Domain.Model.Meters.MeterIndexRegistration\"]},{\"default\":null,\"name\":\"TransformationRatio\",\"type\":[\"null\",\"double\"]}],\"name\":\"Msim.Domain.Model.Transformers.Transformer\",\"type\":\"record\"}"
}

func (r Transformer) SchemaName() string {
	return "Msim.Domain.Model.Transformers.Transformer"
}

func (_ Transformer) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Transformer) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Transformer) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Transformer) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Transformer) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Transformer) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Transformer) SetString(v string)   { panic("Unsupported operation") }
func (_ Transformer) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Transformer) Get(i int) types.Field {
	switch i {
	case 0:
		r.BatchId = NewUnionNullString()

		return r.BatchId
	case 1:
		r.EndIndexRegistration = NewUnionNullMeterIndexRegistration()

		return r.EndIndexRegistration
	case 2:
		r.InstalledAt = NewUnionNullString()

		return r.InstalledAt
	case 3:
		r.ManufacturingYear = NewUnionNullInt()

		return r.ManufacturingYear
	case 4:
		r.ModelId = NewUnionNullString()

		return r.ModelId
	case 5:
		r.RemovedAt = NewUnionNullString()

		return r.RemovedAt
	case 6:
		r.SerialNumber = NewUnionNullString()

		return r.SerialNumber
	case 7:
		r.StartIndexRegistration = NewUnionNullMeterIndexRegistration()

		return r.StartIndexRegistration
	case 8:
		r.TransformationRatio = NewUnionNullDouble()

		return r.TransformationRatio
	}
	panic("Unknown field index")
}

func (r *Transformer) SetDefault(i int) {
	switch i {
	case 0:
		r.BatchId = nil
		return
	case 1:
		r.EndIndexRegistration = nil
		return
	case 2:
		r.InstalledAt = nil
		return
	case 3:
		r.ManufacturingYear = nil
		return
	case 4:
		r.ModelId = nil
		return
	case 5:
		r.RemovedAt = nil
		return
	case 6:
		r.SerialNumber = nil
		return
	case 7:
		r.StartIndexRegistration = nil
		return
	case 8:
		r.TransformationRatio = nil
		return
	}
	panic("Unknown field index")
}

func (r *Transformer) NullField(i int) {
	switch i {
	case 0:
		r.BatchId = nil
		return
	case 1:
		r.EndIndexRegistration = nil
		return
	case 2:
		r.InstalledAt = nil
		return
	case 3:
		r.ManufacturingYear = nil
		return
	case 4:
		r.ModelId = nil
		return
	case 5:
		r.RemovedAt = nil
		return
	case 6:
		r.SerialNumber = nil
		return
	case 7:
		r.StartIndexRegistration = nil
		return
	case 8:
		r.TransformationRatio = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Transformer) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Transformer) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Transformer) HintSize(int)                     { panic("Unsupported operation") }
func (_ Transformer) Finalize()                        {}

func (_ Transformer) AvroCRC64Fingerprint() []byte {
	return []byte(TransformerAvroCRC64Fingerprint)
}

func (r Transformer) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["BatchId"], err = json.Marshal(r.BatchId)
	if err != nil {
		return nil, err
	}
	output["EndIndexRegistration"], err = json.Marshal(r.EndIndexRegistration)
	if err != nil {
		return nil, err
	}
	output["InstalledAt"], err = json.Marshal(r.InstalledAt)
	if err != nil {
		return nil, err
	}
	output["ManufacturingYear"], err = json.Marshal(r.ManufacturingYear)
	if err != nil {
		return nil, err
	}
	output["ModelId"], err = json.Marshal(r.ModelId)
	if err != nil {
		return nil, err
	}
	output["RemovedAt"], err = json.Marshal(r.RemovedAt)
	if err != nil {
		return nil, err
	}
	output["SerialNumber"], err = json.Marshal(r.SerialNumber)
	if err != nil {
		return nil, err
	}
	output["StartIndexRegistration"], err = json.Marshal(r.StartIndexRegistration)
	if err != nil {
		return nil, err
	}
	output["TransformationRatio"], err = json.Marshal(r.TransformationRatio)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Transformer) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["BatchId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BatchId); err != nil {
			return err
		}
	} else {
		r.BatchId = NewUnionNullString()

		r.BatchId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EndIndexRegistration"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EndIndexRegistration); err != nil {
			return err
		}
	} else {
		r.EndIndexRegistration = NewUnionNullMeterIndexRegistration()

		r.EndIndexRegistration = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InstalledAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InstalledAt); err != nil {
			return err
		}
	} else {
		r.InstalledAt = NewUnionNullString()

		r.InstalledAt = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ManufacturingYear"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ManufacturingYear); err != nil {
			return err
		}
	} else {
		r.ManufacturingYear = NewUnionNullInt()

		r.ManufacturingYear = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ModelId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ModelId); err != nil {
			return err
		}
	} else {
		r.ModelId = NewUnionNullString()

		r.ModelId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RemovedAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemovedAt); err != nil {
			return err
		}
	} else {
		r.RemovedAt = NewUnionNullString()

		r.RemovedAt = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SerialNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SerialNumber); err != nil {
			return err
		}
	} else {
		r.SerialNumber = NewUnionNullString()

		r.SerialNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StartIndexRegistration"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StartIndexRegistration); err != nil {
			return err
		}
	} else {
		r.StartIndexRegistration = NewUnionNullMeterIndexRegistration()

		r.StartIndexRegistration = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TransformationRatio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TransformationRatio); err != nil {
			return err
		}
	} else {
		r.TransformationRatio = NewUnionNullDouble()

		r.TransformationRatio = nil
	}
	return nil
}
