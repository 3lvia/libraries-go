// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MeterConfiguration struct {
	CircuitBreaker *UnionNullCircuitBreakerConfiguration `json:"CircuitBreaker"`

	CollectionConfiguration HesCollectionConfiguration `json:"CollectionConfiguration"`

	FirmwareVersion *UnionNullString `json:"FirmwareVersion"`

	HanState *UnionNullHanState `json:"HanState"`

	PrimaryAdjustment *UnionNullDouble `json:"PrimaryAdjustment"`
}

const MeterConfigurationAvroCRC64Fingerprint = "\x93\xa0f\x04\x1e\xb5\a\xb7"

func NewMeterConfiguration() MeterConfiguration {
	r := MeterConfiguration{}
	r.CircuitBreaker = nil
	r.FirmwareVersion = nil
	r.HanState = nil
	r.PrimaryAdjustment = nil
	return r
}

func DeserializeMeterConfiguration(r io.Reader) (MeterConfiguration, error) {
	t := NewMeterConfiguration()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMeterConfigurationFromSchema(r io.Reader, schema string) (MeterConfiguration, error) {
	t := NewMeterConfiguration()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMeterConfiguration(r MeterConfiguration, w io.Writer) error {
	var err error
	err = writeUnionNullCircuitBreakerConfiguration(r.CircuitBreaker, w)
	if err != nil {
		return err
	}
	err = writeHesCollectionConfiguration(r.CollectionConfiguration, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FirmwareVersion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullHanState(r.HanState, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.PrimaryAdjustment, w)
	if err != nil {
		return err
	}
	return err
}

func (r MeterConfiguration) Serialize(w io.Writer) error {
	return writeMeterConfiguration(r, w)
}

func (r MeterConfiguration) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CircuitBreaker\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ButtonLocalConnectionAllowed\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"ButtonLocalDisconnectionAllowed\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Enabled\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"CircuitBreakerConfiguration\",\"type\":\"record\"}]},{\"name\":\"CollectionConfiguration\",\"type\":{\"name\":\"HesCollectionConfiguration\",\"symbols\":[\"TEST_Contract_DC_60_15_min\",\"Fact_Contract_CT_V2\",\"Empty_Contract\",\"Fact_Contract_CT_V1\",\"Ad_Hoc_Contract\",\"Fact_Contract_DC_V1\",\"Fact_Contract_DC_V2\",\"PreContract\",\"Contract_MCD_60\",\"Contract_MCD_15\",\"Contract_60_min_K\",\"Contract_60_min\",\"Contract_15_min\",\"ColdWater_60min\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"FirmwareVersion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HanState\",\"type\":[\"null\",{\"name\":\"HanState\",\"symbols\":[\"Closed\",\"Open\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"PrimaryAdjustment\",\"type\":[\"null\",\"double\"]}],\"name\":\"Msim.Domain.Model.Meters.MeterConfiguration\",\"type\":\"record\"}"
}

func (r MeterConfiguration) SchemaName() string {
	return "Msim.Domain.Model.Meters.MeterConfiguration"
}

func (_ MeterConfiguration) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MeterConfiguration) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MeterConfiguration) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MeterConfiguration) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MeterConfiguration) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MeterConfiguration) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MeterConfiguration) SetString(v string)   { panic("Unsupported operation") }
func (_ MeterConfiguration) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MeterConfiguration) Get(i int) types.Field {
	switch i {
	case 0:
		r.CircuitBreaker = NewUnionNullCircuitBreakerConfiguration()

		return r.CircuitBreaker
	case 1:
		w := HesCollectionConfigurationWrapper{Target: &r.CollectionConfiguration}

		return w

	case 2:
		r.FirmwareVersion = NewUnionNullString()

		return r.FirmwareVersion
	case 3:
		r.HanState = NewUnionNullHanState()

		return r.HanState
	case 4:
		r.PrimaryAdjustment = NewUnionNullDouble()

		return r.PrimaryAdjustment
	}
	panic("Unknown field index")
}

func (r *MeterConfiguration) SetDefault(i int) {
	switch i {
	case 0:
		r.CircuitBreaker = nil
		return
	case 2:
		r.FirmwareVersion = nil
		return
	case 3:
		r.HanState = nil
		return
	case 4:
		r.PrimaryAdjustment = nil
		return
	}
	panic("Unknown field index")
}

func (r *MeterConfiguration) NullField(i int) {
	switch i {
	case 0:
		r.CircuitBreaker = nil
		return
	case 2:
		r.FirmwareVersion = nil
		return
	case 3:
		r.HanState = nil
		return
	case 4:
		r.PrimaryAdjustment = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ MeterConfiguration) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MeterConfiguration) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MeterConfiguration) HintSize(int)                     { panic("Unsupported operation") }
func (_ MeterConfiguration) Finalize()                        {}

func (_ MeterConfiguration) AvroCRC64Fingerprint() []byte {
	return []byte(MeterConfigurationAvroCRC64Fingerprint)
}

func (r MeterConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CircuitBreaker"], err = json.Marshal(r.CircuitBreaker)
	if err != nil {
		return nil, err
	}
	output["CollectionConfiguration"], err = json.Marshal(r.CollectionConfiguration)
	if err != nil {
		return nil, err
	}
	output["FirmwareVersion"], err = json.Marshal(r.FirmwareVersion)
	if err != nil {
		return nil, err
	}
	output["HanState"], err = json.Marshal(r.HanState)
	if err != nil {
		return nil, err
	}
	output["PrimaryAdjustment"], err = json.Marshal(r.PrimaryAdjustment)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MeterConfiguration) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CircuitBreaker"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CircuitBreaker); err != nil {
			return err
		}
	} else {
		r.CircuitBreaker = NewUnionNullCircuitBreakerConfiguration()

		r.CircuitBreaker = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CollectionConfiguration"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CollectionConfiguration); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for CollectionConfiguration")
	}
	val = func() json.RawMessage {
		if v, ok := fields["FirmwareVersion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FirmwareVersion); err != nil {
			return err
		}
	} else {
		r.FirmwareVersion = NewUnionNullString()

		r.FirmwareVersion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HanState"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HanState); err != nil {
			return err
		}
	} else {
		r.HanState = NewUnionNullHanState()

		r.HanState = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PrimaryAdjustment"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PrimaryAdjustment); err != nil {
			return err
		}
	} else {
		r.PrimaryAdjustment = NewUnionNullDouble()

		r.PrimaryAdjustment = nil
	}
	return nil
}
