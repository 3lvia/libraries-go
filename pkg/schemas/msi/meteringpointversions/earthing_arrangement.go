// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type EarthingArrangement int32

const (
	EarthingArrangementTN_S   EarthingArrangement = 0
	EarthingArrangementIT     EarthingArrangement = 1
	EarthingArrangementTT     EarthingArrangement = 2
	EarthingArrangementTN_C   EarthingArrangement = 3
	EarthingArrangementTN_C_S EarthingArrangement = 4
)

func (e EarthingArrangement) String() string {
	switch e {
	case EarthingArrangementTN_S:
		return "TN_S"
	case EarthingArrangementIT:
		return "IT"
	case EarthingArrangementTT:
		return "TT"
	case EarthingArrangementTN_C:
		return "TN_C"
	case EarthingArrangementTN_C_S:
		return "TN_C_S"
	}
	return "unknown"
}

func writeEarthingArrangement(r EarthingArrangement, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewEarthingArrangementValue(raw string) (r EarthingArrangement, err error) {
	switch raw {
	case "TN_S":
		return EarthingArrangementTN_S, nil
	case "IT":
		return EarthingArrangementIT, nil
	case "TT":
		return EarthingArrangementTT, nil
	case "TN_C":
		return EarthingArrangementTN_C, nil
	case "TN_C_S":
		return EarthingArrangementTN_C_S, nil
	}

	return -1, fmt.Errorf("invalid value for EarthingArrangement: '%s'", raw)

}

func (b EarthingArrangement) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *EarthingArrangement) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewEarthingArrangementValue(stringVal)
	*b = val
	return err
}

type EarthingArrangementWrapper struct {
	Target *EarthingArrangement
}

func (b EarthingArrangementWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b EarthingArrangementWrapper) SetInt(v int32) {
	*(b.Target) = EarthingArrangement(v)
}

func (b EarthingArrangementWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b EarthingArrangementWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b EarthingArrangementWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b EarthingArrangementWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b EarthingArrangementWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b EarthingArrangementWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b EarthingArrangementWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b EarthingArrangementWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b EarthingArrangementWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b EarthingArrangementWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b EarthingArrangementWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b EarthingArrangementWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b EarthingArrangementWrapper) Finalize() {}
