// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MeteringPointStatusName int32

const (
	MeteringPointStatusNamePlanned      MeteringPointStatusName = 0
	MeteringPointStatusNameInstalled    MeteringPointStatusName = 1
	MeteringPointStatusNameNotInstalled MeteringPointStatusName = 2
	MeteringPointStatusNameCanceled     MeteringPointStatusName = 3
	MeteringPointStatusNameRemoved      MeteringPointStatusName = 4
)

func (e MeteringPointStatusName) String() string {
	switch e {
	case MeteringPointStatusNamePlanned:
		return "Planned"
	case MeteringPointStatusNameInstalled:
		return "Installed"
	case MeteringPointStatusNameNotInstalled:
		return "NotInstalled"
	case MeteringPointStatusNameCanceled:
		return "Canceled"
	case MeteringPointStatusNameRemoved:
		return "Removed"
	}
	return "unknown"
}

func writeMeteringPointStatusName(r MeteringPointStatusName, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewMeteringPointStatusNameValue(raw string) (r MeteringPointStatusName, err error) {
	switch raw {
	case "Planned":
		return MeteringPointStatusNamePlanned, nil
	case "Installed":
		return MeteringPointStatusNameInstalled, nil
	case "NotInstalled":
		return MeteringPointStatusNameNotInstalled, nil
	case "Canceled":
		return MeteringPointStatusNameCanceled, nil
	case "Removed":
		return MeteringPointStatusNameRemoved, nil
	}

	return -1, fmt.Errorf("invalid value for MeteringPointStatusName: '%s'", raw)

}

func (b MeteringPointStatusName) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *MeteringPointStatusName) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewMeteringPointStatusNameValue(stringVal)
	*b = val
	return err
}

type MeteringPointStatusNameWrapper struct {
	Target *MeteringPointStatusName
}

func (b MeteringPointStatusNameWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b MeteringPointStatusNameWrapper) SetInt(v int32) {
	*(b.Target) = MeteringPointStatusName(v)
}

func (b MeteringPointStatusNameWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b MeteringPointStatusNameWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b MeteringPointStatusNameWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b MeteringPointStatusNameWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b MeteringPointStatusNameWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b MeteringPointStatusNameWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b MeteringPointStatusNameWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b MeteringPointStatusNameWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b MeteringPointStatusNameWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b MeteringPointStatusNameWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b MeteringPointStatusNameWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b MeteringPointStatusNameWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b MeteringPointStatusNameWrapper) Finalize() {}
