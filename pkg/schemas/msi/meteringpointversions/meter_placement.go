// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MeterPlacement struct {
	Floor *UnionNullString `json:"Floor"`

	IsIndoor bool `json:"IsIndoor"`

	PlacementCode PlacementCode `json:"PlacementCode"`
}

const MeterPlacementAvroCRC64Fingerprint = "\xa3#\x93Ó€\x8fo\x99"

func NewMeterPlacement() MeterPlacement {
	r := MeterPlacement{}
	r.Floor = nil
	return r
}

func DeserializeMeterPlacement(r io.Reader) (MeterPlacement, error) {
	t := NewMeterPlacement()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMeterPlacementFromSchema(r io.Reader, schema string) (MeterPlacement, error) {
	t := NewMeterPlacement()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMeterPlacement(r MeterPlacement, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Floor, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.IsIndoor, w)
	if err != nil {
		return err
	}
	err = writePlacementCode(r.PlacementCode, w)
	if err != nil {
		return err
	}
	return err
}

func (r MeterPlacement) Serialize(w io.Writer) error {
	return writeMeterPlacement(r, w)
}

func (r MeterPlacement) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Floor\",\"type\":[\"null\",\"string\"]},{\"name\":\"IsIndoor\",\"type\":\"boolean\"},{\"name\":\"PlacementCode\",\"type\":{\"name\":\"PlacementCode\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"symbols\":[\"Unknown\",\"InsideStation\",\"CabinetOutsideOnStation\",\"CabinetOutsideOnPole\",\"CabinetInside\",\"CabinetInsideStation\",\"CabinetOutsideOnCableCabinet\",\"IntegratedInCabinet\",\"Store\",\"Backstairs\",\"Entrance\",\"Facade\",\"BoilerRoom\",\"Garage\",\"ElevatorRoom\",\"Cellar\",\"Office\",\"Storageroom\",\"Attic\",\"Boardroom\",\"Shelter\",\"Property\",\"Washingroom\",\"CabinetInEntrance\",\"Workshop\",\"Cabin\",\"Outhouse\",\"KLFacilities\",\"PresumedInside\",\"CompanyCommonArea\",\"CompanyInAppartement\",\"CompanyGround\",\"House1stFloor\",\"House2FloorOrHigher\",\"HouseBasementUnderGround\",\"EntranceHall\",\"NotInUseManhole\",\"NotInUseOuthouse\",\"NotInUseOutsideShed\",\"CableCabinet\",\"Basement\",\"NS\",\"TechnicalRoom\",\"Staircase\",\"OutdoorsFreeAccess\",\"OuthouseLocked\",\"Outside\",\"OutsideKiosk\",\"OutsideCabinet\"],\"type\":\"enum\"}}],\"name\":\"Msim.Domain.Model.Meters.MeterPlacement\",\"type\":\"record\"}"
}

func (r MeterPlacement) SchemaName() string {
	return "Msim.Domain.Model.Meters.MeterPlacement"
}

func (_ MeterPlacement) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MeterPlacement) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MeterPlacement) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MeterPlacement) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MeterPlacement) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MeterPlacement) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MeterPlacement) SetString(v string)   { panic("Unsupported operation") }
func (_ MeterPlacement) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MeterPlacement) Get(i int) types.Field {
	switch i {
	case 0:
		r.Floor = NewUnionNullString()

		return r.Floor
	case 1:
		w := types.Boolean{Target: &r.IsIndoor}

		return w

	case 2:
		w := PlacementCodeWrapper{Target: &r.PlacementCode}

		return w

	}
	panic("Unknown field index")
}

func (r *MeterPlacement) SetDefault(i int) {
	switch i {
	case 0:
		r.Floor = nil
		return
	}
	panic("Unknown field index")
}

func (r *MeterPlacement) NullField(i int) {
	switch i {
	case 0:
		r.Floor = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ MeterPlacement) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MeterPlacement) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MeterPlacement) HintSize(int)                     { panic("Unsupported operation") }
func (_ MeterPlacement) Finalize()                        {}

func (_ MeterPlacement) AvroCRC64Fingerprint() []byte {
	return []byte(MeterPlacementAvroCRC64Fingerprint)
}

func (r MeterPlacement) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Floor"], err = json.Marshal(r.Floor)
	if err != nil {
		return nil, err
	}
	output["IsIndoor"], err = json.Marshal(r.IsIndoor)
	if err != nil {
		return nil, err
	}
	output["PlacementCode"], err = json.Marshal(r.PlacementCode)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MeterPlacement) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Floor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Floor); err != nil {
			return err
		}
	} else {
		r.Floor = NewUnionNullString()

		r.Floor = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IsIndoor"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsIndoor); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for IsIndoor")
	}
	val = func() json.RawMessage {
		if v, ok := fields["PlacementCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PlacementCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for PlacementCode")
	}
	return nil
}
