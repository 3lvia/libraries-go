// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ExternalEvent struct {
	Id *UnionNullInt `json:"Id"`

	MeteringPointId *UnionNullString `json:"MeteringPointId"`

	Origin *UnionNullExternalOrigin `json:"Origin"`

	ReplacingEventId *UnionNullInt `json:"ReplacingEventId"`

	TransactionId *UnionNullString `json:"TransactionId"`

	ValidFrom *UnionNullString `json:"ValidFrom"`
}

const ExternalEventAvroCRC64Fingerprint = "<\xd5n\x03\x7fy\x9e\x10"

func NewExternalEvent() ExternalEvent {
	r := ExternalEvent{}
	r.Id = nil
	r.MeteringPointId = nil
	r.Origin = nil
	r.ReplacingEventId = nil
	r.TransactionId = nil
	r.ValidFrom = nil
	return r
}

func DeserializeExternalEvent(r io.Reader) (ExternalEvent, error) {
	t := NewExternalEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeExternalEventFromSchema(r io.Reader, schema string) (ExternalEvent, error) {
	t := NewExternalEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeExternalEvent(r ExternalEvent, w io.Writer) error {
	var err error
	err = writeUnionNullInt(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.MeteringPointId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullExternalOrigin(r.Origin, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.ReplacingEventId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TransactionId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ValidFrom, w)
	if err != nil {
		return err
	}
	return err
}

func (r ExternalEvent) Serialize(w io.Writer) error {
	return writeExternalEvent(r, w)
}

func (r ExternalEvent) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"MeteringPointId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Origin\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Reference\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"System\",\"type\":[\"null\",{\"name\":\"ExternalSystem\",\"symbols\":[\"Unknown\",\"Ifs\",\"Elwin\",\"Geonis\",\"Quant\",\"Cab\",\"Mmm\",\"Mdmx\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"UpdatedAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"UpdatedBy\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Email\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]}],\"name\":\"User\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"type\":\"record\"}]}],\"name\":\"ExternalOrigin\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"ReplacingEventId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"TransactionId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValidFrom\",\"type\":[\"null\",\"string\"]}],\"name\":\"Msim.Domain.Model.Events.ExternalEvent\",\"type\":\"record\"}"
}

func (r ExternalEvent) SchemaName() string {
	return "Msim.Domain.Model.Events.ExternalEvent"
}

func (_ ExternalEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ExternalEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ExternalEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ExternalEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ExternalEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ExternalEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ExternalEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ ExternalEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ExternalEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.Id = NewUnionNullInt()

		return r.Id
	case 1:
		r.MeteringPointId = NewUnionNullString()

		return r.MeteringPointId
	case 2:
		r.Origin = NewUnionNullExternalOrigin()

		return r.Origin
	case 3:
		r.ReplacingEventId = NewUnionNullInt()

		return r.ReplacingEventId
	case 4:
		r.TransactionId = NewUnionNullString()

		return r.TransactionId
	case 5:
		r.ValidFrom = NewUnionNullString()

		return r.ValidFrom
	}
	panic("Unknown field index")
}

func (r *ExternalEvent) SetDefault(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.MeteringPointId = nil
		return
	case 2:
		r.Origin = nil
		return
	case 3:
		r.ReplacingEventId = nil
		return
	case 4:
		r.TransactionId = nil
		return
	case 5:
		r.ValidFrom = nil
		return
	}
	panic("Unknown field index")
}

func (r *ExternalEvent) NullField(i int) {
	switch i {
	case 0:
		r.Id = nil
		return
	case 1:
		r.MeteringPointId = nil
		return
	case 2:
		r.Origin = nil
		return
	case 3:
		r.ReplacingEventId = nil
		return
	case 4:
		r.TransactionId = nil
		return
	case 5:
		r.ValidFrom = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ExternalEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ExternalEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ExternalEvent) HintSize(int)                     { panic("Unsupported operation") }
func (_ ExternalEvent) Finalize()                        {}

func (_ ExternalEvent) AvroCRC64Fingerprint() []byte {
	return []byte(ExternalEventAvroCRC64Fingerprint)
}

func (r ExternalEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["MeteringPointId"], err = json.Marshal(r.MeteringPointId)
	if err != nil {
		return nil, err
	}
	output["Origin"], err = json.Marshal(r.Origin)
	if err != nil {
		return nil, err
	}
	output["ReplacingEventId"], err = json.Marshal(r.ReplacingEventId)
	if err != nil {
		return nil, err
	}
	output["TransactionId"], err = json.Marshal(r.TransactionId)
	if err != nil {
		return nil, err
	}
	output["ValidFrom"], err = json.Marshal(r.ValidFrom)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ExternalEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullInt()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["MeteringPointId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MeteringPointId); err != nil {
			return err
		}
	} else {
		r.MeteringPointId = NewUnionNullString()

		r.MeteringPointId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Origin"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Origin); err != nil {
			return err
		}
	} else {
		r.Origin = NewUnionNullExternalOrigin()

		r.Origin = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReplacingEventId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReplacingEventId); err != nil {
			return err
		}
	} else {
		r.ReplacingEventId = NewUnionNullInt()

		r.ReplacingEventId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["TransactionId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TransactionId); err != nil {
			return err
		}
	} else {
		r.TransactionId = NewUnionNullString()

		r.TransactionId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ValidFrom"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ValidFrom); err != nil {
			return err
		}
	} else {
		r.ValidFrom = NewUnionNullString()

		r.ValidFrom = nil
	}
	return nil
}
