// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullMeteringPointStatusTypeEnum int

const (
	UnionNullMeteringPointStatusTypeEnumMeteringPointStatus UnionNullMeteringPointStatusTypeEnum = 1
)

type UnionNullMeteringPointStatus struct {
	Null                *types.NullVal
	MeteringPointStatus MeteringPointStatus
	UnionType           UnionNullMeteringPointStatusTypeEnum
}

func writeUnionNullMeteringPointStatus(r *UnionNullMeteringPointStatus, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullMeteringPointStatusTypeEnumMeteringPointStatus:
		return writeMeteringPointStatus(r.MeteringPointStatus, w)
	}
	return fmt.Errorf("invalid value for *UnionNullMeteringPointStatus")
}

func NewUnionNullMeteringPointStatus() *UnionNullMeteringPointStatus {
	return &UnionNullMeteringPointStatus{}
}

func (r *UnionNullMeteringPointStatus) Serialize(w io.Writer) error {
	return writeUnionNullMeteringPointStatus(r, w)
}

func DeserializeUnionNullMeteringPointStatus(r io.Reader) (*UnionNullMeteringPointStatus, error) {
	t := NewUnionNullMeteringPointStatus()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullMeteringPointStatusFromSchema(r io.Reader, schema string) (*UnionNullMeteringPointStatus, error) {
	t := NewUnionNullMeteringPointStatus()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullMeteringPointStatus) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ChangedAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",{\"name\":\"MeteringPointStatusName\",\"symbols\":[\"Planned\",\"Installed\",\"NotInstalled\",\"Canceled\",\"Removed\"],\"type\":\"enum\"}]}],\"name\":\"MeteringPointStatus\",\"type\":\"record\"}]"
}

func (_ *UnionNullMeteringPointStatus) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullMeteringPointStatus) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullMeteringPointStatus) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullMeteringPointStatus) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullMeteringPointStatus) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullMeteringPointStatus) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullMeteringPointStatus) SetLong(v int64) {

	r.UnionType = (UnionNullMeteringPointStatusTypeEnum)(v)
}

func (r *UnionNullMeteringPointStatus) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.MeteringPointStatus = NewMeteringPointStatus()
		return &types.Record{Target: (&r.MeteringPointStatus)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullMeteringPointStatus) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullMeteringPointStatus) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullMeteringPointStatus) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullMeteringPointStatus) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullMeteringPointStatus) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullMeteringPointStatus) Finalize()                {}

func (r *UnionNullMeteringPointStatus) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullMeteringPointStatusTypeEnumMeteringPointStatus:
		return json.Marshal(map[string]interface{}{"Msim.Domain.Model.MeteringPoints.MeteringPointStatus": r.MeteringPointStatus})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullMeteringPointStatus")
}

func (r *UnionNullMeteringPointStatus) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Msim.Domain.Model.MeteringPoints.MeteringPointStatus"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.MeteringPointStatus)
	}
	return fmt.Errorf("invalid value for *UnionNullMeteringPointStatus")
}
