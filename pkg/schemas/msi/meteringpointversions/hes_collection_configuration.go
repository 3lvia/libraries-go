// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type HesCollectionConfiguration int32

const (
	HesCollectionConfigurationTEST_Contract_DC_60_15_min HesCollectionConfiguration = 0
	HesCollectionConfigurationFact_Contract_CT_V2        HesCollectionConfiguration = 1
	HesCollectionConfigurationEmpty_Contract             HesCollectionConfiguration = 2
	HesCollectionConfigurationFact_Contract_CT_V1        HesCollectionConfiguration = 3
	HesCollectionConfigurationAd_Hoc_Contract            HesCollectionConfiguration = 4
	HesCollectionConfigurationFact_Contract_DC_V1        HesCollectionConfiguration = 5
	HesCollectionConfigurationFact_Contract_DC_V2        HesCollectionConfiguration = 6
	HesCollectionConfigurationPreContract                HesCollectionConfiguration = 7
	HesCollectionConfigurationContract_MCD_60            HesCollectionConfiguration = 8
	HesCollectionConfigurationContract_MCD_15            HesCollectionConfiguration = 9
	HesCollectionConfigurationContract_60_min_K          HesCollectionConfiguration = 10
	HesCollectionConfigurationContract_60_min            HesCollectionConfiguration = 11
	HesCollectionConfigurationContract_15_min            HesCollectionConfiguration = 12
	HesCollectionConfigurationColdWater_60min            HesCollectionConfiguration = 13
)

func (e HesCollectionConfiguration) String() string {
	switch e {
	case HesCollectionConfigurationTEST_Contract_DC_60_15_min:
		return "TEST_Contract_DC_60_15_min"
	case HesCollectionConfigurationFact_Contract_CT_V2:
		return "Fact_Contract_CT_V2"
	case HesCollectionConfigurationEmpty_Contract:
		return "Empty_Contract"
	case HesCollectionConfigurationFact_Contract_CT_V1:
		return "Fact_Contract_CT_V1"
	case HesCollectionConfigurationAd_Hoc_Contract:
		return "Ad_Hoc_Contract"
	case HesCollectionConfigurationFact_Contract_DC_V1:
		return "Fact_Contract_DC_V1"
	case HesCollectionConfigurationFact_Contract_DC_V2:
		return "Fact_Contract_DC_V2"
	case HesCollectionConfigurationPreContract:
		return "PreContract"
	case HesCollectionConfigurationContract_MCD_60:
		return "Contract_MCD_60"
	case HesCollectionConfigurationContract_MCD_15:
		return "Contract_MCD_15"
	case HesCollectionConfigurationContract_60_min_K:
		return "Contract_60_min_K"
	case HesCollectionConfigurationContract_60_min:
		return "Contract_60_min"
	case HesCollectionConfigurationContract_15_min:
		return "Contract_15_min"
	case HesCollectionConfigurationColdWater_60min:
		return "ColdWater_60min"
	}
	return "unknown"
}

func writeHesCollectionConfiguration(r HesCollectionConfiguration, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewHesCollectionConfigurationValue(raw string) (r HesCollectionConfiguration, err error) {
	switch raw {
	case "TEST_Contract_DC_60_15_min":
		return HesCollectionConfigurationTEST_Contract_DC_60_15_min, nil
	case "Fact_Contract_CT_V2":
		return HesCollectionConfigurationFact_Contract_CT_V2, nil
	case "Empty_Contract":
		return HesCollectionConfigurationEmpty_Contract, nil
	case "Fact_Contract_CT_V1":
		return HesCollectionConfigurationFact_Contract_CT_V1, nil
	case "Ad_Hoc_Contract":
		return HesCollectionConfigurationAd_Hoc_Contract, nil
	case "Fact_Contract_DC_V1":
		return HesCollectionConfigurationFact_Contract_DC_V1, nil
	case "Fact_Contract_DC_V2":
		return HesCollectionConfigurationFact_Contract_DC_V2, nil
	case "PreContract":
		return HesCollectionConfigurationPreContract, nil
	case "Contract_MCD_60":
		return HesCollectionConfigurationContract_MCD_60, nil
	case "Contract_MCD_15":
		return HesCollectionConfigurationContract_MCD_15, nil
	case "Contract_60_min_K":
		return HesCollectionConfigurationContract_60_min_K, nil
	case "Contract_60_min":
		return HesCollectionConfigurationContract_60_min, nil
	case "Contract_15_min":
		return HesCollectionConfigurationContract_15_min, nil
	case "ColdWater_60min":
		return HesCollectionConfigurationColdWater_60min, nil
	}

	return -1, fmt.Errorf("invalid value for HesCollectionConfiguration: '%s'", raw)

}

func (b HesCollectionConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *HesCollectionConfiguration) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewHesCollectionConfigurationValue(stringVal)
	*b = val
	return err
}

type HesCollectionConfigurationWrapper struct {
	Target *HesCollectionConfiguration
}

func (b HesCollectionConfigurationWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b HesCollectionConfigurationWrapper) SetInt(v int32) {
	*(b.Target) = HesCollectionConfiguration(v)
}

func (b HesCollectionConfigurationWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b HesCollectionConfigurationWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b HesCollectionConfigurationWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b HesCollectionConfigurationWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b HesCollectionConfigurationWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b HesCollectionConfigurationWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b HesCollectionConfigurationWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b HesCollectionConfigurationWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b HesCollectionConfigurationWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b HesCollectionConfigurationWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b HesCollectionConfigurationWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b HesCollectionConfigurationWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b HesCollectionConfigurationWrapper) Finalize() {}
