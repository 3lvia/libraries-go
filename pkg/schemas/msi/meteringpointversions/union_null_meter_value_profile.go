// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullMeterValueProfileTypeEnum int

const (
	UnionNullMeterValueProfileTypeEnumMeterValueProfile UnionNullMeterValueProfileTypeEnum = 1
)

type UnionNullMeterValueProfile struct {
	Null              *types.NullVal
	MeterValueProfile MeterValueProfile
	UnionType         UnionNullMeterValueProfileTypeEnum
}

func writeUnionNullMeterValueProfile(r *UnionNullMeterValueProfile, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullMeterValueProfileTypeEnumMeterValueProfile:
		return writeMeterValueProfile(r.MeterValueProfile, w)
	}
	return fmt.Errorf("invalid value for *UnionNullMeterValueProfile")
}

func NewUnionNullMeterValueProfile() *UnionNullMeterValueProfile {
	return &UnionNullMeterValueProfile{}
}

func (r *UnionNullMeterValueProfile) Serialize(w io.Writer) error {
	return writeUnionNullMeterValueProfile(r, w)
}

func DeserializeUnionNullMeterValueProfile(r io.Reader) (*UnionNullMeterValueProfile, error) {
	t := NewUnionNullMeterValueProfile()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullMeterValueProfileFromSchema(r io.Reader, schema string) (*UnionNullMeterValueProfile, error) {
	t := NewUnionNullMeterValueProfile()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullMeterValueProfile) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Method\",\"type\":[\"null\",{\"name\":\"Method\",\"symbols\":[\"Automatic\",\"Manual\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"Registers\",\"type\":[\"null\",{\"items\":{\"name\":\"Register\",\"symbols\":[\"ActivePlus\",\"ActiveMinus\",\"ReactivePlus\",\"ReactiveMinus\"],\"type\":\"enum\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"Resolution\",\"type\":[\"null\",{\"name\":\"MeterValueResolution\",\"symbols\":[\"Quarterly\",\"Hourly\"],\"type\":\"enum\"}]}],\"name\":\"MeterValueProfile\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"type\":\"record\"}]"
}

func (_ *UnionNullMeterValueProfile) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullMeterValueProfile) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullMeterValueProfile) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullMeterValueProfile) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullMeterValueProfile) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullMeterValueProfile) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullMeterValueProfile) SetLong(v int64) {

	r.UnionType = (UnionNullMeterValueProfileTypeEnum)(v)
}

func (r *UnionNullMeterValueProfile) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.MeterValueProfile = NewMeterValueProfile()
		return &types.Record{Target: (&r.MeterValueProfile)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullMeterValueProfile) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullMeterValueProfile) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullMeterValueProfile) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullMeterValueProfile) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullMeterValueProfile) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullMeterValueProfile) Finalize()                {}

func (r *UnionNullMeterValueProfile) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullMeterValueProfileTypeEnumMeterValueProfile:
		return json.Marshal(map[string]interface{}{"Msim.Domain.Model.Primitives.MeterValueProfile": r.MeterValueProfile})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullMeterValueProfile")
}

func (r *UnionNullMeterValueProfile) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Msim.Domain.Model.Primitives.MeterValueProfile"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.MeterValueProfile)
	}
	return fmt.Errorf("invalid value for *UnionNullMeterValueProfile")
}
