// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MeteringPoint struct {
	Antennas *UnionNullArrayUnionNullAntenna `json:"Antennas"`

	CollectionProfile *UnionNullMeterValueProfile `json:"CollectionProfile"`

	ConsumptionCode *UnionNullString `json:"ConsumptionCode"`

	CustomerType *UnionNullCustomerType `json:"CustomerType"`

	DeliversPrimaryValues *UnionNullBool `json:"DeliversPrimaryValues"`

	DeliveryProfile *UnionNullMeterValueProfile `json:"DeliveryProfile"`

	DivisionCode *UnionNullString `json:"DivisionCode"`

	ESettOyDescription *UnionNullString `json:"ESettOyDescription"`

	EarthingArrangement *UnionNullEarthingArrangement `json:"EarthingArrangement"`

	EstimatedFuseSize *UnionNullInt `json:"EstimatedFuseSize"`

	FuseSize *UnionNullInt `json:"FuseSize"`

	GridArea *UnionNullString `json:"GridArea"`

	HasCustomer *UnionNullBool `json:"HasCustomer"`

	HasPower *UnionNullBool `json:"HasPower"`

	Id *UnionNullString `json:"Id"`

	InitialAnnualConsumption *UnionNullDouble `json:"InitialAnnualConsumption"`

	InstallationStatus *UnionNullMeteringPointStatus `json:"InstallationStatus"`

	InstalledAt *UnionNullString `json:"InstalledAt"`

	IsConnected *UnionNullBool `json:"IsConnected"`

	Location *UnionNullLocation `json:"Location"`

	LocationCode *UnionNullString `json:"LocationCode"`

	Meter *UnionNullMeter `json:"Meter"`

	NetHesArea *UnionNullString `json:"NetHesArea"`

	NetOwnerId *UnionNullString `json:"NetOwnerId"`

	NetProduct *UnionNullNetProduct `json:"NetProduct"`

	Phases *UnionNullInt `json:"Phases"`

	PowerLimit *UnionNullDouble `json:"PowerLimit"`

	Production *UnionNullProduction `json:"Production"`

	ServiceType *UnionNullServiceType `json:"ServiceType"`

	SettlementMethod *UnionNullSettlementMethod `json:"SettlementMethod"`

	SupplyPriority SupplyPriority `json:"SupplyPriority"`

	TransformationRatio float64 `json:"TransformationRatio"`

	Transformers *UnionNullArrayUnionNullTransformer `json:"Transformers"`

	UtilityType *UnionNullUtilityType `json:"UtilityType"`

	Voltage *UnionNullInt `json:"Voltage"`
}

const MeteringPointAvroCRC64Fingerprint = "\x9dcS\xf0\x9dl$\x97"

func NewMeteringPoint() MeteringPoint {
	r := MeteringPoint{}
	r.Antennas = nil
	r.CollectionProfile = nil
	r.ConsumptionCode = nil
	r.CustomerType = nil
	r.DeliversPrimaryValues = nil
	r.DeliveryProfile = nil
	r.DivisionCode = nil
	r.ESettOyDescription = nil
	r.EarthingArrangement = nil
	r.EstimatedFuseSize = nil
	r.FuseSize = nil
	r.GridArea = nil
	r.HasCustomer = nil
	r.HasPower = nil
	r.Id = nil
	r.InitialAnnualConsumption = nil
	r.InstallationStatus = nil
	r.InstalledAt = nil
	r.IsConnected = nil
	r.Location = nil
	r.LocationCode = nil
	r.Meter = nil
	r.NetHesArea = nil
	r.NetOwnerId = nil
	r.NetProduct = nil
	r.Phases = nil
	r.PowerLimit = nil
	r.Production = nil
	r.ServiceType = nil
	r.SettlementMethod = nil
	r.Transformers = nil
	r.UtilityType = nil
	r.Voltage = nil
	return r
}

func DeserializeMeteringPoint(r io.Reader) (MeteringPoint, error) {
	t := NewMeteringPoint()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMeteringPointFromSchema(r io.Reader, schema string) (MeteringPoint, error) {
	t := NewMeteringPoint()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMeteringPoint(r MeteringPoint, w io.Writer) error {
	var err error
	err = writeUnionNullArrayUnionNullAntenna(r.Antennas, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeterValueProfile(r.CollectionProfile, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ConsumptionCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullCustomerType(r.CustomerType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.DeliversPrimaryValues, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeterValueProfile(r.DeliveryProfile, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DivisionCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ESettOyDescription, w)
	if err != nil {
		return err
	}
	err = writeUnionNullEarthingArrangement(r.EarthingArrangement, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.EstimatedFuseSize, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.FuseSize, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.GridArea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.HasCustomer, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.HasPower, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.InitialAnnualConsumption, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeteringPointStatus(r.InstallationStatus, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InstalledAt, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.IsConnected, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLocation(r.Location, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LocationCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeter(r.Meter, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NetHesArea, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.NetOwnerId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullNetProduct(r.NetProduct, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Phases, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.PowerLimit, w)
	if err != nil {
		return err
	}
	err = writeUnionNullProduction(r.Production, w)
	if err != nil {
		return err
	}
	err = writeUnionNullServiceType(r.ServiceType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullSettlementMethod(r.SettlementMethod, w)
	if err != nil {
		return err
	}
	err = writeSupplyPriority(r.SupplyPriority, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.TransformationRatio, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayUnionNullTransformer(r.Transformers, w)
	if err != nil {
		return err
	}
	err = writeUnionNullUtilityType(r.UtilityType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Voltage, w)
	if err != nil {
		return err
	}
	return err
}

func (r MeteringPoint) Serialize(w io.Writer) error {
	return writeMeteringPoint(r, w)
}

func (r MeteringPoint) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Antennas\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CableId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"InstalledAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LocationDescription\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ModelId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RemovedAt\",\"type\":[\"null\",\"string\"]}],\"name\":\"Antenna\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"CollectionProfile\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Method\",\"type\":[\"null\",{\"name\":\"Method\",\"symbols\":[\"Automatic\",\"Manual\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"Registers\",\"type\":[\"null\",{\"items\":{\"name\":\"Register\",\"symbols\":[\"ActivePlus\",\"ActiveMinus\",\"ReactivePlus\",\"ReactiveMinus\"],\"type\":\"enum\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"Resolution\",\"type\":[\"null\",{\"name\":\"MeterValueResolution\",\"symbols\":[\"Quarterly\",\"Hourly\"],\"type\":\"enum\"}]}],\"name\":\"MeterValueProfile\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"ConsumptionCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CustomerType\",\"type\":[\"null\",{\"name\":\"CustomerType\",\"symbols\":[\"Household\",\"Industry\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"DeliversPrimaryValues\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"DeliveryProfile\",\"type\":[\"null\",\"Msim.Domain.Model.Primitives.MeterValueProfile\"]},{\"default\":null,\"name\":\"DivisionCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ESettOyDescription\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EarthingArrangement\",\"type\":[\"null\",{\"name\":\"EarthingArrangement\",\"symbols\":[\"TN_S\",\"IT\",\"TT\",\"TN_C\",\"TN_C_S\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"EstimatedFuseSize\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"FuseSize\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"GridArea\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HasCustomer\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"HasPower\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"InitialAnnualConsumption\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"InstallationStatus\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ChangedAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",{\"name\":\"MeteringPointStatusName\",\"symbols\":[\"Planned\",\"Installed\",\"NotInstalled\",\"Canceled\",\"Removed\"],\"type\":\"enum\"}]}],\"name\":\"MeteringPointStatus\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"InstalledAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"IsConnected\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Location\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Address\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Block\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CountryCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FloorNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Leasehold\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Plot\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostalCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostalRegion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PropertyUnitNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Section\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetLetter\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetNumber\",\"type\":[\"null\",\"int\"]}],\"name\":\"Address\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Latitude\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Longitude\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Placement\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Floor\",\"type\":[\"null\",\"string\"]},{\"name\":\"IsIndoor\",\"type\":\"boolean\"},{\"name\":\"PlacementCode\",\"type\":{\"name\":\"PlacementCode\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"symbols\":[\"Unknown\",\"InsideStation\",\"CabinetOutsideOnStation\",\"CabinetOutsideOnPole\",\"CabinetInside\",\"CabinetInsideStation\",\"CabinetOutsideOnCableCabinet\",\"IntegratedInCabinet\",\"Store\",\"Backstairs\",\"Entrance\",\"Facade\",\"BoilerRoom\",\"Garage\",\"ElevatorRoom\",\"Cellar\",\"Office\",\"Storageroom\",\"Attic\",\"Boardroom\",\"Shelter\",\"Property\",\"Washingroom\",\"CabinetInEntrance\",\"Workshop\",\"Cabin\",\"Outhouse\",\"KLFacilities\",\"PresumedInside\",\"CompanyCommonArea\",\"CompanyInAppartement\",\"CompanyGround\",\"House1stFloor\",\"House2FloorOrHigher\",\"HouseBasementUnderGround\",\"EntranceHall\",\"NotInUseManhole\",\"NotInUseOuthouse\",\"NotInUseOutsideShed\",\"CableCabinet\",\"Basement\",\"NS\",\"TechnicalRoom\",\"Staircase\",\"OutdoorsFreeAccess\",\"OuthouseLocked\",\"Outside\",\"OutsideKiosk\",\"OutsideCabinet\"],\"type\":\"enum\"}}],\"name\":\"MeterPlacement\",\"namespace\":\"Msim.Domain.Model.Meters\",\"type\":\"record\"}]}],\"name\":\"Location\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"LocationCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Meter\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"BatchId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CircuitBreakerConnected\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"CommunicationModule\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"FirmwareVersion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HesInstance\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ModelId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OwnerId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ProductionYear\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"SerialNumber\",\"type\":[\"null\",\"string\"]}],\"name\":\"CommunicationModule\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Configuration\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CircuitBreaker\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ButtonLocalConnectionAllowed\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"ButtonLocalDisconnectionAllowed\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Enabled\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"CircuitBreakerConfiguration\",\"type\":\"record\"}]},{\"name\":\"CollectionConfiguration\",\"type\":{\"name\":\"HesCollectionConfiguration\",\"symbols\":[\"TEST_Contract_DC_60_15_min\",\"Fact_Contract_CT_V2\",\"Empty_Contract\",\"Fact_Contract_CT_V1\",\"Ad_Hoc_Contract\",\"Fact_Contract_DC_V1\",\"Fact_Contract_DC_V2\",\"PreContract\",\"Contract_MCD_60\",\"Contract_MCD_15\",\"Contract_60_min_K\",\"Contract_60_min\",\"Contract_15_min\",\"ColdWater_60min\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"FirmwareVersion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HanState\",\"type\":[\"null\",{\"name\":\"HanState\",\"symbols\":[\"Closed\",\"Open\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"PrimaryAdjustment\",\"type\":[\"null\",\"double\"]}],\"name\":\"MeterConfiguration\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"EndIndexRegistration\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ActiveMinusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ActivePlusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ReactiveMinusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ReactivePlusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"RegistrationTime\",\"type\":[\"null\",\"string\"]}],\"name\":\"MeterIndexRegistration\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Environment\",\"type\":[\"null\",{\"name\":\"DeviceEnvironment\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"symbols\":[\"Unknown\",\"T03\",\"T05\",\"StagingSouth\",\"ProductionSouth\",\"TestNorth\",\"StagingNorth\",\"ProductionNorth\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"InstalledAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ModelId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ProductionYear\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"RemovedAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SerialNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StartIndexRegistration\",\"type\":[\"null\",\"Msim.Domain.Model.Meters.MeterIndexRegistration\"]}],\"name\":\"Meter\",\"namespace\":\"Msim.Domain.Model.Meters\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"NetHesArea\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NetOwnerId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"NetProduct\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Description\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]}],\"name\":\"NetProduct\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"Phases\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"PowerLimit\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"Production\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"MaxProductionCapacity\",\"type\":[\"null\",\"int\"]},{\"name\":\"SubSiteTypeProduction\",\"type\":{\"name\":\"SubSiteTypeProduction\",\"symbols\":[\"B14\",\"B16\",\"B20\",\"Z04\",\"Z05\",\"Z06\"],\"type\":\"enum\"}}],\"name\":\"Production\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"ServiceType\",\"type\":[\"null\",{\"name\":\"ServiceType\",\"symbols\":[\"Consumption\",\"Production\",\"Combination\",\"Exchange\",\"Internal\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"SettlementMethod\",\"type\":[\"null\",{\"name\":\"SettlementMethod\",\"symbols\":[\"Hourly\",\"Profile\"],\"type\":\"enum\"}]},{\"name\":\"SupplyPriority\",\"type\":{\"name\":\"SupplyPriority\",\"symbols\":[\"P\",\"A\",\"B\",\"C\",\"D\"],\"type\":\"enum\"}},{\"name\":\"TransformationRatio\",\"type\":\"double\"},{\"default\":null,\"name\":\"Transformers\",\"type\":[\"null\",{\"items\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"BatchId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"EndIndexRegistration\",\"type\":[\"null\",\"Msim.Domain.Model.Meters.MeterIndexRegistration\"]},{\"default\":null,\"name\":\"InstalledAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ManufacturingYear\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"ModelId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RemovedAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"SerialNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StartIndexRegistration\",\"type\":[\"null\",\"Msim.Domain.Model.Meters.MeterIndexRegistration\"]},{\"default\":null,\"name\":\"TransformationRatio\",\"type\":[\"null\",\"double\"]}],\"name\":\"Transformer\",\"namespace\":\"Msim.Domain.Model.Transformers\",\"type\":\"record\"}],\"type\":\"array\"}]},{\"default\":null,\"name\":\"UtilityType\",\"type\":[\"null\",{\"name\":\"UtilityType\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"symbols\":[\"Electricity\",\"Water\",\"Gas\",\"Heat\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"Voltage\",\"type\":[\"null\",\"int\"]}],\"name\":\"Msim.Domain.Model.MeteringPoints.MeteringPoint\",\"type\":\"record\"}"
}

func (r MeteringPoint) SchemaName() string {
	return "Msim.Domain.Model.MeteringPoints.MeteringPoint"
}

func (_ MeteringPoint) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MeteringPoint) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MeteringPoint) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MeteringPoint) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MeteringPoint) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MeteringPoint) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MeteringPoint) SetString(v string)   { panic("Unsupported operation") }
func (_ MeteringPoint) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MeteringPoint) Get(i int) types.Field {
	switch i {
	case 0:
		r.Antennas = NewUnionNullArrayUnionNullAntenna()

		return r.Antennas
	case 1:
		r.CollectionProfile = NewUnionNullMeterValueProfile()

		return r.CollectionProfile
	case 2:
		r.ConsumptionCode = NewUnionNullString()

		return r.ConsumptionCode
	case 3:
		r.CustomerType = NewUnionNullCustomerType()

		return r.CustomerType
	case 4:
		r.DeliversPrimaryValues = NewUnionNullBool()

		return r.DeliversPrimaryValues
	case 5:
		r.DeliveryProfile = NewUnionNullMeterValueProfile()

		return r.DeliveryProfile
	case 6:
		r.DivisionCode = NewUnionNullString()

		return r.DivisionCode
	case 7:
		r.ESettOyDescription = NewUnionNullString()

		return r.ESettOyDescription
	case 8:
		r.EarthingArrangement = NewUnionNullEarthingArrangement()

		return r.EarthingArrangement
	case 9:
		r.EstimatedFuseSize = NewUnionNullInt()

		return r.EstimatedFuseSize
	case 10:
		r.FuseSize = NewUnionNullInt()

		return r.FuseSize
	case 11:
		r.GridArea = NewUnionNullString()

		return r.GridArea
	case 12:
		r.HasCustomer = NewUnionNullBool()

		return r.HasCustomer
	case 13:
		r.HasPower = NewUnionNullBool()

		return r.HasPower
	case 14:
		r.Id = NewUnionNullString()

		return r.Id
	case 15:
		r.InitialAnnualConsumption = NewUnionNullDouble()

		return r.InitialAnnualConsumption
	case 16:
		r.InstallationStatus = NewUnionNullMeteringPointStatus()

		return r.InstallationStatus
	case 17:
		r.InstalledAt = NewUnionNullString()

		return r.InstalledAt
	case 18:
		r.IsConnected = NewUnionNullBool()

		return r.IsConnected
	case 19:
		r.Location = NewUnionNullLocation()

		return r.Location
	case 20:
		r.LocationCode = NewUnionNullString()

		return r.LocationCode
	case 21:
		r.Meter = NewUnionNullMeter()

		return r.Meter
	case 22:
		r.NetHesArea = NewUnionNullString()

		return r.NetHesArea
	case 23:
		r.NetOwnerId = NewUnionNullString()

		return r.NetOwnerId
	case 24:
		r.NetProduct = NewUnionNullNetProduct()

		return r.NetProduct
	case 25:
		r.Phases = NewUnionNullInt()

		return r.Phases
	case 26:
		r.PowerLimit = NewUnionNullDouble()

		return r.PowerLimit
	case 27:
		r.Production = NewUnionNullProduction()

		return r.Production
	case 28:
		r.ServiceType = NewUnionNullServiceType()

		return r.ServiceType
	case 29:
		r.SettlementMethod = NewUnionNullSettlementMethod()

		return r.SettlementMethod
	case 30:
		w := SupplyPriorityWrapper{Target: &r.SupplyPriority}

		return w

	case 31:
		w := types.Double{Target: &r.TransformationRatio}

		return w

	case 32:
		r.Transformers = NewUnionNullArrayUnionNullTransformer()

		return r.Transformers
	case 33:
		r.UtilityType = NewUnionNullUtilityType()

		return r.UtilityType
	case 34:
		r.Voltage = NewUnionNullInt()

		return r.Voltage
	}
	panic("Unknown field index")
}

func (r *MeteringPoint) SetDefault(i int) {
	switch i {
	case 0:
		r.Antennas = nil
		return
	case 1:
		r.CollectionProfile = nil
		return
	case 2:
		r.ConsumptionCode = nil
		return
	case 3:
		r.CustomerType = nil
		return
	case 4:
		r.DeliversPrimaryValues = nil
		return
	case 5:
		r.DeliveryProfile = nil
		return
	case 6:
		r.DivisionCode = nil
		return
	case 7:
		r.ESettOyDescription = nil
		return
	case 8:
		r.EarthingArrangement = nil
		return
	case 9:
		r.EstimatedFuseSize = nil
		return
	case 10:
		r.FuseSize = nil
		return
	case 11:
		r.GridArea = nil
		return
	case 12:
		r.HasCustomer = nil
		return
	case 13:
		r.HasPower = nil
		return
	case 14:
		r.Id = nil
		return
	case 15:
		r.InitialAnnualConsumption = nil
		return
	case 16:
		r.InstallationStatus = nil
		return
	case 17:
		r.InstalledAt = nil
		return
	case 18:
		r.IsConnected = nil
		return
	case 19:
		r.Location = nil
		return
	case 20:
		r.LocationCode = nil
		return
	case 21:
		r.Meter = nil
		return
	case 22:
		r.NetHesArea = nil
		return
	case 23:
		r.NetOwnerId = nil
		return
	case 24:
		r.NetProduct = nil
		return
	case 25:
		r.Phases = nil
		return
	case 26:
		r.PowerLimit = nil
		return
	case 27:
		r.Production = nil
		return
	case 28:
		r.ServiceType = nil
		return
	case 29:
		r.SettlementMethod = nil
		return
	case 32:
		r.Transformers = nil
		return
	case 33:
		r.UtilityType = nil
		return
	case 34:
		r.Voltage = nil
		return
	}
	panic("Unknown field index")
}

func (r *MeteringPoint) NullField(i int) {
	switch i {
	case 0:
		r.Antennas = nil
		return
	case 1:
		r.CollectionProfile = nil
		return
	case 2:
		r.ConsumptionCode = nil
		return
	case 3:
		r.CustomerType = nil
		return
	case 4:
		r.DeliversPrimaryValues = nil
		return
	case 5:
		r.DeliveryProfile = nil
		return
	case 6:
		r.DivisionCode = nil
		return
	case 7:
		r.ESettOyDescription = nil
		return
	case 8:
		r.EarthingArrangement = nil
		return
	case 9:
		r.EstimatedFuseSize = nil
		return
	case 10:
		r.FuseSize = nil
		return
	case 11:
		r.GridArea = nil
		return
	case 12:
		r.HasCustomer = nil
		return
	case 13:
		r.HasPower = nil
		return
	case 14:
		r.Id = nil
		return
	case 15:
		r.InitialAnnualConsumption = nil
		return
	case 16:
		r.InstallationStatus = nil
		return
	case 17:
		r.InstalledAt = nil
		return
	case 18:
		r.IsConnected = nil
		return
	case 19:
		r.Location = nil
		return
	case 20:
		r.LocationCode = nil
		return
	case 21:
		r.Meter = nil
		return
	case 22:
		r.NetHesArea = nil
		return
	case 23:
		r.NetOwnerId = nil
		return
	case 24:
		r.NetProduct = nil
		return
	case 25:
		r.Phases = nil
		return
	case 26:
		r.PowerLimit = nil
		return
	case 27:
		r.Production = nil
		return
	case 28:
		r.ServiceType = nil
		return
	case 29:
		r.SettlementMethod = nil
		return
	case 32:
		r.Transformers = nil
		return
	case 33:
		r.UtilityType = nil
		return
	case 34:
		r.Voltage = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ MeteringPoint) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MeteringPoint) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MeteringPoint) HintSize(int)                     { panic("Unsupported operation") }
func (_ MeteringPoint) Finalize()                        {}

func (_ MeteringPoint) AvroCRC64Fingerprint() []byte {
	return []byte(MeteringPointAvroCRC64Fingerprint)
}

func (r MeteringPoint) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Antennas"], err = json.Marshal(r.Antennas)
	if err != nil {
		return nil, err
	}
	output["CollectionProfile"], err = json.Marshal(r.CollectionProfile)
	if err != nil {
		return nil, err
	}
	output["ConsumptionCode"], err = json.Marshal(r.ConsumptionCode)
	if err != nil {
		return nil, err
	}
	output["CustomerType"], err = json.Marshal(r.CustomerType)
	if err != nil {
		return nil, err
	}
	output["DeliversPrimaryValues"], err = json.Marshal(r.DeliversPrimaryValues)
	if err != nil {
		return nil, err
	}
	output["DeliveryProfile"], err = json.Marshal(r.DeliveryProfile)
	if err != nil {
		return nil, err
	}
	output["DivisionCode"], err = json.Marshal(r.DivisionCode)
	if err != nil {
		return nil, err
	}
	output["ESettOyDescription"], err = json.Marshal(r.ESettOyDescription)
	if err != nil {
		return nil, err
	}
	output["EarthingArrangement"], err = json.Marshal(r.EarthingArrangement)
	if err != nil {
		return nil, err
	}
	output["EstimatedFuseSize"], err = json.Marshal(r.EstimatedFuseSize)
	if err != nil {
		return nil, err
	}
	output["FuseSize"], err = json.Marshal(r.FuseSize)
	if err != nil {
		return nil, err
	}
	output["GridArea"], err = json.Marshal(r.GridArea)
	if err != nil {
		return nil, err
	}
	output["HasCustomer"], err = json.Marshal(r.HasCustomer)
	if err != nil {
		return nil, err
	}
	output["HasPower"], err = json.Marshal(r.HasPower)
	if err != nil {
		return nil, err
	}
	output["Id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["InitialAnnualConsumption"], err = json.Marshal(r.InitialAnnualConsumption)
	if err != nil {
		return nil, err
	}
	output["InstallationStatus"], err = json.Marshal(r.InstallationStatus)
	if err != nil {
		return nil, err
	}
	output["InstalledAt"], err = json.Marshal(r.InstalledAt)
	if err != nil {
		return nil, err
	}
	output["IsConnected"], err = json.Marshal(r.IsConnected)
	if err != nil {
		return nil, err
	}
	output["Location"], err = json.Marshal(r.Location)
	if err != nil {
		return nil, err
	}
	output["LocationCode"], err = json.Marshal(r.LocationCode)
	if err != nil {
		return nil, err
	}
	output["Meter"], err = json.Marshal(r.Meter)
	if err != nil {
		return nil, err
	}
	output["NetHesArea"], err = json.Marshal(r.NetHesArea)
	if err != nil {
		return nil, err
	}
	output["NetOwnerId"], err = json.Marshal(r.NetOwnerId)
	if err != nil {
		return nil, err
	}
	output["NetProduct"], err = json.Marshal(r.NetProduct)
	if err != nil {
		return nil, err
	}
	output["Phases"], err = json.Marshal(r.Phases)
	if err != nil {
		return nil, err
	}
	output["PowerLimit"], err = json.Marshal(r.PowerLimit)
	if err != nil {
		return nil, err
	}
	output["Production"], err = json.Marshal(r.Production)
	if err != nil {
		return nil, err
	}
	output["ServiceType"], err = json.Marshal(r.ServiceType)
	if err != nil {
		return nil, err
	}
	output["SettlementMethod"], err = json.Marshal(r.SettlementMethod)
	if err != nil {
		return nil, err
	}
	output["SupplyPriority"], err = json.Marshal(r.SupplyPriority)
	if err != nil {
		return nil, err
	}
	output["TransformationRatio"], err = json.Marshal(r.TransformationRatio)
	if err != nil {
		return nil, err
	}
	output["Transformers"], err = json.Marshal(r.Transformers)
	if err != nil {
		return nil, err
	}
	output["UtilityType"], err = json.Marshal(r.UtilityType)
	if err != nil {
		return nil, err
	}
	output["Voltage"], err = json.Marshal(r.Voltage)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MeteringPoint) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Antennas"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Antennas); err != nil {
			return err
		}
	} else {
		r.Antennas = NewUnionNullArrayUnionNullAntenna()

		r.Antennas = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CollectionProfile"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CollectionProfile); err != nil {
			return err
		}
	} else {
		r.CollectionProfile = NewUnionNullMeterValueProfile()

		r.CollectionProfile = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ConsumptionCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ConsumptionCode); err != nil {
			return err
		}
	} else {
		r.ConsumptionCode = NewUnionNullString()

		r.ConsumptionCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CustomerType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CustomerType); err != nil {
			return err
		}
	} else {
		r.CustomerType = NewUnionNullCustomerType()

		r.CustomerType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DeliversPrimaryValues"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DeliversPrimaryValues); err != nil {
			return err
		}
	} else {
		r.DeliversPrimaryValues = NewUnionNullBool()

		r.DeliversPrimaryValues = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DeliveryProfile"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DeliveryProfile); err != nil {
			return err
		}
	} else {
		r.DeliveryProfile = NewUnionNullMeterValueProfile()

		r.DeliveryProfile = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["DivisionCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DivisionCode); err != nil {
			return err
		}
	} else {
		r.DivisionCode = NewUnionNullString()

		r.DivisionCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ESettOyDescription"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ESettOyDescription); err != nil {
			return err
		}
	} else {
		r.ESettOyDescription = NewUnionNullString()

		r.ESettOyDescription = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EarthingArrangement"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EarthingArrangement); err != nil {
			return err
		}
	} else {
		r.EarthingArrangement = NewUnionNullEarthingArrangement()

		r.EarthingArrangement = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["EstimatedFuseSize"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EstimatedFuseSize); err != nil {
			return err
		}
	} else {
		r.EstimatedFuseSize = NewUnionNullInt()

		r.EstimatedFuseSize = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FuseSize"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FuseSize); err != nil {
			return err
		}
	} else {
		r.FuseSize = NewUnionNullInt()

		r.FuseSize = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["GridArea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GridArea); err != nil {
			return err
		}
	} else {
		r.GridArea = NewUnionNullString()

		r.GridArea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HasCustomer"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HasCustomer); err != nil {
			return err
		}
	} else {
		r.HasCustomer = NewUnionNullBool()

		r.HasCustomer = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HasPower"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HasPower); err != nil {
			return err
		}
	} else {
		r.HasPower = NewUnionNullBool()

		r.HasPower = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		r.Id = NewUnionNullString()

		r.Id = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InitialAnnualConsumption"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InitialAnnualConsumption); err != nil {
			return err
		}
	} else {
		r.InitialAnnualConsumption = NewUnionNullDouble()

		r.InitialAnnualConsumption = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InstallationStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InstallationStatus); err != nil {
			return err
		}
	} else {
		r.InstallationStatus = NewUnionNullMeteringPointStatus()

		r.InstallationStatus = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InstalledAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InstalledAt); err != nil {
			return err
		}
	} else {
		r.InstalledAt = NewUnionNullString()

		r.InstalledAt = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["IsConnected"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.IsConnected); err != nil {
			return err
		}
	} else {
		r.IsConnected = NewUnionNullBool()

		r.IsConnected = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Location"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Location); err != nil {
			return err
		}
	} else {
		r.Location = NewUnionNullLocation()

		r.Location = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LocationCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LocationCode); err != nil {
			return err
		}
	} else {
		r.LocationCode = NewUnionNullString()

		r.LocationCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Meter"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Meter); err != nil {
			return err
		}
	} else {
		r.Meter = NewUnionNullMeter()

		r.Meter = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NetHesArea"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NetHesArea); err != nil {
			return err
		}
	} else {
		r.NetHesArea = NewUnionNullString()

		r.NetHesArea = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NetOwnerId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NetOwnerId); err != nil {
			return err
		}
	} else {
		r.NetOwnerId = NewUnionNullString()

		r.NetOwnerId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["NetProduct"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.NetProduct); err != nil {
			return err
		}
	} else {
		r.NetProduct = NewUnionNullNetProduct()

		r.NetProduct = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Phases"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Phases); err != nil {
			return err
		}
	} else {
		r.Phases = NewUnionNullInt()

		r.Phases = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PowerLimit"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PowerLimit); err != nil {
			return err
		}
	} else {
		r.PowerLimit = NewUnionNullDouble()

		r.PowerLimit = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Production"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Production); err != nil {
			return err
		}
	} else {
		r.Production = NewUnionNullProduction()

		r.Production = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ServiceType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ServiceType); err != nil {
			return err
		}
	} else {
		r.ServiceType = NewUnionNullServiceType()

		r.ServiceType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SettlementMethod"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SettlementMethod); err != nil {
			return err
		}
	} else {
		r.SettlementMethod = NewUnionNullSettlementMethod()

		r.SettlementMethod = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SupplyPriority"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SupplyPriority); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SupplyPriority")
	}
	val = func() json.RawMessage {
		if v, ok := fields["TransformationRatio"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TransformationRatio); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for TransformationRatio")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Transformers"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Transformers); err != nil {
			return err
		}
	} else {
		r.Transformers = NewUnionNullArrayUnionNullTransformer()

		r.Transformers = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["UtilityType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UtilityType); err != nil {
			return err
		}
	} else {
		r.UtilityType = NewUnionNullUtilityType()

		r.UtilityType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Voltage"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Voltage); err != nil {
			return err
		}
	} else {
		r.Voltage = NewUnionNullInt()

		r.Voltage = nil
	}
	return nil
}
