// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullEarthingArrangementTypeEnum int

const (
	UnionNullEarthingArrangementTypeEnumEarthingArrangement UnionNullEarthingArrangementTypeEnum = 1
)

type UnionNullEarthingArrangement struct {
	Null                *types.NullVal
	EarthingArrangement EarthingArrangement
	UnionType           UnionNullEarthingArrangementTypeEnum
}

func writeUnionNullEarthingArrangement(r *UnionNullEarthingArrangement, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullEarthingArrangementTypeEnumEarthingArrangement:
		return writeEarthingArrangement(r.EarthingArrangement, w)
	}
	return fmt.Errorf("invalid value for *UnionNullEarthingArrangement")
}

func NewUnionNullEarthingArrangement() *UnionNullEarthingArrangement {
	return &UnionNullEarthingArrangement{}
}

func (r *UnionNullEarthingArrangement) Serialize(w io.Writer) error {
	return writeUnionNullEarthingArrangement(r, w)
}

func DeserializeUnionNullEarthingArrangement(r io.Reader) (*UnionNullEarthingArrangement, error) {
	t := NewUnionNullEarthingArrangement()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullEarthingArrangementFromSchema(r io.Reader, schema string) (*UnionNullEarthingArrangement, error) {
	t := NewUnionNullEarthingArrangement()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullEarthingArrangement) Schema() string {
	return "[\"null\",{\"name\":\"EarthingArrangement\",\"symbols\":[\"TN_S\",\"IT\",\"TT\",\"TN_C\",\"TN_C_S\"],\"type\":\"enum\"}]"
}

func (_ *UnionNullEarthingArrangement) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullEarthingArrangement) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullEarthingArrangement) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullEarthingArrangement) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullEarthingArrangement) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullEarthingArrangement) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullEarthingArrangement) SetLong(v int64) {

	r.UnionType = (UnionNullEarthingArrangementTypeEnum)(v)
}

func (r *UnionNullEarthingArrangement) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		return &EarthingArrangementWrapper{Target: (&r.EarthingArrangement)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullEarthingArrangement) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullEarthingArrangement) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullEarthingArrangement) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullEarthingArrangement) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullEarthingArrangement) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullEarthingArrangement) Finalize()                {}

func (r *UnionNullEarthingArrangement) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullEarthingArrangementTypeEnumEarthingArrangement:
		return json.Marshal(map[string]interface{}{"Msim.Domain.Model.MeteringPoints.EarthingArrangement": r.EarthingArrangement})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullEarthingArrangement")
}

func (r *UnionNullEarthingArrangement) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Msim.Domain.Model.MeteringPoints.EarthingArrangement"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.EarthingArrangement)
	}
	return fmt.Errorf("invalid value for *UnionNullEarthingArrangement")
}
