// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Address struct {
	Block *UnionNullString `json:"Block"`

	CountryCode *UnionNullString `json:"CountryCode"`

	FloorNumber *UnionNullString `json:"FloorNumber"`

	Leasehold *UnionNullString `json:"Leasehold"`

	Municipality *UnionNullString `json:"Municipality"`

	Plot *UnionNullString `json:"Plot"`

	PostalCode *UnionNullString `json:"PostalCode"`

	PostalRegion *UnionNullString `json:"PostalRegion"`

	PropertyUnitNumber *UnionNullString `json:"PropertyUnitNumber"`

	Section *UnionNullString `json:"Section"`

	StreetLetter *UnionNullString `json:"StreetLetter"`

	StreetName *UnionNullString `json:"StreetName"`

	StreetNumber *UnionNullInt `json:"StreetNumber"`
}

const AddressAvroCRC64Fingerprint = "\xb6\xca\xe6\xfau+\xc9-"

func NewAddress() Address {
	r := Address{}
	r.Block = nil
	r.CountryCode = nil
	r.FloorNumber = nil
	r.Leasehold = nil
	r.Municipality = nil
	r.Plot = nil
	r.PostalCode = nil
	r.PostalRegion = nil
	r.PropertyUnitNumber = nil
	r.Section = nil
	r.StreetLetter = nil
	r.StreetName = nil
	r.StreetNumber = nil
	return r
}

func DeserializeAddress(r io.Reader) (Address, error) {
	t := NewAddress()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAddressFromSchema(r io.Reader, schema string) (Address, error) {
	t := NewAddress()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAddress(r Address, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.Block, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CountryCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FloorNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Leasehold, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Municipality, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Plot, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PostalCode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PostalRegion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PropertyUnitNumber, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Section, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.StreetLetter, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.StreetName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.StreetNumber, w)
	if err != nil {
		return err
	}
	return err
}

func (r Address) Serialize(w io.Writer) error {
	return writeAddress(r, w)
}

func (r Address) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Block\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"CountryCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"FloorNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Leasehold\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Municipality\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Plot\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostalCode\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PostalRegion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"PropertyUnitNumber\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Section\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetLetter\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"StreetNumber\",\"type\":[\"null\",\"int\"]}],\"name\":\"Msim.Domain.Model.Primitives.Address\",\"type\":\"record\"}"
}

func (r Address) SchemaName() string {
	return "Msim.Domain.Model.Primitives.Address"
}

func (_ Address) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Address) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Address) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Address) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Address) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Address) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Address) SetString(v string)   { panic("Unsupported operation") }
func (_ Address) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Address) Get(i int) types.Field {
	switch i {
	case 0:
		r.Block = NewUnionNullString()

		return r.Block
	case 1:
		r.CountryCode = NewUnionNullString()

		return r.CountryCode
	case 2:
		r.FloorNumber = NewUnionNullString()

		return r.FloorNumber
	case 3:
		r.Leasehold = NewUnionNullString()

		return r.Leasehold
	case 4:
		r.Municipality = NewUnionNullString()

		return r.Municipality
	case 5:
		r.Plot = NewUnionNullString()

		return r.Plot
	case 6:
		r.PostalCode = NewUnionNullString()

		return r.PostalCode
	case 7:
		r.PostalRegion = NewUnionNullString()

		return r.PostalRegion
	case 8:
		r.PropertyUnitNumber = NewUnionNullString()

		return r.PropertyUnitNumber
	case 9:
		r.Section = NewUnionNullString()

		return r.Section
	case 10:
		r.StreetLetter = NewUnionNullString()

		return r.StreetLetter
	case 11:
		r.StreetName = NewUnionNullString()

		return r.StreetName
	case 12:
		r.StreetNumber = NewUnionNullInt()

		return r.StreetNumber
	}
	panic("Unknown field index")
}

func (r *Address) SetDefault(i int) {
	switch i {
	case 0:
		r.Block = nil
		return
	case 1:
		r.CountryCode = nil
		return
	case 2:
		r.FloorNumber = nil
		return
	case 3:
		r.Leasehold = nil
		return
	case 4:
		r.Municipality = nil
		return
	case 5:
		r.Plot = nil
		return
	case 6:
		r.PostalCode = nil
		return
	case 7:
		r.PostalRegion = nil
		return
	case 8:
		r.PropertyUnitNumber = nil
		return
	case 9:
		r.Section = nil
		return
	case 10:
		r.StreetLetter = nil
		return
	case 11:
		r.StreetName = nil
		return
	case 12:
		r.StreetNumber = nil
		return
	}
	panic("Unknown field index")
}

func (r *Address) NullField(i int) {
	switch i {
	case 0:
		r.Block = nil
		return
	case 1:
		r.CountryCode = nil
		return
	case 2:
		r.FloorNumber = nil
		return
	case 3:
		r.Leasehold = nil
		return
	case 4:
		r.Municipality = nil
		return
	case 5:
		r.Plot = nil
		return
	case 6:
		r.PostalCode = nil
		return
	case 7:
		r.PostalRegion = nil
		return
	case 8:
		r.PropertyUnitNumber = nil
		return
	case 9:
		r.Section = nil
		return
	case 10:
		r.StreetLetter = nil
		return
	case 11:
		r.StreetName = nil
		return
	case 12:
		r.StreetNumber = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Address) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Address) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Address) HintSize(int)                     { panic("Unsupported operation") }
func (_ Address) Finalize()                        {}

func (_ Address) AvroCRC64Fingerprint() []byte {
	return []byte(AddressAvroCRC64Fingerprint)
}

func (r Address) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Block"], err = json.Marshal(r.Block)
	if err != nil {
		return nil, err
	}
	output["CountryCode"], err = json.Marshal(r.CountryCode)
	if err != nil {
		return nil, err
	}
	output["FloorNumber"], err = json.Marshal(r.FloorNumber)
	if err != nil {
		return nil, err
	}
	output["Leasehold"], err = json.Marshal(r.Leasehold)
	if err != nil {
		return nil, err
	}
	output["Municipality"], err = json.Marshal(r.Municipality)
	if err != nil {
		return nil, err
	}
	output["Plot"], err = json.Marshal(r.Plot)
	if err != nil {
		return nil, err
	}
	output["PostalCode"], err = json.Marshal(r.PostalCode)
	if err != nil {
		return nil, err
	}
	output["PostalRegion"], err = json.Marshal(r.PostalRegion)
	if err != nil {
		return nil, err
	}
	output["PropertyUnitNumber"], err = json.Marshal(r.PropertyUnitNumber)
	if err != nil {
		return nil, err
	}
	output["Section"], err = json.Marshal(r.Section)
	if err != nil {
		return nil, err
	}
	output["StreetLetter"], err = json.Marshal(r.StreetLetter)
	if err != nil {
		return nil, err
	}
	output["StreetName"], err = json.Marshal(r.StreetName)
	if err != nil {
		return nil, err
	}
	output["StreetNumber"], err = json.Marshal(r.StreetNumber)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Address) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Block"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Block); err != nil {
			return err
		}
	} else {
		r.Block = NewUnionNullString()

		r.Block = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["CountryCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CountryCode); err != nil {
			return err
		}
	} else {
		r.CountryCode = NewUnionNullString()

		r.CountryCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["FloorNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FloorNumber); err != nil {
			return err
		}
	} else {
		r.FloorNumber = NewUnionNullString()

		r.FloorNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Leasehold"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Leasehold); err != nil {
			return err
		}
	} else {
		r.Leasehold = NewUnionNullString()

		r.Leasehold = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Municipality"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Municipality); err != nil {
			return err
		}
	} else {
		r.Municipality = NewUnionNullString()

		r.Municipality = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Plot"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Plot); err != nil {
			return err
		}
	} else {
		r.Plot = NewUnionNullString()

		r.Plot = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PostalCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostalCode); err != nil {
			return err
		}
	} else {
		r.PostalCode = NewUnionNullString()

		r.PostalCode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PostalRegion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostalRegion); err != nil {
			return err
		}
	} else {
		r.PostalRegion = NewUnionNullString()

		r.PostalRegion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["PropertyUnitNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PropertyUnitNumber); err != nil {
			return err
		}
	} else {
		r.PropertyUnitNumber = NewUnionNullString()

		r.PropertyUnitNumber = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Section"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Section); err != nil {
			return err
		}
	} else {
		r.Section = NewUnionNullString()

		r.Section = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StreetLetter"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StreetLetter); err != nil {
			return err
		}
	} else {
		r.StreetLetter = NewUnionNullString()

		r.StreetLetter = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StreetName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StreetName); err != nil {
			return err
		}
	} else {
		r.StreetName = NewUnionNullString()

		r.StreetName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["StreetNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.StreetNumber); err != nil {
			return err
		}
	} else {
		r.StreetNumber = NewUnionNullInt()

		r.StreetNumber = nil
	}
	return nil
}
