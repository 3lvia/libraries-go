// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullExternalEventTypeEnum int

const (
	UnionNullExternalEventTypeEnumExternalEvent UnionNullExternalEventTypeEnum = 1
)

type UnionNullExternalEvent struct {
	Null          *types.NullVal
	ExternalEvent ExternalEvent
	UnionType     UnionNullExternalEventTypeEnum
}

func writeUnionNullExternalEvent(r *UnionNullExternalEvent, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullExternalEventTypeEnumExternalEvent:
		return writeExternalEvent(r.ExternalEvent, w)
	}
	return fmt.Errorf("invalid value for *UnionNullExternalEvent")
}

func NewUnionNullExternalEvent() *UnionNullExternalEvent {
	return &UnionNullExternalEvent{}
}

func (r *UnionNullExternalEvent) Serialize(w io.Writer) error {
	return writeUnionNullExternalEvent(r, w)
}

func DeserializeUnionNullExternalEvent(r io.Reader) (*UnionNullExternalEvent, error) {
	t := NewUnionNullExternalEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullExternalEventFromSchema(r io.Reader, schema string) (*UnionNullExternalEvent, error) {
	t := NewUnionNullExternalEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullExternalEvent) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Id\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"MeteringPointId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Origin\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Reference\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"System\",\"type\":[\"null\",{\"name\":\"ExternalSystem\",\"symbols\":[\"Unknown\",\"Ifs\",\"Elwin\",\"Geonis\",\"Quant\",\"Cab\",\"Mmm\",\"Mdmx\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"UpdatedAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"UpdatedBy\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"Email\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"Name\",\"type\":[\"null\",\"string\"]}],\"name\":\"User\",\"namespace\":\"Msim.Domain.Model.Primitives\",\"type\":\"record\"}]}],\"name\":\"ExternalOrigin\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"ReplacingEventId\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"TransactionId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ValidFrom\",\"type\":[\"null\",\"string\"]}],\"name\":\"ExternalEvent\",\"namespace\":\"Msim.Domain.Model.Events\",\"type\":\"record\"}]"
}

func (_ *UnionNullExternalEvent) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullExternalEvent) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullExternalEvent) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullExternalEvent) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullExternalEvent) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullExternalEvent) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullExternalEvent) SetLong(v int64) {

	r.UnionType = (UnionNullExternalEventTypeEnum)(v)
}

func (r *UnionNullExternalEvent) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ExternalEvent = NewExternalEvent()
		return &types.Record{Target: (&r.ExternalEvent)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullExternalEvent) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullExternalEvent) HintSize(i int)                   { panic("Unsupported operation") }
func (_ *UnionNullExternalEvent) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullExternalEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullExternalEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullExternalEvent) Finalize()                        {}

func (r *UnionNullExternalEvent) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullExternalEventTypeEnumExternalEvent:
		return json.Marshal(map[string]interface{}{"Msim.Domain.Model.Events.ExternalEvent": r.ExternalEvent})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullExternalEvent")
}

func (r *UnionNullExternalEvent) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Msim.Domain.Model.Events.ExternalEvent"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ExternalEvent)
	}
	return fmt.Errorf("invalid value for *UnionNullExternalEvent")
}
