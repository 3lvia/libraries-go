// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Antenna struct {
	CableId *UnionNullString `json:"CableId"`

	InstalledAt *UnionNullString `json:"InstalledAt"`

	LocationDescription *UnionNullString `json:"LocationDescription"`

	ModelId *UnionNullString `json:"ModelId"`

	RemovedAt *UnionNullString `json:"RemovedAt"`
}

const AntennaAvroCRC64Fingerprint = "\xa2Q\xf1\x1c\\\xb0t<"

func NewAntenna() Antenna {
	r := Antenna{}
	r.CableId = nil
	r.InstalledAt = nil
	r.LocationDescription = nil
	r.ModelId = nil
	r.RemovedAt = nil
	return r
}

func DeserializeAntenna(r io.Reader) (Antenna, error) {
	t := NewAntenna()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAntennaFromSchema(r io.Reader, schema string) (Antenna, error) {
	t := NewAntenna()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAntenna(r Antenna, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CableId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.InstalledAt, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.LocationDescription, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ModelId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RemovedAt, w)
	if err != nil {
		return err
	}
	return err
}

func (r Antenna) Serialize(w io.Writer) error {
	return writeAntenna(r, w)
}

func (r Antenna) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"CableId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"InstalledAt\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"LocationDescription\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ModelId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"RemovedAt\",\"type\":[\"null\",\"string\"]}],\"name\":\"Msim.Domain.Model.MeteringPoints.Antenna\",\"type\":\"record\"}"
}

func (r Antenna) SchemaName() string {
	return "Msim.Domain.Model.MeteringPoints.Antenna"
}

func (_ Antenna) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Antenna) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Antenna) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Antenna) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Antenna) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Antenna) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Antenna) SetString(v string)   { panic("Unsupported operation") }
func (_ Antenna) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Antenna) Get(i int) types.Field {
	switch i {
	case 0:
		r.CableId = NewUnionNullString()

		return r.CableId
	case 1:
		r.InstalledAt = NewUnionNullString()

		return r.InstalledAt
	case 2:
		r.LocationDescription = NewUnionNullString()

		return r.LocationDescription
	case 3:
		r.ModelId = NewUnionNullString()

		return r.ModelId
	case 4:
		r.RemovedAt = NewUnionNullString()

		return r.RemovedAt
	}
	panic("Unknown field index")
}

func (r *Antenna) SetDefault(i int) {
	switch i {
	case 0:
		r.CableId = nil
		return
	case 1:
		r.InstalledAt = nil
		return
	case 2:
		r.LocationDescription = nil
		return
	case 3:
		r.ModelId = nil
		return
	case 4:
		r.RemovedAt = nil
		return
	}
	panic("Unknown field index")
}

func (r *Antenna) NullField(i int) {
	switch i {
	case 0:
		r.CableId = nil
		return
	case 1:
		r.InstalledAt = nil
		return
	case 2:
		r.LocationDescription = nil
		return
	case 3:
		r.ModelId = nil
		return
	case 4:
		r.RemovedAt = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Antenna) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Antenna) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Antenna) HintSize(int)                     { panic("Unsupported operation") }
func (_ Antenna) Finalize()                        {}

func (_ Antenna) AvroCRC64Fingerprint() []byte {
	return []byte(AntennaAvroCRC64Fingerprint)
}

func (r Antenna) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["CableId"], err = json.Marshal(r.CableId)
	if err != nil {
		return nil, err
	}
	output["InstalledAt"], err = json.Marshal(r.InstalledAt)
	if err != nil {
		return nil, err
	}
	output["LocationDescription"], err = json.Marshal(r.LocationDescription)
	if err != nil {
		return nil, err
	}
	output["ModelId"], err = json.Marshal(r.ModelId)
	if err != nil {
		return nil, err
	}
	output["RemovedAt"], err = json.Marshal(r.RemovedAt)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Antenna) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["CableId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CableId); err != nil {
			return err
		}
	} else {
		r.CableId = NewUnionNullString()

		r.CableId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["InstalledAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.InstalledAt); err != nil {
			return err
		}
	} else {
		r.InstalledAt = NewUnionNullString()

		r.InstalledAt = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LocationDescription"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LocationDescription); err != nil {
			return err
		}
	} else {
		r.LocationDescription = NewUnionNullString()

		r.LocationDescription = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ModelId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ModelId); err != nil {
			return err
		}
	} else {
		r.ModelId = NewUnionNullString()

		r.ModelId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RemovedAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RemovedAt); err != nil {
			return err
		}
	} else {
		r.RemovedAt = NewUnionNullString()

		r.RemovedAt = nil
	}
	return nil
}
