// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MeterIndexRegistration struct {
	ActiveMinusIndex *UnionNullDouble `json:"ActiveMinusIndex"`

	ActivePlusIndex *UnionNullDouble `json:"ActivePlusIndex"`

	ReactiveMinusIndex *UnionNullDouble `json:"ReactiveMinusIndex"`

	ReactivePlusIndex *UnionNullDouble `json:"ReactivePlusIndex"`

	RegistrationTime *UnionNullString `json:"RegistrationTime"`
}

const MeterIndexRegistrationAvroCRC64Fingerprint = "\x7fM\xcd!\x02)\xe6F"

func NewMeterIndexRegistration() MeterIndexRegistration {
	r := MeterIndexRegistration{}
	r.ActiveMinusIndex = nil
	r.ActivePlusIndex = nil
	r.ReactiveMinusIndex = nil
	r.ReactivePlusIndex = nil
	r.RegistrationTime = nil
	return r
}

func DeserializeMeterIndexRegistration(r io.Reader) (MeterIndexRegistration, error) {
	t := NewMeterIndexRegistration()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMeterIndexRegistrationFromSchema(r io.Reader, schema string) (MeterIndexRegistration, error) {
	t := NewMeterIndexRegistration()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMeterIndexRegistration(r MeterIndexRegistration, w io.Writer) error {
	var err error
	err = writeUnionNullDouble(r.ActiveMinusIndex, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.ActivePlusIndex, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.ReactiveMinusIndex, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.ReactivePlusIndex, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RegistrationTime, w)
	if err != nil {
		return err
	}
	return err
}

func (r MeterIndexRegistration) Serialize(w io.Writer) error {
	return writeMeterIndexRegistration(r, w)
}

func (r MeterIndexRegistration) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ActiveMinusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ActivePlusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ReactiveMinusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ReactivePlusIndex\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"RegistrationTime\",\"type\":[\"null\",\"string\"]}],\"name\":\"Msim.Domain.Model.Meters.MeterIndexRegistration\",\"type\":\"record\"}"
}

func (r MeterIndexRegistration) SchemaName() string {
	return "Msim.Domain.Model.Meters.MeterIndexRegistration"
}

func (_ MeterIndexRegistration) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MeterIndexRegistration) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MeterIndexRegistration) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MeterIndexRegistration) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MeterIndexRegistration) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MeterIndexRegistration) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MeterIndexRegistration) SetString(v string)   { panic("Unsupported operation") }
func (_ MeterIndexRegistration) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MeterIndexRegistration) Get(i int) types.Field {
	switch i {
	case 0:
		r.ActiveMinusIndex = NewUnionNullDouble()

		return r.ActiveMinusIndex
	case 1:
		r.ActivePlusIndex = NewUnionNullDouble()

		return r.ActivePlusIndex
	case 2:
		r.ReactiveMinusIndex = NewUnionNullDouble()

		return r.ReactiveMinusIndex
	case 3:
		r.ReactivePlusIndex = NewUnionNullDouble()

		return r.ReactivePlusIndex
	case 4:
		r.RegistrationTime = NewUnionNullString()

		return r.RegistrationTime
	}
	panic("Unknown field index")
}

func (r *MeterIndexRegistration) SetDefault(i int) {
	switch i {
	case 0:
		r.ActiveMinusIndex = nil
		return
	case 1:
		r.ActivePlusIndex = nil
		return
	case 2:
		r.ReactiveMinusIndex = nil
		return
	case 3:
		r.ReactivePlusIndex = nil
		return
	case 4:
		r.RegistrationTime = nil
		return
	}
	panic("Unknown field index")
}

func (r *MeterIndexRegistration) NullField(i int) {
	switch i {
	case 0:
		r.ActiveMinusIndex = nil
		return
	case 1:
		r.ActivePlusIndex = nil
		return
	case 2:
		r.ReactiveMinusIndex = nil
		return
	case 3:
		r.ReactivePlusIndex = nil
		return
	case 4:
		r.RegistrationTime = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ MeterIndexRegistration) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MeterIndexRegistration) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MeterIndexRegistration) HintSize(int)                     { panic("Unsupported operation") }
func (_ MeterIndexRegistration) Finalize()                        {}

func (_ MeterIndexRegistration) AvroCRC64Fingerprint() []byte {
	return []byte(MeterIndexRegistrationAvroCRC64Fingerprint)
}

func (r MeterIndexRegistration) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ActiveMinusIndex"], err = json.Marshal(r.ActiveMinusIndex)
	if err != nil {
		return nil, err
	}
	output["ActivePlusIndex"], err = json.Marshal(r.ActivePlusIndex)
	if err != nil {
		return nil, err
	}
	output["ReactiveMinusIndex"], err = json.Marshal(r.ReactiveMinusIndex)
	if err != nil {
		return nil, err
	}
	output["ReactivePlusIndex"], err = json.Marshal(r.ReactivePlusIndex)
	if err != nil {
		return nil, err
	}
	output["RegistrationTime"], err = json.Marshal(r.RegistrationTime)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MeterIndexRegistration) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ActiveMinusIndex"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ActiveMinusIndex); err != nil {
			return err
		}
	} else {
		r.ActiveMinusIndex = NewUnionNullDouble()

		r.ActiveMinusIndex = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ActivePlusIndex"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ActivePlusIndex); err != nil {
			return err
		}
	} else {
		r.ActivePlusIndex = NewUnionNullDouble()

		r.ActivePlusIndex = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReactiveMinusIndex"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReactiveMinusIndex); err != nil {
			return err
		}
	} else {
		r.ReactiveMinusIndex = NewUnionNullDouble()

		r.ReactiveMinusIndex = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ReactivePlusIndex"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ReactivePlusIndex); err != nil {
			return err
		}
	} else {
		r.ReactivePlusIndex = NewUnionNullDouble()

		r.ReactivePlusIndex = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["RegistrationTime"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RegistrationTime); err != nil {
			return err
		}
	} else {
		r.RegistrationTime = NewUnionNullString()

		r.RegistrationTime = nil
	}
	return nil
}
