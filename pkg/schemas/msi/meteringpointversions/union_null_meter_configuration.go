// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullMeterConfigurationTypeEnum int

const (
	UnionNullMeterConfigurationTypeEnumMeterConfiguration UnionNullMeterConfigurationTypeEnum = 1
)

type UnionNullMeterConfiguration struct {
	Null               *types.NullVal
	MeterConfiguration MeterConfiguration
	UnionType          UnionNullMeterConfigurationTypeEnum
}

func writeUnionNullMeterConfiguration(r *UnionNullMeterConfiguration, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullMeterConfigurationTypeEnumMeterConfiguration:
		return writeMeterConfiguration(r.MeterConfiguration, w)
	}
	return fmt.Errorf("invalid value for *UnionNullMeterConfiguration")
}

func NewUnionNullMeterConfiguration() *UnionNullMeterConfiguration {
	return &UnionNullMeterConfiguration{}
}

func (r *UnionNullMeterConfiguration) Serialize(w io.Writer) error {
	return writeUnionNullMeterConfiguration(r, w)
}

func DeserializeUnionNullMeterConfiguration(r io.Reader) (*UnionNullMeterConfiguration, error) {
	t := NewUnionNullMeterConfiguration()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullMeterConfigurationFromSchema(r io.Reader, schema string) (*UnionNullMeterConfiguration, error) {
	t := NewUnionNullMeterConfiguration()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullMeterConfiguration) Schema() string {
	return "[\"null\",{\"fields\":[{\"default\":null,\"name\":\"CircuitBreaker\",\"type\":[\"null\",{\"fields\":[{\"default\":null,\"name\":\"ButtonLocalConnectionAllowed\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"ButtonLocalDisconnectionAllowed\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Enabled\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"CircuitBreakerConfiguration\",\"type\":\"record\"}]},{\"name\":\"CollectionConfiguration\",\"type\":{\"name\":\"HesCollectionConfiguration\",\"symbols\":[\"TEST_Contract_DC_60_15_min\",\"Fact_Contract_CT_V2\",\"Empty_Contract\",\"Fact_Contract_CT_V1\",\"Ad_Hoc_Contract\",\"Fact_Contract_DC_V1\",\"Fact_Contract_DC_V2\",\"PreContract\",\"Contract_MCD_60\",\"Contract_MCD_15\",\"Contract_60_min_K\",\"Contract_60_min\",\"Contract_15_min\",\"ColdWater_60min\"],\"type\":\"enum\"}},{\"default\":null,\"name\":\"FirmwareVersion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HanState\",\"type\":[\"null\",{\"name\":\"HanState\",\"symbols\":[\"Closed\",\"Open\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"PrimaryAdjustment\",\"type\":[\"null\",\"double\"]}],\"name\":\"MeterConfiguration\",\"type\":\"record\"}]"
}

func (_ *UnionNullMeterConfiguration) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullMeterConfiguration) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullMeterConfiguration) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullMeterConfiguration) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullMeterConfiguration) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullMeterConfiguration) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullMeterConfiguration) SetLong(v int64) {

	r.UnionType = (UnionNullMeterConfigurationTypeEnum)(v)
}

func (r *UnionNullMeterConfiguration) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.MeterConfiguration = NewMeterConfiguration()
		return &types.Record{Target: (&r.MeterConfiguration)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullMeterConfiguration) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullMeterConfiguration) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullMeterConfiguration) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullMeterConfiguration) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullMeterConfiguration) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullMeterConfiguration) Finalize()                {}

func (r *UnionNullMeterConfiguration) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullMeterConfigurationTypeEnumMeterConfiguration:
		return json.Marshal(map[string]interface{}{"Msim.Domain.Model.Meters.MeterConfiguration": r.MeterConfiguration})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullMeterConfiguration")
}

func (r *UnionNullMeterConfiguration) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["Msim.Domain.Model.Meters.MeterConfiguration"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.MeterConfiguration)
	}
	return fmt.Errorf("invalid value for *UnionNullMeterConfiguration")
}
