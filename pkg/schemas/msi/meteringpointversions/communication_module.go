// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CommunicationModule struct {
	FirmwareVersion *UnionNullString `json:"FirmwareVersion"`

	HesInstance *UnionNullString `json:"HesInstance"`

	ModelId *UnionNullString `json:"ModelId"`

	OwnerId *UnionNullString `json:"OwnerId"`

	ProductionYear *UnionNullInt `json:"ProductionYear"`

	SerialNumber *UnionNullString `json:"SerialNumber"`
}

const CommunicationModuleAvroCRC64Fingerprint = "\xd2\x12\xda\xdaWoT\xaf"

func NewCommunicationModule() CommunicationModule {
	r := CommunicationModule{}
	r.FirmwareVersion = nil
	r.HesInstance = nil
	r.ModelId = nil
	r.OwnerId = nil
	r.ProductionYear = nil
	r.SerialNumber = nil
	return r
}

func DeserializeCommunicationModule(r io.Reader) (CommunicationModule, error) {
	t := NewCommunicationModule()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCommunicationModuleFromSchema(r io.Reader, schema string) (CommunicationModule, error) {
	t := NewCommunicationModule()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCommunicationModule(r CommunicationModule, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.FirmwareVersion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.HesInstance, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ModelId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.OwnerId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.ProductionYear, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.SerialNumber, w)
	if err != nil {
		return err
	}
	return err
}

func (r CommunicationModule) Serialize(w io.Writer) error {
	return writeCommunicationModule(r, w)
}

func (r CommunicationModule) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"FirmwareVersion\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"HesInstance\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ModelId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"OwnerId\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"ProductionYear\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"SerialNumber\",\"type\":[\"null\",\"string\"]}],\"name\":\"Msim.Domain.Model.Meters.CommunicationModule\",\"type\":\"record\"}"
}

func (r CommunicationModule) SchemaName() string {
	return "Msim.Domain.Model.Meters.CommunicationModule"
}

func (_ CommunicationModule) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CommunicationModule) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CommunicationModule) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CommunicationModule) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CommunicationModule) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CommunicationModule) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CommunicationModule) SetString(v string)   { panic("Unsupported operation") }
func (_ CommunicationModule) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CommunicationModule) Get(i int) types.Field {
	switch i {
	case 0:
		r.FirmwareVersion = NewUnionNullString()

		return r.FirmwareVersion
	case 1:
		r.HesInstance = NewUnionNullString()

		return r.HesInstance
	case 2:
		r.ModelId = NewUnionNullString()

		return r.ModelId
	case 3:
		r.OwnerId = NewUnionNullString()

		return r.OwnerId
	case 4:
		r.ProductionYear = NewUnionNullInt()

		return r.ProductionYear
	case 5:
		r.SerialNumber = NewUnionNullString()

		return r.SerialNumber
	}
	panic("Unknown field index")
}

func (r *CommunicationModule) SetDefault(i int) {
	switch i {
	case 0:
		r.FirmwareVersion = nil
		return
	case 1:
		r.HesInstance = nil
		return
	case 2:
		r.ModelId = nil
		return
	case 3:
		r.OwnerId = nil
		return
	case 4:
		r.ProductionYear = nil
		return
	case 5:
		r.SerialNumber = nil
		return
	}
	panic("Unknown field index")
}

func (r *CommunicationModule) NullField(i int) {
	switch i {
	case 0:
		r.FirmwareVersion = nil
		return
	case 1:
		r.HesInstance = nil
		return
	case 2:
		r.ModelId = nil
		return
	case 3:
		r.OwnerId = nil
		return
	case 4:
		r.ProductionYear = nil
		return
	case 5:
		r.SerialNumber = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CommunicationModule) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ CommunicationModule) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ CommunicationModule) HintSize(int)                     { panic("Unsupported operation") }
func (_ CommunicationModule) Finalize()                        {}

func (_ CommunicationModule) AvroCRC64Fingerprint() []byte {
	return []byte(CommunicationModuleAvroCRC64Fingerprint)
}

func (r CommunicationModule) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["FirmwareVersion"], err = json.Marshal(r.FirmwareVersion)
	if err != nil {
		return nil, err
	}
	output["HesInstance"], err = json.Marshal(r.HesInstance)
	if err != nil {
		return nil, err
	}
	output["ModelId"], err = json.Marshal(r.ModelId)
	if err != nil {
		return nil, err
	}
	output["OwnerId"], err = json.Marshal(r.OwnerId)
	if err != nil {
		return nil, err
	}
	output["ProductionYear"], err = json.Marshal(r.ProductionYear)
	if err != nil {
		return nil, err
	}
	output["SerialNumber"], err = json.Marshal(r.SerialNumber)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CommunicationModule) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["FirmwareVersion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FirmwareVersion); err != nil {
			return err
		}
	} else {
		r.FirmwareVersion = NewUnionNullString()

		r.FirmwareVersion = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["HesInstance"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HesInstance); err != nil {
			return err
		}
	} else {
		r.HesInstance = NewUnionNullString()

		r.HesInstance = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ModelId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ModelId); err != nil {
			return err
		}
	} else {
		r.ModelId = NewUnionNullString()

		r.ModelId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["OwnerId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OwnerId); err != nil {
			return err
		}
	} else {
		r.OwnerId = NewUnionNullString()

		r.OwnerId = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ProductionYear"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ProductionYear); err != nil {
			return err
		}
	} else {
		r.ProductionYear = NewUnionNullInt()

		r.ProductionYear = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SerialNumber"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SerialNumber); err != nil {
			return err
		}
	} else {
		r.SerialNumber = NewUnionNullString()

		r.SerialNumber = nil
	}
	return nil
}
