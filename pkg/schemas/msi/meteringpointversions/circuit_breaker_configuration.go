// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type CircuitBreakerConfiguration struct {
	ButtonLocalConnectionAllowed *UnionNullBool `json:"ButtonLocalConnectionAllowed"`

	ButtonLocalDisconnectionAllowed *UnionNullBool `json:"ButtonLocalDisconnectionAllowed"`

	Enabled *UnionNullBool `json:"Enabled"`
}

const CircuitBreakerConfigurationAvroCRC64Fingerprint = "j\x8csrW*\xcf."

func NewCircuitBreakerConfiguration() CircuitBreakerConfiguration {
	r := CircuitBreakerConfiguration{}
	r.ButtonLocalConnectionAllowed = nil
	r.ButtonLocalDisconnectionAllowed = nil
	r.Enabled = nil
	return r
}

func DeserializeCircuitBreakerConfiguration(r io.Reader) (CircuitBreakerConfiguration, error) {
	t := NewCircuitBreakerConfiguration()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCircuitBreakerConfigurationFromSchema(r io.Reader, schema string) (CircuitBreakerConfiguration, error) {
	t := NewCircuitBreakerConfiguration()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCircuitBreakerConfiguration(r CircuitBreakerConfiguration, w io.Writer) error {
	var err error
	err = writeUnionNullBool(r.ButtonLocalConnectionAllowed, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.ButtonLocalDisconnectionAllowed, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.Enabled, w)
	if err != nil {
		return err
	}
	return err
}

func (r CircuitBreakerConfiguration) Serialize(w io.Writer) error {
	return writeCircuitBreakerConfiguration(r, w)
}

func (r CircuitBreakerConfiguration) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"ButtonLocalConnectionAllowed\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"ButtonLocalDisconnectionAllowed\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"Enabled\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"Msim.Domain.Model.Meters.CircuitBreakerConfiguration\",\"type\":\"record\"}"
}

func (r CircuitBreakerConfiguration) SchemaName() string {
	return "Msim.Domain.Model.Meters.CircuitBreakerConfiguration"
}

func (_ CircuitBreakerConfiguration) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ CircuitBreakerConfiguration) SetInt(v int32)       { panic("Unsupported operation") }
func (_ CircuitBreakerConfiguration) SetLong(v int64)      { panic("Unsupported operation") }
func (_ CircuitBreakerConfiguration) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ CircuitBreakerConfiguration) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ CircuitBreakerConfiguration) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ CircuitBreakerConfiguration) SetString(v string)   { panic("Unsupported operation") }
func (_ CircuitBreakerConfiguration) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *CircuitBreakerConfiguration) Get(i int) types.Field {
	switch i {
	case 0:
		r.ButtonLocalConnectionAllowed = NewUnionNullBool()

		return r.ButtonLocalConnectionAllowed
	case 1:
		r.ButtonLocalDisconnectionAllowed = NewUnionNullBool()

		return r.ButtonLocalDisconnectionAllowed
	case 2:
		r.Enabled = NewUnionNullBool()

		return r.Enabled
	}
	panic("Unknown field index")
}

func (r *CircuitBreakerConfiguration) SetDefault(i int) {
	switch i {
	case 0:
		r.ButtonLocalConnectionAllowed = nil
		return
	case 1:
		r.ButtonLocalDisconnectionAllowed = nil
		return
	case 2:
		r.Enabled = nil
		return
	}
	panic("Unknown field index")
}

func (r *CircuitBreakerConfiguration) NullField(i int) {
	switch i {
	case 0:
		r.ButtonLocalConnectionAllowed = nil
		return
	case 1:
		r.ButtonLocalDisconnectionAllowed = nil
		return
	case 2:
		r.Enabled = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ CircuitBreakerConfiguration) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ CircuitBreakerConfiguration) AppendArray() types.Field { panic("Unsupported operation") }
func (_ CircuitBreakerConfiguration) HintSize(int)             { panic("Unsupported operation") }
func (_ CircuitBreakerConfiguration) Finalize()                {}

func (_ CircuitBreakerConfiguration) AvroCRC64Fingerprint() []byte {
	return []byte(CircuitBreakerConfigurationAvroCRC64Fingerprint)
}

func (r CircuitBreakerConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["ButtonLocalConnectionAllowed"], err = json.Marshal(r.ButtonLocalConnectionAllowed)
	if err != nil {
		return nil, err
	}
	output["ButtonLocalDisconnectionAllowed"], err = json.Marshal(r.ButtonLocalDisconnectionAllowed)
	if err != nil {
		return nil, err
	}
	output["Enabled"], err = json.Marshal(r.Enabled)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *CircuitBreakerConfiguration) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["ButtonLocalConnectionAllowed"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ButtonLocalConnectionAllowed); err != nil {
			return err
		}
	} else {
		r.ButtonLocalConnectionAllowed = NewUnionNullBool()

		r.ButtonLocalConnectionAllowed = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["ButtonLocalDisconnectionAllowed"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ButtonLocalDisconnectionAllowed); err != nil {
			return err
		}
	} else {
		r.ButtonLocalDisconnectionAllowed = NewUnionNullBool()

		r.ButtonLocalDisconnectionAllowed = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Enabled"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Enabled); err != nil {
			return err
		}
	} else {
		r.Enabled = NewUnionNullBool()

		r.Enabled = nil
	}
	return nil
}
