// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type MeterValueProfile struct {
	Method *UnionNullMethod `json:"Method"`

	Registers *UnionNullArrayRegister `json:"Registers"`

	Resolution *UnionNullMeterValueResolution `json:"Resolution"`
}

const MeterValueProfileAvroCRC64Fingerprint = "\x01\b<e\xdf\xd2B\xce"

func NewMeterValueProfile() MeterValueProfile {
	r := MeterValueProfile{}
	r.Method = nil
	r.Registers = nil
	r.Resolution = nil
	return r
}

func DeserializeMeterValueProfile(r io.Reader) (MeterValueProfile, error) {
	t := NewMeterValueProfile()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeMeterValueProfileFromSchema(r io.Reader, schema string) (MeterValueProfile, error) {
	t := NewMeterValueProfile()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeMeterValueProfile(r MeterValueProfile, w io.Writer) error {
	var err error
	err = writeUnionNullMethod(r.Method, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayRegister(r.Registers, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMeterValueResolution(r.Resolution, w)
	if err != nil {
		return err
	}
	return err
}

func (r MeterValueProfile) Serialize(w io.Writer) error {
	return writeMeterValueProfile(r, w)
}

func (r MeterValueProfile) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"Method\",\"type\":[\"null\",{\"name\":\"Method\",\"symbols\":[\"Automatic\",\"Manual\"],\"type\":\"enum\"}]},{\"default\":null,\"name\":\"Registers\",\"type\":[\"null\",{\"items\":{\"name\":\"Register\",\"symbols\":[\"ActivePlus\",\"ActiveMinus\",\"ReactivePlus\",\"ReactiveMinus\"],\"type\":\"enum\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"Resolution\",\"type\":[\"null\",{\"name\":\"MeterValueResolution\",\"symbols\":[\"Quarterly\",\"Hourly\"],\"type\":\"enum\"}]}],\"name\":\"Msim.Domain.Model.Primitives.MeterValueProfile\",\"type\":\"record\"}"
}

func (r MeterValueProfile) SchemaName() string {
	return "Msim.Domain.Model.Primitives.MeterValueProfile"
}

func (_ MeterValueProfile) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ MeterValueProfile) SetInt(v int32)       { panic("Unsupported operation") }
func (_ MeterValueProfile) SetLong(v int64)      { panic("Unsupported operation") }
func (_ MeterValueProfile) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ MeterValueProfile) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ MeterValueProfile) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ MeterValueProfile) SetString(v string)   { panic("Unsupported operation") }
func (_ MeterValueProfile) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *MeterValueProfile) Get(i int) types.Field {
	switch i {
	case 0:
		r.Method = NewUnionNullMethod()

		return r.Method
	case 1:
		r.Registers = NewUnionNullArrayRegister()

		return r.Registers
	case 2:
		r.Resolution = NewUnionNullMeterValueResolution()

		return r.Resolution
	}
	panic("Unknown field index")
}

func (r *MeterValueProfile) SetDefault(i int) {
	switch i {
	case 0:
		r.Method = nil
		return
	case 1:
		r.Registers = nil
		return
	case 2:
		r.Resolution = nil
		return
	}
	panic("Unknown field index")
}

func (r *MeterValueProfile) NullField(i int) {
	switch i {
	case 0:
		r.Method = nil
		return
	case 1:
		r.Registers = nil
		return
	case 2:
		r.Resolution = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ MeterValueProfile) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ MeterValueProfile) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ MeterValueProfile) HintSize(int)                     { panic("Unsupported operation") }
func (_ MeterValueProfile) Finalize()                        {}

func (_ MeterValueProfile) AvroCRC64Fingerprint() []byte {
	return []byte(MeterValueProfileAvroCRC64Fingerprint)
}

func (r MeterValueProfile) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["Method"], err = json.Marshal(r.Method)
	if err != nil {
		return nil, err
	}
	output["Registers"], err = json.Marshal(r.Registers)
	if err != nil {
		return nil, err
	}
	output["Resolution"], err = json.Marshal(r.Resolution)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *MeterValueProfile) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["Method"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Method); err != nil {
			return err
		}
	} else {
		r.Method = NewUnionNullMethod()

		r.Method = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Registers"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Registers); err != nil {
			return err
		}
	} else {
		r.Registers = NewUnionNullArrayRegister()

		r.Registers = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["Resolution"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Resolution); err != nil {
			return err
		}
	} else {
		r.Resolution = NewUnionNullMeterValueResolution()

		r.Resolution = nil
	}
	return nil
}
