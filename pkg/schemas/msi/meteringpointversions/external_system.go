// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ExternalSystem int32

const (
	ExternalSystemUnknown ExternalSystem = 0
	ExternalSystemIfs     ExternalSystem = 1
	ExternalSystemElwin   ExternalSystem = 2
	ExternalSystemGeonis  ExternalSystem = 3
	ExternalSystemQuant   ExternalSystem = 4
	ExternalSystemCab     ExternalSystem = 5
	ExternalSystemMmm     ExternalSystem = 6
	ExternalSystemMdmx    ExternalSystem = 7
)

func (e ExternalSystem) String() string {
	switch e {
	case ExternalSystemUnknown:
		return "Unknown"
	case ExternalSystemIfs:
		return "Ifs"
	case ExternalSystemElwin:
		return "Elwin"
	case ExternalSystemGeonis:
		return "Geonis"
	case ExternalSystemQuant:
		return "Quant"
	case ExternalSystemCab:
		return "Cab"
	case ExternalSystemMmm:
		return "Mmm"
	case ExternalSystemMdmx:
		return "Mdmx"
	}
	return "unknown"
}

func writeExternalSystem(r ExternalSystem, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewExternalSystemValue(raw string) (r ExternalSystem, err error) {
	switch raw {
	case "Unknown":
		return ExternalSystemUnknown, nil
	case "Ifs":
		return ExternalSystemIfs, nil
	case "Elwin":
		return ExternalSystemElwin, nil
	case "Geonis":
		return ExternalSystemGeonis, nil
	case "Quant":
		return ExternalSystemQuant, nil
	case "Cab":
		return ExternalSystemCab, nil
	case "Mmm":
		return ExternalSystemMmm, nil
	case "Mdmx":
		return ExternalSystemMdmx, nil
	}

	return -1, fmt.Errorf("invalid value for ExternalSystem: '%s'", raw)

}

func (b ExternalSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *ExternalSystem) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewExternalSystemValue(stringVal)
	*b = val
	return err
}

type ExternalSystemWrapper struct {
	Target *ExternalSystem
}

func (b ExternalSystemWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b ExternalSystemWrapper) SetInt(v int32) {
	*(b.Target) = ExternalSystem(v)
}

func (b ExternalSystemWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b ExternalSystemWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b ExternalSystemWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b ExternalSystemWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b ExternalSystemWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b ExternalSystemWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b ExternalSystemWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b ExternalSystemWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b ExternalSystemWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b ExternalSystemWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b ExternalSystemWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b ExternalSystemWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b ExternalSystemWrapper) Finalize() {}
