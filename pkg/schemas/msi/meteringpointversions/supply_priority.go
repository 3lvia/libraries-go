// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SupplyPriority int32

const (
	SupplyPriorityP SupplyPriority = 0
	SupplyPriorityA SupplyPriority = 1
	SupplyPriorityB SupplyPriority = 2
	SupplyPriorityC SupplyPriority = 3
	SupplyPriorityD SupplyPriority = 4
)

func (e SupplyPriority) String() string {
	switch e {
	case SupplyPriorityP:
		return "P"
	case SupplyPriorityA:
		return "A"
	case SupplyPriorityB:
		return "B"
	case SupplyPriorityC:
		return "C"
	case SupplyPriorityD:
		return "D"
	}
	return "unknown"
}

func writeSupplyPriority(r SupplyPriority, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewSupplyPriorityValue(raw string) (r SupplyPriority, err error) {
	switch raw {
	case "P":
		return SupplyPriorityP, nil
	case "A":
		return SupplyPriorityA, nil
	case "B":
		return SupplyPriorityB, nil
	case "C":
		return SupplyPriorityC, nil
	case "D":
		return SupplyPriorityD, nil
	}

	return -1, fmt.Errorf("invalid value for SupplyPriority: '%s'", raw)

}

func (b SupplyPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *SupplyPriority) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewSupplyPriorityValue(stringVal)
	*b = val
	return err
}

type SupplyPriorityWrapper struct {
	Target *SupplyPriority
}

func (b SupplyPriorityWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b SupplyPriorityWrapper) SetInt(v int32) {
	*(b.Target) = SupplyPriority(v)
}

func (b SupplyPriorityWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b SupplyPriorityWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b SupplyPriorityWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b SupplyPriorityWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b SupplyPriorityWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b SupplyPriorityWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b SupplyPriorityWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b SupplyPriorityWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b SupplyPriorityWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b SupplyPriorityWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b SupplyPriorityWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b SupplyPriorityWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b SupplyPriorityWrapper) Finalize() {}
