// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100058_21.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Production struct {
	MaxProductionCapacity *UnionNullInt `json:"MaxProductionCapacity"`

	SubSiteTypeProduction SubSiteTypeProduction `json:"SubSiteTypeProduction"`
}

const ProductionAvroCRC64Fingerprint = "\xd7!t:\x06'\x16b"

func NewProduction() Production {
	r := Production{}
	r.MaxProductionCapacity = nil
	return r
}

func DeserializeProduction(r io.Reader) (Production, error) {
	t := NewProduction()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeProductionFromSchema(r io.Reader, schema string) (Production, error) {
	t := NewProduction()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeProduction(r Production, w io.Writer) error {
	var err error
	err = writeUnionNullInt(r.MaxProductionCapacity, w)
	if err != nil {
		return err
	}
	err = writeSubSiteTypeProduction(r.SubSiteTypeProduction, w)
	if err != nil {
		return err
	}
	return err
}

func (r Production) Serialize(w io.Writer) error {
	return writeProduction(r, w)
}

func (r Production) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"MaxProductionCapacity\",\"type\":[\"null\",\"int\"]},{\"name\":\"SubSiteTypeProduction\",\"type\":{\"name\":\"SubSiteTypeProduction\",\"symbols\":[\"B14\",\"B16\",\"B20\",\"Z04\",\"Z05\",\"Z06\"],\"type\":\"enum\"}}],\"name\":\"Msim.Domain.Model.MeteringPoints.Production\",\"type\":\"record\"}"
}

func (r Production) SchemaName() string {
	return "Msim.Domain.Model.MeteringPoints.Production"
}

func (_ Production) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Production) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Production) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Production) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Production) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Production) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Production) SetString(v string)   { panic("Unsupported operation") }
func (_ Production) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Production) Get(i int) types.Field {
	switch i {
	case 0:
		r.MaxProductionCapacity = NewUnionNullInt()

		return r.MaxProductionCapacity
	case 1:
		w := SubSiteTypeProductionWrapper{Target: &r.SubSiteTypeProduction}

		return w

	}
	panic("Unknown field index")
}

func (r *Production) SetDefault(i int) {
	switch i {
	case 0:
		r.MaxProductionCapacity = nil
		return
	}
	panic("Unknown field index")
}

func (r *Production) NullField(i int) {
	switch i {
	case 0:
		r.MaxProductionCapacity = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Production) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Production) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Production) HintSize(int)                     { panic("Unsupported operation") }
func (_ Production) Finalize()                        {}

func (_ Production) AvroCRC64Fingerprint() []byte {
	return []byte(ProductionAvroCRC64Fingerprint)
}

func (r Production) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["MaxProductionCapacity"], err = json.Marshal(r.MaxProductionCapacity)
	if err != nil {
		return nil, err
	}
	output["SubSiteTypeProduction"], err = json.Marshal(r.SubSiteTypeProduction)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Production) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["MaxProductionCapacity"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MaxProductionCapacity); err != nil {
			return err
		}
	} else {
		r.MaxProductionCapacity = NewUnionNullInt()

		r.MaxProductionCapacity = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["SubSiteTypeProduction"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SubSiteTypeProduction); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for SubSiteTypeProduction")
	}
	return nil
}
