// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     100448_3.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type WithEnumVersion struct {
	MyValue MyType `json:"MyValue"`
}

const WithEnumVersionAvroCRC64Fingerprint = "$\f2\xcd\xe7r.\x80"

func NewWithEnumVersion() WithEnumVersion {
	r := WithEnumVersion{}
	return r
}

func DeserializeWithEnumVersion(r io.Reader) (WithEnumVersion, error) {
	t := NewWithEnumVersion()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeWithEnumVersionFromSchema(r io.Reader, schema string) (WithEnumVersion, error) {
	t := NewWithEnumVersion()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeWithEnumVersion(r WithEnumVersion, w io.Writer) error {
	var err error
	err = writeMyType(r.MyValue, w)
	if err != nil {
		return err
	}
	return err
}

func (r WithEnumVersion) Serialize(w io.Writer) error {
	return writeWithEnumVersion(r, w)
}

func (r WithEnumVersion) Schema() string {
	return "{\"fields\":[{\"name\":\"MyValue\",\"type\":{\"default\":\"Value2\",\"name\":\"MyType\",\"symbols\":[\"Value1\",\"Value2\"],\"type\":\"enum\"}}],\"name\":\"Elvia.Edna.Events.Tests.SerializationTests.WithEnumVersion\",\"type\":\"record\"}"
}

func (r WithEnumVersion) SchemaName() string {
	return "Elvia.Edna.Events.Tests.SerializationTests.WithEnumVersion"
}

func (_ WithEnumVersion) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ WithEnumVersion) SetInt(v int32)       { panic("Unsupported operation") }
func (_ WithEnumVersion) SetLong(v int64)      { panic("Unsupported operation") }
func (_ WithEnumVersion) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ WithEnumVersion) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ WithEnumVersion) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ WithEnumVersion) SetString(v string)   { panic("Unsupported operation") }
func (_ WithEnumVersion) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *WithEnumVersion) Get(i int) types.Field {
	switch i {
	case 0:
		w := MyTypeWrapper{Target: &r.MyValue}

		return w

	}
	panic("Unknown field index")
}

func (r *WithEnumVersion) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *WithEnumVersion) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ WithEnumVersion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ WithEnumVersion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ WithEnumVersion) HintSize(int)                     { panic("Unsupported operation") }
func (_ WithEnumVersion) Finalize()                        {}

func (_ WithEnumVersion) AvroCRC64Fingerprint() []byte {
	return []byte(WithEnumVersionAvroCRC64Fingerprint)
}

func (r WithEnumVersion) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["MyValue"], err = json.Marshal(r.MyValue)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *WithEnumVersion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["MyValue"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MyValue); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for MyValue")
	}
	return nil
}
